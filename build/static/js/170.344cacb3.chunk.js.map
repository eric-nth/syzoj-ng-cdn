{"version":3,"sources":["pages/user/edit/SecurityView.tsx"],"names":["fetchData","username","a","result","Promise","all","api","user","getUserSecuritySettings","auth","listUserSessions","requestError","response","RouteError","showRefresh","showBack","error","makeToBeLocalizedText","Object","assign","View","observer","props","_","useLocalizer","useEffect","appState","enterNewPage","meta","locale","recaptcha","useRecaptcha","hasPrivilege","currentUser","isAdmin","currentUserPrivileges","includes","useState","oldPassword","setOldPassword","newPassword","setNewPassword","retypePassword","setRetypePassword","useFieldCheckSimple","value","checkOldPassword","oldPasswordInvalid","isValidPassword","checkNewPassword","newPasswordInvalid","checkRetypePassword","retypePasswordInvalid","wrongOldPassword","setWrongOldPassword","emptyNewPassword","setEmptyNewPassword","emptyRetypePassword","setEmptyRetypePassword","checkPasswordInputs","useAsyncCallbackPending","updateUserPassword","userId","id","password","toast","success","pendingChangePassword","onSubmitChangePassword","email","setEmail","isEmail","checkEmail","emailInvalid","emailVerificationCode","setEmailVerificationCode","sendEmailVerificationCodeTimeout","setSendEmailVerificationCodeTimeout","emailVerificationCodeError","setEmailVerificationCodeError","toLowerCase","sendEmailVerificationCode","type","setDuplicateEmail","errorMessage","sendEmailVerificationCodePending","onSendEmailVerificationCode","setInterval","timeout","clearInterval","duplicateEmail","updateUserSelfEmail","pendingChangeEmail","onSubmitChangeEmail","Date","timeAgoRelativeDate","setTimeAgoRelativeDate","sessions","setSessions","revokeAllPopupOpen","setRevokeAllPopupOpen","sessionId","revokeUserSession","filter","session","currentSessionId","onRevokeSession","className","style","sectionHeader","size","content","readOnly","hidden","autoComplete","header","notFullWidth","fluid","onChange","e","onBlur","notes","submit","loading","primary","onClick","serverPreference","security","requireEmailVerification","code","stripInvalidCharactersInEmailVerificationCode","action","disabled","bottomAttached","text","some","trigger","basic","negative","revokeAll","open","onOpen","onClose","on","position","length","sessionList","sort","b","lastAccessTime","map","isCurrentSession","ua","UAParser","userAgent","getResult","icon","deviceTypeMap","console","mobile","wearable","embedded","tablet","smarttv","osNameMap","Windows","Ubuntu","CentOS","SUSE","Fedora","device","os","name","test","version","browser","sessionListItem","light","empty","circular","color","iconWrapper","info","browserAndOs","title","lastActive","formatDateTime","fixChineseSpace","time","timeago","relativeDate","loginIpLocationTime","loginIpLocation","ip","loginIp","location","loginTime","placeholder"],"mappings":"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","file":"static/js/170.344cacb3.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Header, Button, Input, Segment, Icon, SegmentGroup, Label, Popup } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\nimport { isEmail } from \"class-validator\";\nimport { UAParser } from \"ua-parser-js\";\nimport * as timeago from \"timeago.js\";\n\nimport style from \"./UserEdit.module.less\";\n\nimport api from \"@/api\";\nimport { appState } from \"@/appState\";\nimport toast from \"@/utils/toast\";\nimport { useLocalizer, useFieldCheckSimple, useAsyncCallbackPending, useRecaptcha } from \"@/utils/hooks\";\nimport { isValidPassword, stripInvalidCharactersInEmailVerificationCode } from \"@/utils/validators\";\nimport { RouteError } from \"@/AppRouter\";\nimport fixChineseSpace from \"@/utils/fixChineseSpace\";\nimport formatDateTime from \"@/utils/formatDateTime\";\nimport { makeToBeLocalizedText } from \"@/locales\";\n\nexport async function fetchData(username: string) {\n  const result = {};\n\n  for (const { requestError, response } of await Promise.all([\n    api.user.getUserSecuritySettings({ username }),\n    api.auth.listUserSessions({ username })\n  ])) {\n    if (requestError) throw new RouteError(requestError, { showRefresh: true, showBack: true });\n    else if (response.error) throw new RouteError(makeToBeLocalizedText(`user_edit.errors.${response.error}`));\n    Object.assign(result, response);\n  }\n\n  return result;\n}\n\ninterface SecurityViewProps {\n  meta?: ApiTypes.UserMetaDto;\n  sessions?: ApiTypes.UserSessionDto[];\n  currentSessionId?: number;\n}\n\nconst SecurityView: React.FC<SecurityViewProps> = props => {\n  const _ = useLocalizer(\"user_edit.security\");\n\n  useEffect(() => {\n    appState.enterNewPage(`${_(`.title`)} - ${props.meta.username}`, null, false);\n  }, [appState.locale, props.meta]);\n\n  const recaptcha = useRecaptcha();\n\n  const hasPrivilege = appState.currentUser.isAdmin || appState.currentUserPrivileges.includes(\"ManageUser\");\n\n  // Start change password\n  const [oldPassword, setOldPassword] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [retypePassword, setRetypePassword] = useState(\"\");\n\n  const [checkOldPassword, oldPasswordInvalid] = useFieldCheckSimple(\n    oldPassword,\n    value => !!value || (!value && !newPassword)\n  );\n  const [checkNewPassword, newPasswordInvalid] = useFieldCheckSimple(\n    newPassword,\n    value => isValidPassword(value) || !value\n  );\n  const [checkRetypePassword, retypePasswordInvalid] = useFieldCheckSimple(\n    retypePassword,\n    value => value === newPassword || !value\n  );\n\n  // Errors\n  const [wrongOldPassword, setWrongOldPassword] = useState(false);\n  const [emptyNewPassword, setEmptyNewPassword] = useState(false);\n  const [emptyRetypePassword, setEmptyRetypePassword] = useState(false);\n\n  function checkPasswordInputs() {\n    checkOldPassword();\n    checkNewPassword();\n    checkRetypePassword();\n  }\n\n  const [pendingChangePassword, onSubmitChangePassword] = useAsyncCallbackPending(async () => {\n    if ((oldPasswordInvalid && !hasPrivilege) || newPasswordInvalid || retypePasswordInvalid) {\n    } else if (!newPassword) setEmptyNewPassword(true);\n    else if (!retypePassword) setEmptyRetypePassword(true);\n    else {\n      const { requestError, response } = await api.user.updateUserPassword({\n        userId: props.meta.id,\n        oldPassword: oldPassword || null,\n        password: newPassword\n      });\n      if (requestError) toast.error(requestError(_));\n      else if (response.error === \"WRONG_OLD_PASSWORD\") {\n        setWrongOldPassword(true);\n      } else if (response.error) toast.error(_(`user_edit.errors.${response.error}`));\n      else {\n        toast.success(_(\".password.success\"));\n\n        setOldPassword(\"\");\n        setNewPassword(\"\");\n        setRetypePassword(\"\");\n        setWrongOldPassword(false);\n        setEmptyNewPassword(false);\n        setEmptyRetypePassword(false);\n      }\n    }\n  });\n  // End change password\n\n  // Start change email\n  const [email, setEmail] = useState(props.meta.email);\n  const [checkEmail, emailInvalid] = useFieldCheckSimple(email, value => isEmail(value));\n\n  const [emailVerificationCode, setEmailVerificationCode] = useState(\"\");\n  const [sendEmailVerificationCodeTimeout, setSendEmailVerificationCodeTimeout] = useState(0);\n\n  const [emailVerificationCodeError, setEmailVerificationCodeError] = useState(false);\n  const [sendEmailVerificationCodePending, onSendEmailVerificationCode] = useAsyncCallbackPending(async () => {\n    if (emailInvalid || email.toLowerCase() === appState.currentUser.email.toLowerCase()) {\n    } else {\n      const { requestError, response } = await api.auth.sendEmailVerificationCode(\n        {\n          email: email,\n          type: \"ChangeEmail\",\n          locale: appState.locale\n        },\n        recaptcha(\"SendEmailVerifactionCode_ChangeEmail\")\n      );\n      if (requestError) toast.error(requestError(_));\n      else if (response.error === \"DUPLICATE_EMAIL\") setDuplicateEmail(true);\n      else if (response.error)\n        toast.error(_(`user_edit.errors.${response.error}`, { errorMessage: response.errorMessage }));\n      else {\n        toast.success(_(\".email.verification_code_sent\"));\n        setSendEmailVerificationCodeTimeout(61);\n      }\n    }\n  });\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      setSendEmailVerificationCodeTimeout(timeout => timeout && timeout - 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  function onChangeVerificationCode(code: string) {\n    setEmailVerificationCodeError(false);\n    setEmailVerificationCode(stripInvalidCharactersInEmailVerificationCode(code));\n  }\n\n  // Errors\n  const [duplicateEmail, setDuplicateEmail] = useState(false);\n\n  const [pendingChangeEmail, onSubmitChangeEmail] = useAsyncCallbackPending(async () => {\n    if (emailInvalid || email.toLowerCase() === appState.currentUser.email.toLowerCase()) {\n    } else {\n      const { requestError, response } = await api.user.updateUserSelfEmail({\n        email: email,\n        emailVerificationCode: emailVerificationCode\n      });\n      if (requestError) toast.error(requestError(_));\n      else if (response.error === \"DUPLICATE_EMAIL\") setDuplicateEmail(true);\n      else if (response.error === \"INVALID_EMAIL_VERIFICATION_CODE\") setEmailVerificationCodeError(true);\n      else if (response.error) toast.error(_(`user_edit.errors.${response.error}`));\n      else {\n        toast.success(_(\".email.success\"));\n\n        if (props.meta.id === appState.currentUser.id) {\n          appState.currentUser.email = email;\n        }\n\n        setEmailVerificationCode(\"\");\n        setEmailVerificationCodeError(false);\n        setSendEmailVerificationCodeTimeout(0);\n      }\n    }\n  });\n  // End change email\n\n  // Start session management\n  const [timeAgoRelativeDate, setTimeAgoRelativeDate] = useState(new Date());\n  // Refersh the time every minute\n  useEffect(() => {\n    const id = setInterval(() => setTimeAgoRelativeDate(new Date()), 60 * 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  const [sessions, setSessions] = useState(props.sessions);\n  const [revokeAllPopupOpen, setRevokeAllPopupOpen] = useState(false);\n  const [, onRevokeSession] = useAsyncCallbackPending(async (sessionId?: number) => {\n    const { requestError, response } = await api.auth.revokeUserSession({\n      userId: props.meta.id,\n      sessionId\n    });\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) toast.error(_(`user_edit.errors.${response.error}`));\n    else {\n      if (!sessionId) {\n        if (props.meta.id === appState.currentUser.id) toast.success(_(\".sessions.success_revoke_all_current_user\"));\n        else toast.success(_(\".sessions.success_revoke_all\"));\n\n        setSessions(sessions.filter(session => session.sessionId === props.currentSessionId));\n      } else {\n        toast.success(_(\".sessions.success_revoke\"));\n\n        setSessions(sessions.filter(session => session.sessionId !== sessionId));\n      }\n    }\n\n    setRevokeAllPopupOpen(false);\n  });\n  // End session management\n\n  return (\n    <>\n      <form>\n        <Header className={style.sectionHeader} size=\"large\" content={_(\".password.header\")} />\n        <input readOnly type=\"text\" hidden autoComplete=\"username\" value={props.meta.username} />\n        {!hasPrivilege && (\n          <>\n            <Header className={style.header} size=\"tiny\" content={_(\".password.old\")} />\n            <Input\n              className={style.notFullWidth}\n              fluid\n              value={oldPassword}\n              type=\"password\"\n              autoComplete=\"current-password\"\n              onChange={(e, { value }) => !pendingChangePassword && (setOldPassword(value), setWrongOldPassword(false))}\n              onBlur={checkPasswordInputs}\n              error={oldPasswordInvalid || wrongOldPassword}\n            />\n            <div className={style.notes}>\n              {wrongOldPassword\n                ? _(\".password.wrong_old_password\")\n                : oldPasswordInvalid && _(\".password.invalid_password\")}\n            </div>\n          </>\n        )}\n        <Header className={style.header} size=\"tiny\" content={_(\".password.new\")} />\n        <Input\n          className={style.notFullWidth}\n          fluid\n          value={newPassword}\n          type=\"password\"\n          autoComplete=\"new-password\"\n          onChange={(e, { value }) => !pendingChangePassword && (setNewPassword(value), setEmptyNewPassword(false))}\n          onBlur={checkPasswordInputs}\n          error={newPasswordInvalid || emptyNewPassword}\n        />\n        <div className={style.notes}>\n          {emptyNewPassword ? _(\".password.empty_new_password\") : newPasswordInvalid && _(\".password.invalid_password\")}\n        </div>\n        <Header className={style.header} size=\"tiny\" content={_(\".password.retype\")} />\n        <Input\n          className={style.notFullWidth}\n          fluid\n          value={retypePassword}\n          type=\"password\"\n          autoComplete=\"new-password\"\n          onChange={(e, { value }) =>\n            !pendingChangePassword && (setRetypePassword(value), setEmptyRetypePassword(false))\n          }\n          onBlur={checkPasswordInputs}\n          error={retypePasswordInvalid || emptyRetypePassword}\n        />\n        <div className={style.notes}>\n          {emptyRetypePassword\n            ? _(\".password.empty_retype_password\")\n            : retypePasswordInvalid && _(\".password.passwords_do_not_match\")}\n        </div>\n      </form>\n      <Button\n        className={style.submit}\n        loading={pendingChangePassword}\n        primary\n        content={_(\".password.submit\")}\n        onClick={onSubmitChangePassword}\n      />\n      {props.meta.id === appState.currentUser.id && (\n        <>\n          <Header className={style.sectionHeader} size=\"large\" content={_(\".email.header\")} />\n          <Header className={style.header} size=\"tiny\" content={_(\".email.email\")} />\n          <Input\n            className={style.notFullWidth}\n            fluid\n            value={email}\n            onChange={(e, { value }) => !pendingChangeEmail && (setEmail(value), setDuplicateEmail(false))}\n            onBlur={checkEmail}\n            error={emailInvalid || duplicateEmail}\n          />\n          <div className={style.notes}>\n            {emailInvalid ? _(\".email.invalid_email\") : duplicateEmail && _(\".email.duplicate_email\")}\n          </div>\n          {appState.serverPreference.security.requireEmailVerification && (\n            <>\n              <Header className={style.header} size=\"tiny\" content={_(\".email.email_verification_code\")} />\n              <Input\n                className={style.notFullWidth}\n                fluid\n                value={emailVerificationCode}\n                onChange={(e, { value }) => !pendingChangeEmail && onChangeVerificationCode(value)}\n                error={emailVerificationCodeError}\n                action={\n                  <Button\n                    disabled={sendEmailVerificationCodeTimeout !== 0}\n                    loading={sendEmailVerificationCodePending}\n                    content={\n                      sendEmailVerificationCodeTimeout\n                        ? `${sendEmailVerificationCodeTimeout > 60 ? 60 : sendEmailVerificationCodeTimeout}s`\n                        : _(\".email.send_email_verification_code\")\n                    }\n                    onClick={onSendEmailVerificationCode}\n                  />\n                }\n              />\n              <div className={style.notes}>\n                {emailVerificationCodeError && _(\".email.invalid_email_verification_code\")}\n              </div>\n            </>\n          )}\n          <Button\n            className={style.submit}\n            loading={pendingChangeEmail}\n            primary\n            content={_(\".email.submit\")}\n            onClick={onSubmitChangeEmail}\n          />\n        </>\n      )}\n      <Header\n        className={style.sectionHeader + \" \" + style.bottomAttached}\n        size=\"large\"\n        content={\n          <>\n            <span className={style.text}>{_(\".sessions.header\")}</span>\n            {sessions.some(session => session.sessionId !== props.currentSessionId) && (\n              <Popup\n                trigger={<Button basic negative className={style.revokeAll} content={_(\".sessions.revoke_all\")} />}\n                content={\n                  <Button content={_(\".sessions.confirm_revoke_all\")} negative onClick={() => onRevokeSession()} />\n                }\n                open={revokeAllPopupOpen}\n                onOpen={() => setRevokeAllPopupOpen(true)}\n                onClose={() => setRevokeAllPopupOpen(false)}\n                on=\"click\"\n                position=\"top center\"\n              />\n            )}\n          </>\n        }\n      />\n      {sessions.length ? (\n        <SegmentGroup className={style.sessionList}>\n          {sessions\n            .sort((a, b) => b.lastAccessTime - a.lastAccessTime)\n            .map(session => {\n              const isCurrentSession = session.sessionId === props.currentSessionId;\n\n              const ua = new UAParser(session.userAgent).getResult();\n\n              // Parse UA icon\n              const icon = (() => {\n                const deviceTypeMap = {\n                  console: \"terminal\",\n                  mobile: \"mobile alternate\",\n                  wearable: \"mobile alternate\",\n                  embedded: \"mobile alternate\",\n                  tablet: \"tablet alternate\",\n                  smarttv: \"desktop\"\n                };\n                const osNameMap = {\n                  Windows: \"windows\",\n                  \"Mac OS\": \"apple\",\n                  Ubuntu: \"ubuntu\",\n                  CentOS: \"centos\",\n                  SUSE: \"suse\",\n                  Fedora: \"fedora\"\n                };\n                if (ua.device.type in deviceTypeMap) return deviceTypeMap[ua.device.type];\n                if (ua.os.name in osNameMap) return osNameMap[ua.os.name];\n                if (/BSD/.test(ua.os.name)) return \"freebsd\";\n                if (/linux/i.test(ua.ua)) return \"linux\";\n                return \"desktop\";\n              })();\n\n              const os = ua.os.name ? ua.os.name + (ua.os.version ? \" \" + ua.os.version : \"\") : \"\";\n              const browser = ua.browser.name\n                ? ua.browser.name + (ua.browser.version ? \" \" + ua.browser.version : \"\")\n                : \"\";\n\n              return (\n                <Segment key={session.sessionId} className={style.sessionListItem}>\n                  <Label\n                    className={style.light}\n                    size=\"small\"\n                    empty\n                    circular\n                    color={isCurrentSession ? \"green\" : \"grey\"}\n                  />\n                  <div className={style.iconWrapper}>\n                    <Icon name={icon as any} />\n                  </div>\n                  <div className={style.info}>\n                    <div className={style.browserAndOs} title={session.userAgent}>\n                      {os || browser ? (\n                        <>\n                          <span className={style.os}>{os}</span>\n                          <span className={style.browser}>{browser}</span>\n                        </>\n                      ) : (\n                        _(\".sessions.unknown_os_browser\")\n                      )}\n                    </div>\n                    <div className={style.lastActive}>\n                      {isCurrentSession ? (\n                        _(\".sessions.current\")\n                      ) : (\n                        <span title={formatDateTime(session.lastAccessTime)[1]}>\n                          {fixChineseSpace(\n                            _(\".sessions.last_active\", {\n                              time: timeago.format(session.lastAccessTime, appState.locale, {\n                                relativeDate: timeAgoRelativeDate\n                              })\n                            })\n                          )}\n                        </span>\n                      )}\n                    </div>\n                    <div className={style.loginIpLocationTime}>\n                      <span className={style.loginIpLocation}>\n                        {fixChineseSpace(\n                          _(session.loginIpLocation ? \".sessions.login_ip_location\" : \".sessions.login_ip\", {\n                            ip: session.loginIp,\n                            location: session.loginIpLocation\n                          })\n                        )}\n                      </span>\n                      <span className={style.time} title={formatDateTime(session.loginTime)[1]}>\n                        {timeago.format(session.loginTime, appState.locale, { relativeDate: timeAgoRelativeDate })}\n                      </span>\n                    </div>\n                  </div>\n                  {props.currentSessionId !== session.sessionId && (\n                    <Popup\n                      trigger={<Button content={_(\".sessions.revoke\")} />}\n                      content={\n                        <Button\n                          negative\n                          content={_(\".sessions.confirm_revoke\")}\n                          onClick={() => onRevokeSession(session.sessionId)}\n                        />\n                      }\n                      on=\"click\"\n                      position=\"left center\"\n                    />\n                  )}\n                </Segment>\n              );\n            })}\n        </SegmentGroup>\n      ) : (\n        <Segment placeholder>\n          <Header icon>\n            <>\n              <Icon name=\"search\" />\n              {_(\".sessions.no_sessions\")}\n            </>\n          </Header>\n        </Segment>\n      )}\n      {props.meta.id === appState.currentUser.id && (\n        <div className={style.notes}>{_(\".sessions.notes_current_user\")}</div>\n      )}\n    </>\n  );\n};\n\nexport const View = observer(SecurityView);\n"],"sourceRoot":""}