{"version":3,"sources":["pages/user/users/UsersPage.tsx"],"names":["SortBy","USERS_PER_PAGE","appState","serverPreference","pagination","userList","fetchData","sortBy","currentPage","a","api","user","getUserList","skipCount","takeCount","requestError","response","RouteError","showRefresh","showBack","error","makeToBeLocalizedText","userMetas","count","UsersPage","props","_","useLocalizer","navigation","useNavigationChecked","currentRoute","useCurrentRoute","useEffect","enterNewPage","locale","scrollElement","document","documentElement","scrollTop","className","style","header","onResultSelect","navigate","username","currentUserHasPrivilege","manageGroups","primary","content","as","Link","href","unstackable","basic","textAlign","table","Header","Row","HeaderCell","columnRank","columnUsername","columnBio","columnAcceptedProblemCount","acceptedProblemCount","name","link","query","columnRating","rating","Body","users","map","i","Cell","misc","renderMarkdownInUserBio","bio","dontUseContentFont","id","totalCount","itemsPerPage","pageUrl","page","url","toString","observer","defineRoute","request","parseInt","sortUserByRating"],"mappings":"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","file":"static/js/174.b8251160.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Table, Icon, Button } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\nimport { useCurrentRoute } from \"react-navi\";\nimport { v4 as uuid } from \"uuid\";\n\nimport style from \"./UsersPage.module.less\";\n\nimport api from \"@/api\";\nimport { UserMeta } from \"@/interfaces/UserMeta\";\nimport { useLocalizer, useNavigationChecked, Link } from \"@/utils/hooks\";\nimport { appState } from \"@/appState\";\nimport { Pagination } from \"@/components/Pagination\";\nimport UserLink from \"@/components/UserLink\";\nimport UserSearch from \"@/components/UserSearch\";\nimport { defineRoute, RouteError } from \"@/AppRouter\";\nimport { makeToBeLocalizedText } from \"@/locales\";\nimport { EmojiRenderer } from \"@/components/EmojiRenderer\";\nimport MarkdownContent from \"@/markdown/MarkdownContent\";\n\nconst USERS_PER_PAGE = appState.serverPreference.pagination.userList;\n\nenum SortBy {\n  rating = \"rating\",\n  acceptedProblemCount = \"acceptedProblemCount\"\n}\n\nasync function fetchData(sortBy: SortBy, currentPage: number): Promise<[UserMeta[], number]> {\n  const { requestError, response } = await api.user.getUserList({\n    sortBy,\n    skipCount: USERS_PER_PAGE * (currentPage - 1),\n    takeCount: USERS_PER_PAGE\n  });\n\n  if (requestError) throw new RouteError(requestError, { showRefresh: true, showBack: true });\n  else if (response.error) throw new RouteError(makeToBeLocalizedText(`users.error.${response.error}`));\n\n  return [response.userMetas, response.count];\n}\n\ninterface UsersPageProps {\n  users: UserMeta[];\n  sortBy: SortBy;\n  currentPage: number;\n  totalCount: number;\n}\n\nlet UsersPage: React.FC<UsersPageProps> = props => {\n  const _ = useLocalizer(\"users\");\n  const navigation = useNavigationChecked();\n  const currentRoute = useCurrentRoute();\n\n  useEffect(() => {\n    appState.enterNewPage(_(\".title\"), \"members\");\n  }, [appState.locale]);\n\n  const scrollElement = document.documentElement;\n  useEffect(() => {\n    scrollElement.scrollTop = 0;\n  }, [props.currentPage]);\n\n  return (\n    <>\n      <div className={style.header}>\n        <UserSearch onResultSelect={user => navigation.navigate(`/u/${user.username}`)} />\n        {appState.currentUserHasPrivilege(\"ManageUserGroup\") && (\n          <div className={style.manageGroups}>\n            <Button primary content={_(\".manage_groups\")} as={Link} href=\"/groups\" />\n          </div>\n        )}\n      </div>\n      <Table unstackable basic=\"very\" textAlign=\"center\" className={style.table}>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell className={style.columnRank}>{_(\".rank\")}</Table.HeaderCell>\n            <Table.HeaderCell className={style.columnUsername}>{_(\".username\")}</Table.HeaderCell>\n            <Table.HeaderCell className={style.columnBio}>{_(\".bio\")}</Table.HeaderCell>\n            <Table.HeaderCell className={style.columnAcceptedProblemCount}>\n              {props.sortBy === SortBy.acceptedProblemCount ? (\n                <>\n                  {_(\".accepted_problem_count\")}\n                  <Icon name=\"angle down\" />\n                </>\n              ) : (\n                <Link\n                  className={style.link}\n                  href={{\n                    query: {\n                      sortBy: SortBy.acceptedProblemCount\n                    }\n                  }}\n                >\n                  {_(\".accepted_problem_count\")}\n                </Link>\n              )}\n            </Table.HeaderCell>\n            <Table.HeaderCell className={style.columnRating}>\n              {props.sortBy === SortBy.rating ? (\n                <>\n                  {_(\".rating\")}\n                  <Icon name=\"angle down\" />\n                </>\n              ) : (\n                <Link\n                  className={style.link}\n                  href={{\n                    query: {\n                      sortBy: SortBy.rating\n                    }\n                  }}\n                >\n                  {_(\".rating\")}\n                </Link>\n              )}\n            </Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {props.users.map((user, i) => (\n            <Table.Row key={user.id}>\n              <Table.Cell>\n                <strong>{(props.currentPage - 1) * USERS_PER_PAGE + i + 1}</strong>\n              </Table.Cell>\n              <Table.Cell>\n                <UserLink user={user} />\n              </Table.Cell>\n              <Table.Cell className={style.columnBio}>\n                {appState.serverPreference.misc.renderMarkdownInUserBio ? (\n                  <MarkdownContent content={user.bio} dontUseContentFont />\n                ) : (\n                  <EmojiRenderer>\n                    <div>{user.bio}</div>\n                  </EmojiRenderer>\n                )}\n              </Table.Cell>\n              <Table.Cell>{user.acceptedProblemCount}</Table.Cell>\n              <Table.Cell>{user.rating}</Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n      {props.totalCount <= USERS_PER_PAGE ? null : (\n        <div className={style.pagination}>\n          <Pagination\n            totalCount={props.totalCount}\n            currentPage={props.currentPage}\n            itemsPerPage={USERS_PER_PAGE}\n            pageUrl={page => ({\n              query: {\n                ...currentRoute.url.query,\n                page: page.toString()\n              }\n            })}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nUsersPage = observer(UsersPage);\n\nexport default defineRoute(async request => {\n  let page = parseInt(request.query.page) || 1;\n  if (page < 1) page = 1;\n\n  let sortBy = request.query.sortBy as SortBy;\n  if (!(sortBy in SortBy))\n    sortBy = appState.serverPreference.misc.sortUserByRating ? SortBy.rating : SortBy.acceptedProblemCount;\n\n  const [users, count] = await fetchData(sortBy, page);\n\n  return <UsersPage sortBy={sortBy} users={users} totalCount={count} currentPage={page} />;\n});\n"],"sourceRoot":""}