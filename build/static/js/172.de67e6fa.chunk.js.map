{"version":3,"sources":["pages/user/groups/GroupsPage.tsx"],"names":["fetchData","a","appState","currentUser","RouteError","makeToBeLocalizedText","api","group","getGroupList","requestError","response","showRefresh","showBack","GroupItem","props","_","useLocalizer","useState","memberListLoading","setMemberListLoading","memberList","setMemberList","memberListOpened","setMemberListOpened","pending","getGroupMemberList","groupId","meta","id","toast","error","hasPrivilege","currentUserHasPrivilege","setPending","userId","isGroupAdmin","setGroupAdmin","map","member","userMeta","Object","assign","name","setName","renamePopupOpen","setRenamePopupOpen","renameInputValue","setRenameInputValue","onRename","isValidGroupName","renameGroup","addMember","deleteGroup","onDelete","removeMember","filter","Title","className","style","groupItem","onClick","active","Column","width","toggle","label","readOnly","checked","hasPermission","memberCount","length","loading","Content","memberListSegment","memberListHeader","memberListUserSearch","placeholder","onResultSelect","trigger","content","Input","value","autoComplete","onChange","e","target","onKeyPress","onEnterPress","primary","disabled","open","onOpen","onClose","on","position","negative","basic","compact","structured","Body","Row","Cell","usernameCellContainer","userAvatar","avatar","imageSize","user","email","textAlign","onSetGroupAdmin","onRemoveUser","GroupsPage","useEffect","enterNewPage","locale","groups","setGroups","groupsWithAdminPermission","setGroupsWithAdminPermission","createGroupName","setCreateGroupName","createGroupPopupOpen","setCreateGroupPopupOpen","useAsyncCallbackPending","createGroup","groupName","pendingCreateGroup","onCreateGroup","header","icon","as","includes","observer","defineRoute","request"],"mappings":"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","file":"static/js/172.de67e6fa.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Grid, Header, Button, Icon, Segment, Popup, Table, Accordion, Form, Checkbox } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\n\nimport style from \"./GroupsPage.module.less\";\n\nimport { appState } from \"@/appState\";\nimport api from \"@/api\";\nimport { useAsyncCallbackPending, useLocalizer } from \"@/utils/hooks\";\nimport { defineRoute, RouteError } from \"@/AppRouter\";\nimport toast from \"@/utils/toast\";\nimport UserLink from \"@/components/UserLink\";\nimport UserAvatar from \"@/components/UserAvatar\";\nimport UserSearch from \"@/components/UserSearch\";\nimport { onEnterPress } from \"@/utils/onEnterPress\";\nimport { makeToBeLocalizedText } from \"@/locales\";\nimport { isValidGroupName } from \"@/utils/validators\";\n\nasync function fetchData(): Promise<ApiTypes.GetGroupListResponseDto> {\n  if (!appState.currentUser) throw new RouteError(makeToBeLocalizedText(\"groups.not_logged_in\"));\n  const { requestError, response } = await api.group.getGroupList();\n  if (requestError) throw new RouteError(requestError, { showRefresh: true, showBack: true });\n  return response;\n}\n\ninterface GroupItemProps {\n  meta: ApiTypes.GroupMetaDto;\n  hasPermission: boolean;\n  onDelete: () => void;\n}\n\nlet GroupItem: React.FC<GroupItemProps> = props => {\n  const _ = useLocalizer(\"groups\");\n\n  const [memberListLoading, setMemberListLoading] = useState(false);\n  const [memberList, setMemberList] = useState<ApiTypes.GetGroupMemberListResponseItem[]>(null);\n  const [memberListOpened, setMemberListOpened] = useState(false);\n\n  async function onToggleMemberList() {\n    if (memberListLoading || pending) return;\n\n    // If already opened, close it\n    if (memberListOpened) {\n      setMemberListOpened(false);\n      return;\n    }\n    // Else load it\n\n    setMemberListLoading(true);\n\n    const { requestError, response } = await api.group.getGroupMemberList({\n      groupId: props.meta.id\n    });\n\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) toast.error(_(`.errors.${response.error}`));\n    else {\n      setMemberList(response.memberList);\n      setMemberListOpened(true);\n    }\n\n    setMemberListLoading(false);\n  }\n\n  const hasPrivilege = appState.currentUserHasPrivilege(\"ManageUserGroup\");\n\n  const [pending, setPending] = useState(false);\n  async function onSetGroupAdmin(userId: number, isGroupAdmin: boolean) {\n    if (pending) return;\n    setPending(true);\n\n    const { requestError, response } = await api.group.setGroupAdmin({\n      groupId: props.meta.id,\n      userId,\n      isGroupAdmin\n    });\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) toast.error(_(`.errors.${response.error}`));\n    else {\n      setMemberList(\n        memberList.map(member =>\n          member.userMeta.id === userId\n            ? Object.assign({}, member, {\n                isGroupAdmin\n              })\n            : member\n        )\n      );\n    }\n\n    setPending(false);\n  }\n\n  const [name, setName] = useState(props.meta.name);\n  const [renamePopupOpen, setRenamePopupOpen] = useState(false);\n  const [renameInputValue, setRenameInputValue] = useState(name);\n\n  async function onRename() {\n    if (renameInputValue === name) {\n      setRenamePopupOpen(false);\n      return;\n    }\n\n    if (!isValidGroupName(name)) return toast.error(_(\".invalid_group_name\"));\n\n    if (pending) return;\n    setPending(true);\n\n    const { requestError, response } = await api.group.renameGroup({\n      groupId: props.meta.id,\n      name: renameInputValue\n    });\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) toast.error(_(`.errors.${response.error}`));\n    else {\n      setName(renameInputValue);\n      setRenamePopupOpen(false);\n    }\n\n    setPending(false);\n  }\n\n  async function onAddUser(userMeta: ApiTypes.UserMetaDto) {\n    if (pending) return;\n    setPending(true);\n\n    const { requestError, response } = await api.group.addMember({\n      groupId: props.meta.id,\n      userId: userMeta.id\n    });\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) toast.error(_(`.errors.${response.error}`));\n    else {\n      setMemberList([\n        ...memberList,\n        {\n          userMeta,\n          isGroupAdmin: false\n        }\n      ]);\n    }\n\n    setPending(false);\n  }\n\n  async function onDelete() {\n    if (pending) return;\n    setPending(true);\n\n    const { requestError, response } = await api.group.deleteGroup({\n      groupId: props.meta.id\n    });\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) toast.error(_(`.errors.${response.error}`));\n    else {\n      props.onDelete();\n    }\n\n    setPending(false);\n  }\n\n  async function onRemoveUser(userId: number) {\n    if (pending) return;\n    setPending(true);\n\n    const { requestError, response } = await api.group.removeMember({\n      groupId: props.meta.id,\n      userId: userId\n    });\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) toast.error(_(`.errors.${response.error}`));\n    else {\n      setMemberList(memberList.filter(member => member.userMeta.id !== userId));\n    }\n\n    setPending(false);\n  }\n\n  return (\n    <>\n      <Accordion.Title className={style.groupItem} onClick={onToggleMemberList} active={memberListOpened}>\n        <Grid>\n          <Grid.Column width={5}>\n            <Icon name=\"users\" />\n            &nbsp;{name}\n          </Grid.Column>\n          <Grid.Column width={8}>\n            {!hasPrivilege && (\n              <Checkbox toggle label={_(\".group_admin\")} readOnly checked={props.hasPermission || hasPrivilege} />\n            )}\n          </Grid.Column>\n          <Grid.Column width={3} className={style.memberCount}>\n            <Icon name=\"user\" />\n            &nbsp;×&nbsp;&nbsp;{memberList ? memberList.length : props.meta.memberCount}\n            {memberListLoading ? <Icon name=\"spinner\" loading /> : <Icon name=\"dropdown\" />}\n          </Grid.Column>\n        </Grid>\n      </Accordion.Title>\n      <Accordion.Content active={memberListOpened}>\n        {memberList && (\n          <Segment className={style.memberListSegment}>\n            <div className={style.memberListHeader}>\n              {(hasPrivilege || props.hasPermission) && (\n                <UserSearch\n                  className={style.memberListUserSearch}\n                  placeholder={_(\".search_to_add_user\")}\n                  onResultSelect={onAddUser}\n                />\n              )}\n              {hasPrivilege && (\n                <>\n                  <Popup\n                    trigger={<Button className={style.renameGroup} content={_(\".rename_group\")} />}\n                    content={\n                      <Form>\n                        <Form.Input\n                          style={{ width: 230 }}\n                          placeholder={_(\".rename_group_new_name\")}\n                          value={renameInputValue}\n                          autoComplete=\"username\"\n                          readOnly={pending}\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setRenameInputValue(e.target.value)}\n                          onKeyPress={onEnterPress(() => onRename())}\n                        />\n                        <Button primary disabled={pending} onClick={onRename}>\n                          {_(\".confirm_rename_group\")}\n                        </Button>\n                      </Form>\n                    }\n                    open={renamePopupOpen}\n                    onOpen={() => setRenamePopupOpen(true)}\n                    onClose={() => setRenamePopupOpen(false)}\n                    on=\"click\"\n                    position=\"top right\"\n                  />\n                  <Popup\n                    trigger={<Button className={style.deleteGroup} negative content={_(\".delete_group\")} />}\n                    content={\n                      <Button negative disabled={pending} onClick={onDelete}>\n                        {_(\".confirm_delete_group\")}\n                      </Button>\n                    }\n                    on=\"click\"\n                    position=\"top center\"\n                  />\n                </>\n              )}\n            </div>\n            <Table basic=\"very\" compact structured className={style.memberList}>\n              {memberList.length > 0 && (\n                <Table.Body>\n                  {memberList.map(({ userMeta, isGroupAdmin }) => (\n                    <Table.Row key={userMeta.id}>\n                      <Table.Cell width={5}>\n                        <div className={style.usernameCellContainer}>\n                          <UserAvatar className={style.userAvatar} userAvatar={userMeta.avatar} imageSize={24} />\n                          <UserLink user={userMeta} />\n                        </div>\n                      </Table.Cell>\n                      <Table.Cell width={5}>{userMeta.email}</Table.Cell>\n                      <Table.Cell width={3} textAlign=\"right\">\n                        <Checkbox\n                          checked={isGroupAdmin}\n                          readOnly={!hasPrivilege}\n                          label={_(\".group_admin\")}\n                          toggle\n                          onChange={(e, { checked }) => onSetGroupAdmin(userMeta.id, checked)}\n                        />\n                      </Table.Cell>\n                      <Table.Cell width={3} textAlign=\"right\">\n                        <Popup\n                          disabled={pending || !(props.hasPermission && !isGroupAdmin)}\n                          trigger={\n                            <Icon\n                              name=\"delete\"\n                              disabled={!(props.hasPermission && !isGroupAdmin)}\n                              label={_(\".remove_member\")}\n                            />\n                          }\n                          content={\n                            <Button\n                              negative\n                              disabled={pending}\n                              content={_(\".confirm_remove_member\")}\n                              onClick={() => onRemoveUser(userMeta.id)}\n                            />\n                          }\n                          on=\"click\"\n                          position=\"top center\"\n                        />\n                      </Table.Cell>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              )}\n            </Table>\n          </Segment>\n        )}\n      </Accordion.Content>\n    </>\n  );\n};\n\ninterface GroupsPageProps {\n  response: ApiTypes.GetGroupListResponseDto;\n}\n\nlet GroupsPage: React.FC<GroupsPageProps> = props => {\n  const _ = useLocalizer(\"groups\");\n\n  useEffect(() => {\n    appState.enterNewPage(_(\".title\"), \"members\");\n  }, [appState.locale]);\n\n  const hasPrivilege = appState.currentUserHasPrivilege(\"ManageUserGroup\");\n\n  const [groups, setGroups] = useState(props.response.groups);\n  const [groupsWithAdminPermission, setGroupsWithAdminPermission] = useState(props.response.groupsWithAdminPermission);\n\n  const [createGroupName, setCreateGroupName] = useState(\"\");\n  const [createGroupPopupOpen, setCreateGroupPopupOpen] = useState(false);\n  const [pendingCreateGroup, onCreateGroup] = useAsyncCallbackPending(async () => {\n    if (!isValidGroupName(createGroupName)) return toast.error(_(\".invalid_group_name\"));\n\n    const { requestError, response } = await api.group.createGroup({\n      groupName: createGroupName\n    });\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) toast.error(_(`.errors.${response.error}`));\n    else {\n      setGroups([\n        ...groups,\n        {\n          id: response.groupId,\n          name: createGroupName,\n          memberCount: 0\n        }\n      ]);\n      setGroupsWithAdminPermission([...groupsWithAdminPermission, response.groupId]);\n\n      setCreateGroupName(\"\");\n      setCreateGroupPopupOpen(false);\n    }\n  });\n\n  return (\n    <>\n      <div className={style.header}>\n        <Header className=\"withIcon\" icon=\"users\" as=\"h1\" content={_(\".header\")} />\n        {hasPrivilege && (\n          <Popup\n            trigger={<Button className={style.createGroup} primary content={_(\".create_group\")} />}\n            content={\n              <Form>\n                <Form.Input\n                  style={{ width: 230 }}\n                  placeholder={_(\".create_group_name\")}\n                  value={createGroupName}\n                  autoComplete=\"username\"\n                  readOnly={pendingCreateGroup}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setCreateGroupName(e.target.value)}\n                  onKeyPress={onEnterPress(() => onCreateGroup())}\n                />\n                <Button primary loading={pendingCreateGroup} onClick={onCreateGroup}>\n                  {_(\".confirm_create_group\")}\n                </Button>\n              </Form>\n            }\n            open={createGroupPopupOpen}\n            onOpen={() => setCreateGroupPopupOpen(true)}\n            onClose={() => setCreateGroupPopupOpen(false)}\n            on=\"click\"\n            position=\"bottom right\"\n          />\n        )}\n      </div>\n      {groups.length > 0 ? (\n        <Accordion>\n          {groups.map(group => (\n            <GroupItem\n              key={group.id}\n              meta={group}\n              hasPermission={groupsWithAdminPermission.includes(group.id)}\n              onDelete={() => {\n                setGroups(groups.filter(({ id }) => id !== group.id));\n                setGroupsWithAdminPermission(groupsWithAdminPermission.filter(id => id != group.id));\n              }}\n            />\n          ))}\n        </Accordion>\n      ) : (\n        <Segment placeholder>\n          <Header icon>\n            <Icon name=\"file\" />\n            {_(\".no_groups\")}\n          </Header>\n        </Segment>\n      )}\n    </>\n  );\n};\n\nGroupsPage = observer(GroupsPage);\n\nexport default defineRoute(async request => {\n  const response = await fetchData();\n  return <GroupsPage response={response} />;\n});\n"],"sourceRoot":""}