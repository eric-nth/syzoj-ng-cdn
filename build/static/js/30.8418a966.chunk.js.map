{"version":3,"sources":["interfaces/CodeLanguage.ts"],"names":["CodeLanguage","CodeLanguageOptionType","codeLanguageExtensions","Cpp","C","Java","Kotlin","Pascal","Python","Rust","Swift","Go","Haskell","CSharp","FSharp","checkCodeFileExtension","language","filename","some","extension","toLowerCase","endsWith","compileAndRunOptions","name","type","Select","values","defaultValue","getDefaultCompileAndRunOptions","codeLanguage","Object","fromEntries","map","filterValidCompileAndRunOptions","inputOptions","assign","entries","filter","value","option","find","includes","getPreferredCodeLanguage","appState","userPreference","code","defaultLanguage","getPreferredCompileAndRunOptions","defaultCompileAndRunOptions"],"mappings":"2WAEYA,EAgBAC,E,iCAhBAD,K,UAAAA,E,MAAAA,E,YAAAA,E,gBAAAA,E,gBAAAA,E,gBAAAA,E,YAAAA,E,cAAAA,E,QAAAA,E,kBAAAA,E,gBAAAA,E,iBAAAA,M,cAgBAC,K,iBAAAA,M,KAYZ,IAAMC,GAAsD,mBACzDF,EAAaG,IAAM,CAAC,OAAQ,MAAO,SADsB,cAEzDH,EAAaI,EAAI,CAAC,OAFuC,cAGzDJ,EAAaK,KAAO,CAAC,UAHoC,cAIzDL,EAAaM,OAAS,CAAC,QAJkC,cAKzDN,EAAaO,OAAS,CAAC,SALkC,cAMzDP,EAAaQ,OAAS,CAAC,QANkC,cAOzDR,EAAaS,KAAO,CAAC,QAPoC,cAQzDT,EAAaU,MAAQ,CAAC,WARmC,cASzDV,EAAaW,GAAK,CAAC,QATsC,cAUzDX,EAAaY,QAAU,CAAC,QAViC,cAWzDZ,EAAaa,OAAS,CAAC,QAXkC,cAYzDb,EAAac,OAAS,CAAC,QAZkC,GAerD,SAASC,EAAuBC,EAAwBC,GAC7D,OAAOf,EAAuBc,GAAUE,MAAK,SAAAC,GAAS,OAAIF,EAASG,cAAcC,SAASF,MAGrF,IAAMG,GAAgE,mBAC1EtB,EAAaG,IAAM,CAClB,CACEoB,KAAM,WACNC,KAAMvB,EAAuBwB,OAC7BC,OAAQ,CAAC,MAAO,WAChBC,aAAc,OAEhB,CACEJ,KAAM,MACNC,KAAMvB,EAAuBwB,OAC7BC,OAAQ,CAAC,QAAS,QAAS,QAAS,QAAS,QAAS,UAAW,UAAW,UAAW,UAAW,WAClGC,aAAc,SAEhB,CACEJ,KAAM,IACNC,KAAMvB,EAAuBwB,OAC7BC,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,QAC7BC,aAAc,KAEhB,CACEJ,KAAM,IACNC,KAAMvB,EAAuBwB,OAC7BC,OAAQ,CAAC,KAAM,KAAM,OACrBC,aAAc,QAxByD,cA2B1E3B,EAAaI,EAAI,CAChB,CACEmB,KAAM,WACNC,KAAMvB,EAAuBwB,OAC7BC,OAAQ,CAAC,MAAO,SAChBC,aAAc,OAEhB,CACEJ,KAAM,MACNC,KAAMvB,EAAuBwB,OAC7BC,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,QAAS,QAAS,QAAS,SAChEC,aAAc,OAEhB,CACEJ,KAAM,IACNC,KAAMvB,EAAuBwB,OAC7BC,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,QAC7BC,aAAc,KAEhB,CACEJ,KAAM,IACNC,KAAMvB,EAAuBwB,OAC7BC,OAAQ,CAAC,KAAM,KAAM,OACrBC,aAAc,QAlDyD,cAqD1E3B,EAAaK,KAAO,IArDsD,cAsD1EL,EAAaM,OAAS,CACrB,CACEiB,KAAM,UACNC,KAAMvB,EAAuBwB,OAC7BC,OAAQ,CAAC,MAAO,MAAO,OACvBC,aAAc,OAEhB,CACEJ,KAAM,WACNC,KAAMvB,EAAuBwB,OAC7BC,OAAQ,CAAC,OACTC,aAAc,SAjEyD,cAoE1E3B,EAAaO,OAAS,CACrB,CACEgB,KAAM,WACNC,KAAMvB,EAAuBwB,OAC7BC,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,KAC7BC,aAAc,OAzEyD,cA4E1E3B,EAAaQ,OAAS,CACrB,CACEe,KAAM,UACNC,KAAMvB,EAAuBwB,OAC7BC,OAAQ,CAAC,MAAO,MAAO,OACvBC,aAAc,SAjFyD,cAoF1E3B,EAAaS,KAAO,CACnB,CACEc,KAAM,UACNC,KAAMvB,EAAuBwB,OAC7BC,OAAQ,CAAC,OAAQ,QACjBC,aAAc,QAEhB,CACEJ,KAAM,WACNC,KAAMvB,EAAuBwB,OAC7BC,OAAQ,CAAC,IAAK,IAAK,IAAK,KACxBC,aAAc,OA/FyD,cAkG1E3B,EAAaU,MAAQ,CACpB,CACEa,KAAM,UACNC,KAAMvB,EAAuBwB,OAC7BC,OAAQ,CAAC,MAAO,KAChBC,aAAc,KAEhB,CACEJ,KAAM,WACNC,KAAMvB,EAAuBwB,OAC7BC,OAAQ,CAAC,QAAS,IAAK,cACvBC,aAAc,OA7GyD,cAgH1E3B,EAAaW,GAAK,CACjB,CACEY,KAAM,UACNC,KAAMvB,EAAuBwB,OAC7BC,OAAQ,CAAC,OACTC,aAAc,SArHyD,cAwH1E3B,EAAaY,QAAU,CACtB,CACEW,KAAM,UACNC,KAAMvB,EAAuBwB,OAC7BC,OAAQ,CAAC,KAAM,QACfC,aAAc,UA7HyD,cAgI1E3B,EAAaa,OAAS,CACrB,CACEU,KAAM,UACNC,KAAMvB,EAAuBwB,OAC7BC,OAAQ,CAAC,MAAO,KAChBC,aAAc,OArIyD,cAwI1E3B,EAAac,OAAS,IAxIoD,GA2IhEc,EAAiC,SAACC,GAAD,OAC5CC,OAAOC,YAAYT,EAAqBO,GAAcG,KAAI,kBAA4B,CAA5B,EAAGT,KAAH,EAASI,mBAExDM,EAAkC,SAC7CJ,EACAK,GAF6C,OAI7CJ,OAAOK,OACL,GACAP,EAA+BC,GAC/BC,OAAOC,YACLD,OAAOM,QAAQF,GAAiB,IAAgCG,QAAO,YAAoB,IAAD,mBAAjBd,EAAiB,KAAXe,EAAW,KAClFC,EAASjB,EAAqBO,GAAcW,MAAK,SAAAD,GAAM,OAAIA,EAAOhB,OAASA,KACjF,IAAKgB,EAAQ,OAAO,EACpB,OAAQA,EAAOf,MACb,KAAKvB,EAAuBwB,OAC1B,OAAOc,EAAOb,OAAOe,SAASH,UAM7BI,EAA2B,wBACtC,UAACC,IAASC,eAAeC,YAAzB,aAAC,EAA8BC,kBAAoChB,OAAOJ,OAAO1B,GAAc,IAEpF+C,EAAmC,SAAClB,GAAD,eAC9CA,KAAY,UAAKc,IAASC,eAAeC,YAA7B,aAAK,EAA8BC,iBAC3Cb,EAAgCJ,EAAD,UAAec,IAASC,eAAeC,YAAvC,aAAe,EAA8BG,6BAC5EpB,EAA+BC","file":"static/js/30.8418a966.chunk.js","sourcesContent":["import { appState } from \"@/appState\";\n\nexport enum CodeLanguage {\n  Cpp = \"cpp\",\n  C = \"c\",\n  Java = \"java\",\n  Kotlin = \"kotlin\",\n  Pascal = \"pascal\",\n  Python = \"python\",\n  Rust = \"rust\",\n  Swift = \"swift\",\n  Go = \"go\",\n  Haskell = \"haskell\",\n  CSharp = \"csharp\",\n  FSharp = \"fsharp\"\n}\n\n// For UI\nexport enum CodeLanguageOptionType {\n  Select = \"Select\"\n  // Input = \"Input\"\n}\n\nexport interface CodeLanguageOption {\n  name: string;\n  type: CodeLanguageOptionType;\n  values: string[]; // string[] | undefined\n  defaultValue: string; // string | boolean\n}\n\nconst codeLanguageExtensions: Record<CodeLanguage, string[]> = {\n  [CodeLanguage.Cpp]: [\".cpp\", \".cc\", \".cxx\"],\n  [CodeLanguage.C]: [\".c\"],\n  [CodeLanguage.Java]: [\".java\"],\n  [CodeLanguage.Kotlin]: [\".kt\"],\n  [CodeLanguage.Pascal]: [\".pas\"],\n  [CodeLanguage.Python]: [\".py\"],\n  [CodeLanguage.Rust]: [\".rs\"],\n  [CodeLanguage.Swift]: [\".swift\"],\n  [CodeLanguage.Go]: [\".go\"],\n  [CodeLanguage.Haskell]: [\".hs\"],\n  [CodeLanguage.CSharp]: [\".cs\"],\n  [CodeLanguage.FSharp]: [\".fs\"]\n};\n\nexport function checkCodeFileExtension(language: CodeLanguage, filename: string): boolean {\n  return codeLanguageExtensions[language].some(extension => filename.toLowerCase().endsWith(extension));\n}\n\nexport const compileAndRunOptions: Record<CodeLanguage, CodeLanguageOption[]> = {\n  [CodeLanguage.Cpp]: [\n    {\n      name: \"compiler\",\n      type: CodeLanguageOptionType.Select,\n      values: [\"g++\", \"clang++\"],\n      defaultValue: \"g++\"\n    },\n    {\n      name: \"std\",\n      type: CodeLanguageOptionType.Select,\n      values: [\"c++03\", \"c++11\", \"c++14\", \"c++17\", \"c++20\", \"gnu++03\", \"gnu++11\", \"gnu++14\", \"gnu++17\", \"gnu++20\"],\n      defaultValue: \"c++11\"\n    },\n    {\n      name: \"O\",\n      type: CodeLanguageOptionType.Select,\n      values: [\"0\", \"1\", \"2\", \"3\", \"fast\"],\n      defaultValue: \"2\"\n    },\n    {\n      name: \"m\",\n      type: CodeLanguageOptionType.Select,\n      values: [\"64\", \"32\", \"x32\"],\n      defaultValue: \"64\"\n    }\n  ],\n  [CodeLanguage.C]: [\n    {\n      name: \"compiler\",\n      type: CodeLanguageOptionType.Select,\n      values: [\"gcc\", \"clang\"],\n      defaultValue: \"gcc\"\n    },\n    {\n      name: \"std\",\n      type: CodeLanguageOptionType.Select,\n      values: [\"c89\", \"c99\", \"c11\", \"c17\", \"gnu89\", \"gnu99\", \"gnu11\", \"gnu17\"],\n      defaultValue: \"c11\"\n    },\n    {\n      name: \"O\",\n      type: CodeLanguageOptionType.Select,\n      values: [\"0\", \"1\", \"2\", \"3\", \"fast\"],\n      defaultValue: \"2\"\n    },\n    {\n      name: \"m\",\n      type: CodeLanguageOptionType.Select,\n      values: [\"64\", \"32\", \"x32\"],\n      defaultValue: \"64\"\n    }\n  ],\n  [CodeLanguage.Java]: [],\n  [CodeLanguage.Kotlin]: [\n    {\n      name: \"version\",\n      type: CodeLanguageOptionType.Select,\n      values: [\"1.3\", \"1.4\", \"1.5\"],\n      defaultValue: \"1.4\"\n    },\n    {\n      name: \"platform\",\n      type: CodeLanguageOptionType.Select,\n      values: [\"jvm\"],\n      defaultValue: \"jvm\"\n    }\n  ],\n  [CodeLanguage.Pascal]: [\n    {\n      name: \"optimize\",\n      type: CodeLanguageOptionType.Select,\n      values: [\"-\", \"1\", \"2\", \"3\", \"4\"],\n      defaultValue: \"2\"\n    }\n  ],\n  [CodeLanguage.Python]: [\n    {\n      name: \"version\",\n      type: CodeLanguageOptionType.Select,\n      values: [\"2.7\", \"3.6\", \"3.9\"],\n      defaultValue: \"3.9\"\n    }\n  ],\n  [CodeLanguage.Rust]: [\n    {\n      name: \"version\",\n      type: CodeLanguageOptionType.Select,\n      values: [\"2015\", \"2018\"],\n      defaultValue: \"2018\"\n    },\n    {\n      name: \"optimize\",\n      type: CodeLanguageOptionType.Select,\n      values: [\"0\", \"1\", \"2\", \"3\"],\n      defaultValue: \"3\"\n    }\n  ],\n  [CodeLanguage.Swift]: [\n    {\n      name: \"version\",\n      type: CodeLanguageOptionType.Select,\n      values: [\"4.2\", \"5\"],\n      defaultValue: \"5\"\n    },\n    {\n      name: \"optimize\",\n      type: CodeLanguageOptionType.Select,\n      values: [\"Onone\", \"O\", \"Ounchecked\"],\n      defaultValue: \"O\"\n    }\n  ],\n  [CodeLanguage.Go]: [\n    {\n      name: \"version\",\n      type: CodeLanguageOptionType.Select,\n      values: [\"1.x\"],\n      defaultValue: \"1.x\"\n    }\n  ],\n  [CodeLanguage.Haskell]: [\n    {\n      name: \"version\",\n      type: CodeLanguageOptionType.Select,\n      values: [\"98\", \"2010\"],\n      defaultValue: \"2010\"\n    }\n  ],\n  [CodeLanguage.CSharp]: [\n    {\n      name: \"version\",\n      type: CodeLanguageOptionType.Select,\n      values: [\"7.3\", \"8\"],\n      defaultValue: \"8\"\n    }\n  ],\n  [CodeLanguage.FSharp]: []\n};\n\nexport const getDefaultCompileAndRunOptions = (codeLanguage: CodeLanguage): Record<string, unknown> =>\n  Object.fromEntries(compileAndRunOptions[codeLanguage].map(({ name, defaultValue }) => [name, defaultValue]));\n\nexport const filterValidCompileAndRunOptions = (\n  codeLanguage: CodeLanguage,\n  inputOptions: Record<string, unknown>\n): Record<string, unknown> =>\n  Object.assign(\n    {},\n    getDefaultCompileAndRunOptions(codeLanguage),\n    Object.fromEntries(\n      Object.entries(inputOptions || ({} as Record<string, unknown>)).filter(([name, value]) => {\n        const option = compileAndRunOptions[codeLanguage].find(option => option.name === name);\n        if (!option) return false;\n        switch (option.type) {\n          case CodeLanguageOptionType.Select:\n            return option.values.includes(value as string);\n        }\n      })\n    )\n  );\n\nexport const getPreferredCodeLanguage = () =>\n  (appState.userPreference.code?.defaultLanguage as CodeLanguage) || Object.values(CodeLanguage)[0];\n\nexport const getPreferredCompileAndRunOptions = (codeLanguage: CodeLanguage) =>\n  codeLanguage === appState.userPreference.code?.defaultLanguage\n    ? filterValidCompileAndRunOptions(codeLanguage, appState.userPreference.code?.defaultCompileAndRunOptions)\n    : getDefaultCompileAndRunOptions(codeLanguage);\n"],"sourceRoot":""}