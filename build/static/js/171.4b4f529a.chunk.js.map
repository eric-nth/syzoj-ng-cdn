{"version":3,"sources":["pages/user/edit/UserEditPage.tsx"],"names":["EditType","UserEditPage","props","_","useLocalizer","currentRoute","useCurrentRoute","navigation","useNavigationChecked","View","view","isEditingCurrentUser","useMemo","username","appState","currentUser","showPrivilegeTab","currentUserPrivileges","length","isAdmin","type","Privilege","className","style","container","menu","secondary","vertical","Item","active","Profile","as","Link","href","name","Preference","Security","Audit","Group","corner","adminWarning","content","warning","main","data","onChangeUsername","newUsername","splitted","url","pathname","split","navigate","join","getView","query","a","Object","values","includes","fetchData","response","uuid","observer","defineRoute","request","params","isValidUsername","RouteError","makeToBeLocalizedText"],"mappings":"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","file":"static/js/171.4b4f529a.chunk.js","sourcesContent":["import React, { useMemo } from \"react\";\nimport { Menu, Icon, Message } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\nimport { useCurrentRoute } from \"react-navi\";\nimport { v4 as uuid } from \"uuid\";\nimport { redirect } from \"navi\";\n\nimport style from \"./UserEdit.module.less\";\n\nimport { appState } from \"@/appState\";\nimport { useLocalizer, useNavigationChecked, Link } from \"@/utils/hooks\";\nimport { defineRoute, RouteError } from \"@/AppRouter\";\nimport api from \"@/api\";\nimport { isValidUsername } from \"@/utils/validators\";\nimport { makeToBeLocalizedText } from \"@/locales\";\n\nenum EditType {\n  Profile = \"profile\",\n  Preference = \"preference\",\n  Security = \"security\",\n  Privilege = \"privilege\",\n  Audit = \"audit\"\n}\n\ninterface UserEditPageProps {\n  username: string;\n  type: EditType;\n  data: unknown;\n  view: React.FC<any>;\n}\n\nlet UserEditPage: React.FC<UserEditPageProps> = props => {\n  const _ = useLocalizer(\"user_edit\");\n  const currentRoute = useCurrentRoute();\n  const navigation = useNavigationChecked();\n\n  const View = props.view;\n\n  const isEditingCurrentUser = useMemo(() => props.username === appState.currentUser?.username, []);\n\n  const showPrivilegeTab =\n    appState.currentUserPrivileges.length > 0 || appState.currentUser.isAdmin || props.type === EditType.Privilege;\n\n  // If username is changed, navigate to the new url\n  function onChangeUsername(newUsername: string) {\n    // /u/:username/edit/profile\n    // [\"\", \"u\", \":username\", \"edit\", \"profile\"]\n    // The :username is [2]\n    const splitted = currentRoute.url.pathname.split(\"/\");\n    splitted[2] = newUsername;\n    navigation.navigate(splitted.join(\"/\"));\n  }\n\n  return (\n    <>\n      <div className={style.container}>\n        <div className={style.menu}>\n          <Menu secondary vertical>\n            <Menu.Item active={props.type === EditType.Profile} as={Link} href=\"../profile\">\n              <Icon name=\"user\" />\n              {_(\".menu.profile\")}\n            </Menu.Item>\n            <Menu.Item active={props.type === EditType.Preference} as={Link} href=\"../preference\">\n              <Icon name=\"setting\" />\n              {_(\".menu.preference\")}\n            </Menu.Item>\n            <Menu.Item active={props.type === EditType.Security} as={Link} href=\"../security\">\n              <Icon name=\"lock\" />\n              {_(\".menu.security\")}\n            </Menu.Item>\n            {showPrivilegeTab && (\n              <Menu.Item active={props.type === EditType.Privilege} as={Link} href=\"../privilege\">\n                <Icon name=\"key\" />\n                {_(\".menu.privilege\")}\n              </Menu.Item>\n            )}\n            <Menu.Item active={props.type === EditType.Audit} as={Link} href=\"../audit\">\n              <Icon.Group>\n                <Icon name=\"list alternate\" />\n                <Icon corner name=\"check\" />\n              </Icon.Group>\n              {_(\".menu.audit\")}\n            </Menu.Item>\n          </Menu>\n          {!isEditingCurrentUser && <Message className={style.adminWarning} content={_(\".admin_warning\")} warning />}\n          <Link href=\"../..\">\n            <Icon name=\"arrow left\" />\n            {!isEditingCurrentUser ? _(\".back_to_profile_of_user\") : _(\".back_to_profile\")}\n          </Link>\n        </div>\n        <div className={style.main}>\n          <View {...props.data} onChangeUsername={onChangeUsername} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nUserEditPage = observer(UserEditPage);\n\nasync function getView(username: string, type: EditType, query: Record<string, string>) {\n  if (!Object.values(EditType).includes(type)) type = EditType.Profile;\n\n  const { fetchData, View } = await {\n    [EditType.Profile]: () => import(\"./ProfileView\"),\n    [EditType.Preference]: () => import(\"./PreferenceView\"),\n    [EditType.Security]: () => import(\"./SecurityView\"),\n    [EditType.Privilege]: () => import(\"./PrivilegeView\"),\n    [EditType.Audit]: () => import(\"./AuditView\")\n  }[type]();\n\n  const response = await fetchData(username, query);\n\n  return <UserEditPage key={uuid()} username={username} type={type} data={response} view={View} />;\n}\n\nexport default defineRoute(async request => {\n  const username = request.params.username;\n  if (!isValidUsername(username)) throw new RouteError(makeToBeLocalizedText(`user_edit.errors.NO_SUCH_USER`));\n  return await getView(request.params.username, request.params.type as EditType, request.query);\n});\n"],"sourceRoot":""}