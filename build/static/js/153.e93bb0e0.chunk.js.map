{"version":3,"sources":["pages/problem/judge-settings/types/InteractionProblemEditor.tsx"],"names":["metaEditorOptions","enableTimeMemoryLimit","enableFileIo","enableRunSamples","subtasksEditorOptions","enableInputFile","enableOutputFile","enableUserOutputFilename","parseInteractorConfig","interactor","testData","language","Object","values","CodeLanguage","includes","interface","sharedMemorySize","Number","isSafeInteger","compileAndRunOptions","filterValidCompileAndRunOptions","getPreferredCompileAndRunOptions","filename","find","file","checkCodeFileExtension","timeLimit","memoryLimit","InteractionProblemEditor","props","_","useLocalizer","judgeInfo","onUpdateInteractor","delta","onUpdateJudgeInfo","assign","normalizeSharedMemorySize","x","Math","round","options","className","style","wrapper","menuWrapper","size","content","secondary","pointing","map","interactorInterface","Item","active","onClick","color","checkerConfig","custom","type","label","placeholder","value","onChange","elementAfterLanguageSelect","Field","visibility","min","max","labelPosition","e","onUpdateLanguage","newLanguage","onUpdateCompileAndRunOptions","Group","width","labeledInput","icon","iconPosition","observer","judgeInfoProcessor","parseJudgeInfo","raw","MetaEditor","SubtasksEditor","ExtraSourceFilesEditor","normalizeJudgeInfo"],"mappings":"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","file":"static/js/153.e93bb0e0.chunk.js","sourcesContent":["import React from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport style from \"./InteractionProblemEditor.module.less\";\n\nimport { JudgeInfoProcessor, EditorComponentProps, Options } from \"../common/interface\";\n\nimport MetaEditor, { JudgeInfoWithMeta } from \"../common/MetaEditor\";\nimport SubtasksEditor, { JudgeInfoWithSubtasks } from \"../common/SubtasksEditor\";\nimport ExtraSourceFilesEditor, { JudgeInfoWithExtraSourceFiles } from \"../common/ExtraSourceFilesEditor\";\nimport {\n  CodeLanguage,\n  filterValidCompileAndRunOptions,\n  getPreferredCompileAndRunOptions,\n  checkCodeFileExtension\n} from \"@/interfaces/CodeLanguage\";\nimport { useLocalizer } from \"@/utils/hooks\";\nimport { Segment, Form, Header, Menu, Input } from \"semantic-ui-react\";\nimport TestDataFileSelector from \"../common/TestDataFileSelector\";\nimport CodeLanguageAndOptions from \"@/components/CodeLanguageAndOptions\";\n\nconst metaEditorOptions: Options<typeof MetaEditor> = {\n  enableTimeMemoryLimit: true,\n  enableFileIo: false,\n  enableRunSamples: true\n};\n\nconst subtasksEditorOptions: Options<typeof SubtasksEditor> = {\n  enableTimeMemoryLimit: true,\n  enableInputFile: true,\n  enableOutputFile: false,\n  enableUserOutputFilename: false\n};\n\ntype InteractorInterface = \"stdio\" | \"shm\";\n\ninterface InteractorConfig {\n  interface: InteractorInterface;\n  sharedMemorySize?: number;\n  language: CodeLanguage;\n  compileAndRunOptions: Record<string, unknown>;\n  filename: string;\n  timeLimit?: number;\n  memoryLimit?: number;\n}\n\ninterface JudgeInfoWithInteractor {\n  interactor: InteractorConfig;\n}\n\nexport type JudgeInfoInteraction = JudgeInfoWithMeta &\n  JudgeInfoWithSubtasks &\n  JudgeInfoWithInteractor &\n  JudgeInfoWithExtraSourceFiles;\ntype InteractionProblemEditorProps = EditorComponentProps<JudgeInfoInteraction>;\n\nfunction parseInteractorConfig(\n  interactor: Partial<InteractorConfig>,\n  testData: ApiTypes.ProblemFileDto[]\n): InteractorConfig {\n  const language = Object.values(CodeLanguage).includes(interactor.language)\n    ? interactor.language\n    : Object.values(CodeLanguage)[0];\n  return {\n    interface: [\"stdio\", \"shm\"].includes(interactor.interface) ? interactor.interface : \"stdio\",\n    sharedMemorySize:\n      interactor.interface !== \"shm\"\n        ? null\n        : Number.isSafeInteger(interactor.sharedMemorySize) &&\n          interactor.sharedMemorySize >= 4 &&\n          interactor.sharedMemorySize <= 128\n        ? interactor.sharedMemorySize\n        : 4,\n    language: language,\n    compileAndRunOptions:\n      language === interactor.language\n        ? filterValidCompileAndRunOptions(language, interactor.compileAndRunOptions)\n        : getPreferredCompileAndRunOptions(language),\n    filename:\n      interactor.filename && typeof interactor.filename === \"string\"\n        ? interactor.filename\n        : (testData.find(file => checkCodeFileExtension(language, file.filename)) || testData[0] || {}).filename || \"\",\n    timeLimit: Number.isSafeInteger(interactor.timeLimit) ? interactor.timeLimit : null,\n    memoryLimit: Number.isSafeInteger(interactor.memoryLimit) ? interactor.memoryLimit : null\n  };\n}\n\nlet InteractionProblemEditor: React.FC<InteractionProblemEditorProps> = props => {\n  const _ = useLocalizer(\"problem_judge_settings\");\n\n  const interactorInterfaces: InteractorInterface[] = [\"stdio\", \"shm\"];\n  const interactor = props.judgeInfo.interactor;\n  function onUpdateInteractor(delta: Partial<InteractorConfig>) {\n    props.onUpdateJudgeInfo(({ interactor }) => ({\n      interactor: Object.assign({}, interactor, delta)\n    }));\n  }\n\n  const normalizeSharedMemorySize = (x: number) => {\n    x = Math.round(x);\n    if (x < 4) return 4;\n    if (x > 128) return 128;\n    return x;\n  };\n\n  return (\n    <>\n      <MetaEditor {...props} options={metaEditorOptions} />\n      <Form className={style.wrapper}>\n        <div className={style.menuWrapper}>\n          <Header size=\"tiny\" content={_(\".interactor.interactor\")} />\n          <Menu secondary pointing>\n            {interactorInterfaces.map(interactorInterface => (\n              <Menu.Item\n                key={interactorInterface}\n                content={_(`.interactor.interfaces.${interactorInterface}`)}\n                active={interactor.interface === interactorInterface}\n                onClick={() =>\n                  interactor.interface !== interactorInterface &&\n                  onUpdateInteractor({\n                    interface: interactorInterface,\n                    sharedMemorySize: interactorInterface === \"shm\" ? 4 : null\n                  })\n                }\n              />\n            ))}\n          </Menu>\n        </div>\n        <Segment color=\"grey\" className={style.checkerConfig}>\n          <div className={style.custom}>\n            <TestDataFileSelector\n              type=\"FormSelect\"\n              label={_(\".interactor.filename\")}\n              placeholder={_(\".interactor.filename_no_file\")}\n              value={interactor.filename}\n              testData={props.testData}\n              onChange={value => onUpdateInteractor({ filename: value })}\n            />\n            <div className={style.compileAndRunOptions}>\n              <CodeLanguageAndOptions\n                elementAfterLanguageSelect={\n                  <Form.Field style={{ visibility: interactor.interface === \"shm\" ? \"\" : \"hidden\" }}>\n                    <label>{_(\".interactor.shm_size\")}</label>\n                    <Input\n                      value={normalizeSharedMemorySize(interactor.sharedMemorySize)}\n                      type=\"number\"\n                      min={4}\n                      max={128}\n                      label=\"MiB\"\n                      labelPosition=\"right\"\n                      onChange={(e, { value }) =>\n                        onUpdateInteractor({\n                          sharedMemorySize: normalizeSharedMemorySize(Number(value))\n                        })\n                      }\n                    />\n                  </Form.Field>\n                }\n                language={interactor.language}\n                compileAndRunOptions={interactor.compileAndRunOptions}\n                onUpdateLanguage={newLanguage => onUpdateInteractor({ language: newLanguage })}\n                onUpdateCompileAndRunOptions={compileAndRunOptions =>\n                  onUpdateInteractor({ compileAndRunOptions: compileAndRunOptions })\n                }\n              />\n            </div>\n            <Form.Group>\n              <Form.Field width={8}>\n                <label>{_(\".meta.time_limit\")}</label>\n                <Input\n                  className={style.labeledInput}\n                  placeholder={props.judgeInfo[\"timeLimit\"]}\n                  value={interactor.timeLimit == null ? \"\" : interactor.timeLimit}\n                  label=\"ms\"\n                  labelPosition=\"right\"\n                  icon=\"clock\"\n                  iconPosition=\"left\"\n                  onChange={(e, { value }) =>\n                    (value === \"\" || (Number.isSafeInteger(Number(value)) && Number(value) >= 0)) &&\n                    onUpdateInteractor({ timeLimit: value === \"\" ? null : Number(value) })\n                  }\n                />\n              </Form.Field>\n              <Form.Field width={8}>\n                <label>{_(\".meta.memory_limit\")}</label>\n                <Input\n                  className={style.labeledInput}\n                  placeholder={props.judgeInfo[\"memoryLimit\"]}\n                  value={interactor.memoryLimit == null ? \"\" : interactor.memoryLimit}\n                  label=\"MiB\"\n                  labelPosition=\"right\"\n                  icon=\"microchip\"\n                  iconPosition=\"left\"\n                  onChange={(e, { value }) =>\n                    (value === \"\" || (Number.isSafeInteger(Number(value)) && Number(value) >= 0)) &&\n                    onUpdateInteractor({ memoryLimit: value === \"\" ? null : Number(value) })\n                  }\n                />\n              </Form.Field>\n            </Form.Group>\n          </div>\n        </Segment>\n      </Form>\n      <SubtasksEditor {...props} options={subtasksEditorOptions} />\n      <ExtraSourceFilesEditor {...props} />\n    </>\n  );\n};\n\nInteractionProblemEditor = observer(InteractionProblemEditor);\n\nconst judgeInfoProcessor: JudgeInfoProcessor<JudgeInfoInteraction> = {\n  parseJudgeInfo(raw, testData) {\n    return Object.assign(\n      {},\n      MetaEditor.parseJudgeInfo(raw, testData, metaEditorOptions),\n      {\n        interactor: parseInteractorConfig(raw.interactor || {}, testData)\n      },\n      SubtasksEditor.parseJudgeInfo(raw, testData, subtasksEditorOptions),\n      ExtraSourceFilesEditor.parseJudgeInfo(raw, testData)\n    );\n  },\n  normalizeJudgeInfo(judgeInfo) {\n    MetaEditor.normalizeJudgeInfo(judgeInfo, metaEditorOptions);\n    if (!judgeInfo.interactor.sharedMemorySize) delete judgeInfo.interactor.sharedMemorySize;\n    if (judgeInfo.interactor.timeLimit == null) delete judgeInfo.interactor.timeLimit;\n    if (judgeInfo.interactor.memoryLimit == null) delete judgeInfo.interactor.memoryLimit;\n    SubtasksEditor.normalizeJudgeInfo(judgeInfo, subtasksEditorOptions);\n    ExtraSourceFilesEditor.normalizeJudgeInfo(judgeInfo);\n  }\n};\n\nexport default Object.assign(InteractionProblemEditor, judgeInfoProcessor);\n"],"sourceRoot":""}