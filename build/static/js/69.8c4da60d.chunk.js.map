{"version":3,"sources":["components/LocalizeTab.tsx"],"names":["LocalizeTab","props","_","useLocalizer","className","activeIndex","locales","indexOf","activeLocale","onTabChange","e","length","onSetActiveLocale","menu","pointing","panes","map","locale","i","menuItem","Item","name","localeMeta","flag","pane","key","style","localeTabPane","content","item","icon","active","disabled","Object","keys","toolbarMenuIconItem","Menu","filter","includes","text","onClick","onAddLocale","renderActiveOnly"],"mappings":"0PAkBaA,EAA0C,SAAAC,GACrD,IAAMC,EAAIC,YAAa,YAEvB,OACE,cAAC,IAAD,CACEC,UAAWH,EAAMG,UACjBC,YAAaJ,EAAMK,QAAQC,QAAQN,EAAMO,cACzCC,YAAa,SAACC,EAAD,OAAML,EAAN,EAAMA,YAAN,OACXA,IAAgBJ,EAAMK,QAAQK,QAAUV,EAAMW,kBAAkBX,EAAMK,QAAQD,KAEhFQ,KAAM,CAAEC,UAAU,GAClBC,MAAK,sBACAd,EAAMK,QAAQU,KAAI,SAACC,EAAQC,GAAT,MAAgB,CACnCC,SACE,eAAC,IAAKC,KAAN,WACE,cAAC,IAAD,CAAMC,KAAMC,IAAWL,GAAQM,OAC9BrB,EAAE,IAAD,OAAKe,MAFOA,GAKlBO,KAAM,CACJC,IAAKR,EACLb,UAAWsB,IAAMC,cACjBC,QAAS3B,EAAM4B,KAAKZ,EAAc,IAANC,EAAkC,IAAzBjB,EAAMK,QAAQK,cAXpD,CAcH,CACEQ,SACE,cAAC,IAAD,CAEEU,MAAI,EACJC,KAAK,MAELC,OAAO,GACPC,SAAU/B,EAAMK,QAAQK,SAAWsB,OAAOC,KAAKZ,KAAYX,OAC3DP,UAAS,eAAUsB,IAAMS,qBAP3B,SASE,cAAC,IAASC,KAAV,UACGH,OAAOC,KAAKZ,KACVe,QAAO,SAACpB,GAAD,OAAqBhB,EAAMK,QAAQgC,SAASrB,MACnDD,KAAI,SAACC,GAAD,OACH,cAAC,IAASG,KAAV,CAEEG,KAAMD,IAAWL,GAAQM,KACzBgB,KAAMrC,EAAE,IAAD,OAAKe,IACZuB,QAAS,kBAAMvC,EAAMwC,YAAYxB,KAH5BA,SAbT,OAsBRO,KAAM,CACJC,IAAK,MACLG,QAAS,SAIfc,kBAAkB","file":"static/js/69.8c4da60d.chunk.js","sourcesContent":["import React from \"react\";\n\nimport style from \"./LocalizeTab.module.less\";\n\nimport { Locale } from \"@/interfaces/Locale\";\nimport { Dropdown, Flag, Menu, Tab } from \"semantic-ui-react\";\nimport localeMeta from \"@/locales/meta\";\nimport { useLocalizer } from \"@/utils/hooks\";\n\ninterface LocalizeTabProps {\n  className?: string;\n  locales: Locale[];\n  activeLocale: Locale;\n  item: (locale: Locale, isDefault: boolean, isOnly: boolean) => React.ReactNode;\n  onAddLocale: (locale: Locale) => void;\n  onSetActiveLocale: (locale: Locale) => void;\n}\n\nexport const LocalizeTab: React.FC<LocalizeTabProps> = props => {\n  const _ = useLocalizer(\"language\");\n\n  return (\n    <Tab\n      className={props.className}\n      activeIndex={props.locales.indexOf(props.activeLocale)}\n      onTabChange={(e, { activeIndex }) =>\n        activeIndex !== props.locales.length && props.onSetActiveLocale(props.locales[activeIndex])\n      }\n      menu={{ pointing: true }}\n      panes={[\n        ...props.locales.map((locale, i) => ({\n          menuItem: (\n            <Menu.Item key={locale}>\n              <Flag name={localeMeta[locale].flag as any} />\n              {_(`.${locale}`)}\n            </Menu.Item>\n          ),\n          pane: {\n            key: locale,\n            className: style.localeTabPane,\n            content: props.item(locale, i === 0, props.locales.length === 1)\n          }\n        })),\n        {\n          menuItem: (\n            <Dropdown\n              key=\"add\"\n              item\n              icon=\"add\"\n              // Fix Semantic UI attempts to pass a active={false} to this menu item\n              active=\"\"\n              disabled={props.locales.length === Object.keys(localeMeta).length}\n              className={`icon ${style.toolbarMenuIconItem}`}\n            >\n              <Dropdown.Menu>\n                {Object.keys(localeMeta)\n                  .filter((locale: Locale) => !props.locales.includes(locale))\n                  .map((locale: Locale) => (\n                    <Dropdown.Item\n                      key={locale}\n                      flag={localeMeta[locale].flag}\n                      text={_(`.${locale}`)}\n                      onClick={() => props.onAddLocale(locale)}\n                    />\n                  ))}\n              </Dropdown.Menu>\n            </Dropdown>\n          ),\n          pane: {\n            key: \"add\",\n            content: null\n          }\n        }\n      ]}\n      renderActiveOnly={false}\n    />\n  );\n};\n"],"sourceRoot":""}