{"version":3,"sources":["components/LazyPermissionManager.tsx"],"names":["LazyPermissionManager","props","useState","PermissionManagerComponent","setPermissionManagerComponent","loading","setLoading","refFirstTimeMounted","useRef","refFirstOpenPromiseResolve","useEffect","current","open","a","promise","Promise","resolve","default","console","log","refOpen","then"],"mappings":"gLAoDeA,IA/CiD,SAAAC,GAAU,IAAD,EACHC,qBADG,mBAChEC,EADgE,KACpCC,EADoC,OAGzCF,oBAAS,GAHgC,mBAGhEG,EAHgE,KAGvDC,EAHuD,KAIjEC,EAAsBC,mBACtBC,EAA6BD,mBA0BnC,OAxBAE,qBAAU,WACR,IAAKH,EAAoBI,QAAS,CAChC,IAAMC,EAAI,uCAAG,4BAAAC,EAAA,0DACPR,EADO,wDAEXC,GAAW,GAELQ,EAAU,IAAIC,SAAiB,SAAAC,GAAO,OAAKP,EAA2BE,QAAUK,KAJ3E,cAOTZ,EAPS,SAO4B,yEAP5B,mBAO2Da,SAP3D,gEASTC,QAAQC,IAAR,MATS,eAYXb,GAAW,GAZA,UAcEQ,EAdF,mGAAH,qDAiBmB,oBAAlBb,EAAMmB,QAAwBnB,EAAMmB,QAAQR,GACjDX,EAAMmB,QAA2DT,QAAUC,KAElF,CAACX,EAAMmB,UAEHjB,EACL,cAACA,EAAD,2BACMF,GADN,IAEEmB,QAAS,SAAAR,GACsB,oBAAlBX,EAAMmB,QAAwBnB,EAAMmB,QAAQR,GACjDX,EAAMmB,QAA2DT,QAAUC,EAE5EL,EAAoBI,UACvBJ,EAAoBI,SAAU,EAC9BC,IAAOS,KAAKZ,EAA2BE,cAI3C","file":"static/js/34.90e0cc38.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport type { PermissionManagerProps } from \"./PermissionManager\";\n\nexport type { PermissionManagerProps } from \"./PermissionManager\";\n\nconst LazyPermissionManager: React.FC<PermissionManagerProps> = props => {\n  const [PermissionManagerComponent, setPermissionManagerComponent] = useState<React.FC<PermissionManagerProps>>();\n\n  const [loading, setLoading] = useState(false);\n  const refFirstTimeMounted = useRef<boolean>();\n  const refFirstOpenPromiseResolve = useRef<(success: boolean) => void>();\n\n  useEffect(() => {\n    if (!refFirstTimeMounted.current) {\n      const open = async () => {\n        if (loading) return;\n        setLoading(true);\n\n        const promise = new Promise<boolean>(resolve => (refFirstOpenPromiseResolve.current = resolve));\n\n        try {\n          setPermissionManagerComponent((await import(\"./PermissionManager\")).default);\n        } catch (e) {\n          console.log(e);\n        }\n\n        setLoading(false);\n\n        return await promise;\n      };\n\n      if (typeof props.refOpen === \"function\") props.refOpen(open);\n      else (props.refOpen as React.MutableRefObject<() => Promise<boolean>>).current = open;\n    }\n  }, [props.refOpen]);\n\n  return PermissionManagerComponent ? (\n    <PermissionManagerComponent\n      {...props}\n      refOpen={open => {\n        if (typeof props.refOpen === \"function\") props.refOpen(open);\n        else (props.refOpen as React.MutableRefObject<() => Promise<boolean>>).current = open;\n\n        if (!refFirstTimeMounted.current) {\n          refFirstTimeMounted.current = true;\n          open().then(refFirstOpenPromiseResolve.current);\n        }\n      }}\n    />\n  ) : null;\n};\n\nexport default LazyPermissionManager;\n"],"sourceRoot":""}