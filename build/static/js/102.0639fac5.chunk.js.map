{"version":3,"sources":["pages/problem/judge-settings/ProblemJudgeSettingsPage.tsx"],"names":["fetchData","idType","id","a","api","problem","getProblem","requestError","response","RouteError","showRefresh","showBack","error","makeToBeLocalizedText","ProblemJudgeSettingsPage","props","_","useLocalizer","navigation","useNavigationChecked","idString","getProblemIdString","meta","useEffect","appState","enterNewPage","locale","ProblemTypeEditorComponent","parseJudgeInfo","raw","testData","normalizeJudgeInfo","judgeInfo","cloned","lodashClonedeep","useState","setJudgeInfo","submittable","setSubmittable","uuid","editorUuid","setEditorUuid","pending","setPending","useConfirmNavigation","modified","setModified","onBackToProblem","navigate","getProblemUrl","use","updateProblemJudgeInfo","problemId","toast","judgeInfoError","success","yaml","dump","editRawEditorValue","setEditRawEditorValue","editRowEditorModified","setEditRowEditorModified","editRawEditorErrorMessage","setEditRawEditorErrorMessage","closeEditRawDialog","editRawDialog","close","useDialog","icon","content","className","style","dialogMessage","header","trimEnd","codeEditor","value","language","onChange","trigger","onClick","negative","disabled","position","on","positive","parsed","load","e","message","type","newType","setNewType","switchProblemPopupOpen","setSwitchProblemPopupOpen","changeProblemType","refresh","element","Row","Column","width","leftContainer","as","backButton","submitButton","primary","loading","permissionOfCurrentUser","includes","yamlCodeBox","segmentClassName","yamlSegment","code","buttonEditRaw","open","problemTypeForm","Group","inline","Field","field","label","dropdown","selection","options","Object","values","ProblemType","map","key","text","switchButton","onOpen","onClose","Checkbox","toggle","checked","onUpdateJudgeInfo","deltaOrReducer","isNotByUser","assign","getProblemTypeEditorComponent","Traditional","Interaction","SubmitAnswer","default","observer","byId","defineRoute","request","parseInt","params","byDisplayId","displayId"],"mappings":"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","file":"static/js/102.0639fac5.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Dropdown, Grid, Header, Popup, Button, Form, Message } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\nimport yaml from \"js-yaml\";\nimport { v4 as uuid } from \"uuid\";\nimport lodashClonedeep from \"lodash.clonedeep\";\n\nimport style from \"./ProblemJudgeSettingsPage.module.less\";\n\nimport api from \"@/api\";\nimport { appState } from \"@/appState\";\nimport { useLocalizer, useDialog, useConfirmNavigation, useNavigationChecked } from \"@/utils/hooks\";\nimport toast from \"@/utils/toast\";\nimport CodeEditor from \"@/components/LazyCodeEditor\";\nimport { HighlightedCodeBox } from \"@/components/CodeBox\";\nimport { defineRoute, RouteError } from \"@/AppRouter\";\nimport { ProblemType } from \"@/interfaces/ProblemType\";\nimport { ProblemTypeEditorComponent } from \"./common/interface\";\nimport { getProblemIdString, getProblemUrl } from \"../utils\";\nimport { makeToBeLocalizedText } from \"@/locales\";\n\nasync function fetchData(idType: \"id\" | \"displayId\", id: number) {\n  const { requestError, response } = await api.problem.getProblem({\n    [idType]: id,\n    judgeInfo: true,\n    testData: true,\n    permissionOfCurrentUser: true\n  });\n\n  if (requestError) throw new RouteError(requestError, { showRefresh: true, showBack: true });\n  else if (response.error)\n    throw new RouteError(makeToBeLocalizedText(`problem_judge_settings.error.${response.error}`));\n\n  return response;\n}\n\ninterface ProblemJudgeSettingsPageProps {\n  problem: ApiTypes.GetProblemResponseDto;\n  idType?: \"id\" | \"displayId\";\n  ProblemTypeEditorComponent: ProblemTypeEditorComponent;\n}\n\nlet ProblemJudgeSettingsPage: React.FC<ProblemJudgeSettingsPageProps> = props => {\n  const _ = useLocalizer(\"problem_judge_settings\");\n  const navigation = useNavigationChecked();\n\n  const idString = getProblemIdString(props.problem.meta);\n\n  useEffect(() => {\n    appState.enterNewPage(`${_(\".title\")} ${idString}`, \"problem_set\", false);\n  }, [appState.locale, props.problem]);\n\n  const ProblemTypeEditorComponent = props.ProblemTypeEditorComponent;\n\n  function parseJudgeInfo(raw: any) {\n    return ProblemTypeEditorComponent.parseJudgeInfo(raw, props.problem.testData);\n  }\n\n  function normalizeJudgeInfo(judgeInfo: unknown) {\n    const cloned = lodashClonedeep(judgeInfo);\n    ProblemTypeEditorComponent.normalizeJudgeInfo(cloned);\n    return cloned;\n  }\n\n  const [judgeInfo, setJudgeInfo] = useState(parseJudgeInfo(props.problem.judgeInfo));\n  const [submittable, setSubmittable] = useState(props.problem.submittable);\n\n  // Unmount and remount the editor after each time the judge info is edited raw by source\n  const [editorUuid, setEditorUuid] = useState(uuid());\n\n  const [pending, setPending] = useState(false);\n  const [modified, setModified] = useConfirmNavigation();\n\n  function onUpdate(deltaOrReducer: unknown | ((judgeInfo: unknown) => Partial<unknown>), isNotByUser?: boolean) {\n    if (pending) return;\n    if (!isNotByUser) setModified(true);\n\n    setJudgeInfo(judgeInfo =>\n      Object.assign({}, judgeInfo, typeof deltaOrReducer === \"function\" ? deltaOrReducer(judgeInfo) : deltaOrReducer)\n    );\n  }\n\n  function onBackToProblem() {\n    setModified(false);\n    navigation.navigate(getProblemUrl(props.problem.meta, { use: props.idType }));\n  }\n\n  async function onSubmit() {\n    if (pending) return;\n\n    setPending(true);\n\n    const { requestError, response } = await api.problem.updateProblemJudgeInfo({\n      problemId: props.problem.meta.id,\n      judgeInfo: normalizeJudgeInfo(judgeInfo),\n      submittable\n    });\n\n    if (requestError) {\n      toast.error(requestError(_));\n    } else if (response.error) {\n      if (response.error === \"INVALID_JUDGE_INFO\") {\n        toast.error(_(`.error.INVALID_JUDGE_INFO.${response.judgeInfoError[0]}`, response.judgeInfoError));\n      } else {\n        toast.error(_(`.error.${response.error}`));\n      }\n    } else {\n      toast.success(_(\".submit_success\"));\n      setModified(false);\n    }\n\n    setPending(false);\n  }\n\n  const [editRawEditorValue, setEditRawEditorValue] = useState(yaml.dump(normalizeJudgeInfo(judgeInfo)));\n  const [editRowEditorModified, setEditRowEditorModified] = useConfirmNavigation();\n  const [editRawEditorErrorMessage, setEditRawEditorErrorMessage] = useState(\"\");\n  function closeEditRawDialog() {\n    setEditRowEditorModified(false);\n    editRawDialog.close();\n  }\n  const editRawDialog = useDialog(\n    {},\n    <Header icon=\"code\" content={_(\".edit_raw.edit_raw\")} />,\n    <>\n      {editRawEditorErrorMessage && (\n        <Message\n          className={style.dialogMessage}\n          error\n          header={_(\".edit_raw.parse_error\")}\n          content={\n            <p>\n              <code>{editRawEditorErrorMessage.trimEnd()}</code>\n            </p>\n          }\n        />\n      )}\n      <CodeEditor\n        className={style.codeEditor}\n        value={editRawEditorValue}\n        language=\"yaml\"\n        onChange={value => {\n          setEditRowEditorModified(true);\n          setEditRawEditorValue(value);\n        }}\n      />\n    </>,\n    <>\n      <Popup\n        trigger={\n          <Button content={_(\".edit_raw.cancel\")} onClick={() => !editRowEditorModified && closeEditRawDialog()} />\n        }\n        content={<Button negative content={_(\".edit_raw.confirm_cancel\")} onClick={() => closeEditRawDialog()} />}\n        disabled={!editRowEditorModified}\n        position=\"top center\"\n        on=\"click\"\n      />\n      <Button\n        positive\n        content={_(\".edit_raw.ok\")}\n        onClick={() => {\n          try {\n            const parsed = parseJudgeInfo(yaml.load(editRawEditorValue));\n            setJudgeInfo(parsed);\n            setModified(true);\n            setEditorUuid(uuid());\n            closeEditRawDialog();\n          } catch (e) {\n            setEditRawEditorErrorMessage(e.message);\n          }\n        }}\n      />\n    </>\n  );\n\n  const [newType, setNewType] = useState(props.problem.meta.type as ProblemType);\n  const [switchProblemPopupOpen, setSwitchProblemPopupOpen] = useState(false);\n  async function onChangeType() {\n    if (pending) return;\n    setPending(true);\n\n    if (newType === props.problem.meta.type) return;\n\n    const { requestError, response } = await api.problem.changeProblemType({\n      problemId: props.problem.meta.id,\n      type: newType\n    });\n    setSwitchProblemPopupOpen(false);\n    if (requestError) {\n      toast.error(requestError(_));\n    } else if (response.error) {\n      toast.error(_(`.error.${response.error}`));\n    } else {\n      toast.success(_(\".switch_type_success\"));\n      navigation.refresh();\n    }\n\n    setPending(false);\n  }\n\n  return (\n    <>\n      {editRawDialog.element}\n      <Grid>\n        <Grid.Row>\n          <Grid.Column width={7}>\n            <div className={style.leftContainer}>\n              <div className={style.header}>\n                <Header className=\"withIcon\" icon=\"setting\" as=\"h1\" content={_(\".header\") + \" \" + idString} />\n                <Popup\n                  trigger={\n                    <Button\n                      className={style.backButton}\n                      disabled={pending}\n                      content={_(\".back_to_problem\")}\n                      onClick={() => !modified && onBackToProblem()}\n                    />\n                  }\n                  // It's safe to redirect if not modified, don't confirm\n                  disabled={!modified}\n                  content={<Button negative content={_(\".confirm_back_to_problem\")} onClick={onBackToProblem} />}\n                  on=\"click\"\n                  position=\"bottom center\"\n                />\n                <Button\n                  className={style.submitButton}\n                  primary\n                  loading={pending}\n                  disabled={!props.problem.permissionOfCurrentUser.includes(\"Modify\")}\n                  content={\n                    props.problem.permissionOfCurrentUser.includes(\"Modify\") ? _(\".submit\") : _(\".no_submit_permission\")\n                  }\n                  onClick={onSubmit}\n                />\n              </div>\n              <HighlightedCodeBox\n                className={style.yamlCodeBox}\n                segmentClassName={style.yamlSegment}\n                code={yaml.dump(normalizeJudgeInfo(judgeInfo))}\n                language=\"yaml\"\n              >\n                <Button\n                  className=\"icon labeled\"\n                  id={style.buttonEditRaw}\n                  icon=\"code\"\n                  content={_(\".edit_raw.edit_raw\")}\n                  onClick={() => {\n                    setEditRawEditorErrorMessage(\"\");\n                    setEditRawEditorValue(yaml.dump(normalizeJudgeInfo(judgeInfo)));\n                    editRawDialog.open();\n                  }}\n                />\n              </HighlightedCodeBox>\n            </div>\n          </Grid.Column>\n          <Grid.Column width={9}>\n            <Form className={style.problemTypeForm}>\n              <Form.Group inline>\n                <Form.Field inline width={16} className={style.field}>\n                  <label className={style.label}>{_(\".problem_type\")}</label>\n                  <Dropdown\n                    className={style.dropdown}\n                    selection\n                    value={newType}\n                    options={Object.values(ProblemType).map(type => ({\n                      key: type,\n                      value: type,\n                      text: _(`problem.type.${type}`)\n                    }))}\n                    onChange={(e, { value }) => setNewType(value as ProblemType)}\n                  />\n                  <Popup\n                    trigger={\n                      <Button\n                        disabled={pending || newType === props.problem.meta.type}\n                        className={style.switchButton}\n                        content={_(\".switch_type\")}\n                      />\n                    }\n                    content={<Button negative content={_(\".confirm_switch_type\")} onClick={onChangeType} />}\n                    open={switchProblemPopupOpen}\n                    onOpen={() => setSwitchProblemPopupOpen(true)}\n                    onClose={() => setSwitchProblemPopupOpen(false)}\n                    position=\"top center\"\n                    on=\"click\"\n                  />\n                </Form.Field>\n                <Form.Checkbox\n                  inline\n                  toggle\n                  className={style.submittable}\n                  label={_(\".submittable\")}\n                  checked={submittable}\n                  onChange={(e, { checked }) => {\n                    setModified(true);\n                    setSubmittable(checked);\n                  }}\n                />\n              </Form.Group>\n            </Form>\n            <ProblemTypeEditorComponent\n              key={editorUuid}\n              pending={pending}\n              judgeInfo={judgeInfo}\n              testData={props.problem.testData}\n              onUpdateJudgeInfo={onUpdate}\n            />\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </>\n  );\n};\n\nProblemJudgeSettingsPage = observer(ProblemJudgeSettingsPage);\n\nasync function getProblemTypeEditorComponent(type: ProblemType): Promise<ProblemTypeEditorComponent> {\n  return (\n    await (() => {\n      switch (type) {\n        case ProblemType.Traditional:\n          return import(\"./types/TraditionalProblemEditor\");\n        case ProblemType.Interaction:\n          return import(\"./types/InteractionProblemEditor\");\n        case ProblemType.SubmitAnswer:\n          return import(\"./types/SubmitAnswerProblemEditor\");\n      }\n    })()\n  ).default;\n}\n\nexport default {\n  byId: defineRoute(async request => {\n    const id = parseInt(request.params[\"id\"]);\n    const problem = await fetchData(\"id\", id);\n\n    return (\n      <ProblemJudgeSettingsPage\n        key={uuid()}\n        idType=\"id\"\n        problem={problem}\n        ProblemTypeEditorComponent={await getProblemTypeEditorComponent(problem.meta.type as ProblemType)}\n      />\n    );\n  }),\n  byDisplayId: defineRoute(async request => {\n    const displayId = parseInt(request.params[\"displayId\"]);\n    const problem = await fetchData(\"displayId\", displayId);\n\n    return (\n      <ProblemJudgeSettingsPage\n        key={uuid()}\n        idType=\"displayId\"\n        problem={problem}\n        ProblemTypeEditorComponent={await getProblemTypeEditorComponent(problem.meta.type as ProblemType)}\n      />\n    );\n  })\n};\n"],"sourceRoot":""}