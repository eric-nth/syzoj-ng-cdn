{"version":3,"sources":["pages/problem/judge-settings/common/CheckerEditor.tsx"],"names":["CHECKER_TYPES","CUSTOM_CHECKER_INTERFACES","parseCheckerConfig","checker","testData","includes","type","caseSensitive","precision","Number","isSafeInteger","language","Object","values","CodeLanguage","interface","compileAndRunOptions","filterValidCompileAndRunOptions","getPreferredCompileAndRunOptions","filename","find","file","checkCodeFileExtension","timeLimit","memoryLimit","CheckerEditor","props","_","useLocalizer","judgeInfo","onUpdateChecker","delta","onUpdateJudgeInfo","assign","checkerConfigBackup","useRef","Map","current","className","style","wrapper","menuWrapper","size","content","secondary","pointing","map","Item","active","onClick","pending","set","get","onChangeCheckerType","color","checkerConfig","Field","width","value","onChange","e","description","Checkbox","toggle","label","checked","custom","placeholder","Select","options","iface","key","text","onUpdateLanguage","newLanguage","onUpdateCompileAndRunOptions","Group","labeledInput","labelPosition","icon","iconPosition","observer","judgeInfoProcessor","parseJudgeInfo","raw","normalizeJudgeInfo"],"mappings":"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","file":"static/js/103.df1d8863.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport { Header, Menu, Form, Input, Segment } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\n\nimport style from \"./CheckerEditor.module.less\";\n\nimport { useLocalizer } from \"@/utils/hooks\";\nimport {\n  CodeLanguage,\n  filterValidCompileAndRunOptions,\n  getPreferredCompileAndRunOptions,\n  checkCodeFileExtension,\n  compileAndRunOptions,\n  CodeLanguageOptionType\n} from \"@/interfaces/CodeLanguage\";\nimport TestDataFileSelector from \"./TestDataFileSelector\";\nimport { JudgeInfoProcessor, EditorComponentProps } from \"./interface\";\nimport CodeLanguageAndOptions from \"@/components/CodeLanguageAndOptions\";\n\ninterface CheckerTypeIntegers {\n  type: \"integers\";\n}\n\ninterface CheckerTypeFloats {\n  type: \"floats\";\n  precision: number;\n}\n\ninterface CheckerTypeLines {\n  type: \"lines\";\n  caseSensitive: boolean;\n}\n\ninterface CheckerTypeBinary {\n  type: \"binary\";\n}\n\ninterface CheckerTypeCustom {\n  type: \"custom\";\n  interface: string;\n  language: CodeLanguage;\n  compileAndRunOptions: Record<string, unknown>;\n  filename: string;\n  timeLimit?: number;\n  memoryLimit?: number;\n}\n\ntype CheckerConfig = CheckerTypeIntegers | CheckerTypeFloats | CheckerTypeLines | CheckerTypeBinary | CheckerTypeCustom;\ntype CheckerType = CheckerConfig[\"type\"];\n\nconst CHECKER_TYPES: CheckerType[] = [\"integers\", \"floats\", \"lines\", \"binary\", \"custom\"];\nconst CUSTOM_CHECKER_INTERFACES = [\"testlib\", \"legacy\", \"lemon\", \"hustoj\", \"qduoj\", \"domjudge\"];\n\nfunction parseCheckerConfig(checker: Partial<CheckerConfig>, testData: ApiTypes.ProblemFileDto[]): CheckerConfig {\n  if (!checker || !CHECKER_TYPES.includes(checker.type))\n    return {\n      // default\n      type: \"lines\",\n      caseSensitive: false\n    };\n\n  switch (checker.type) {\n    case \"integers\":\n      return { type: \"integers\" };\n    case \"floats\":\n      return {\n        type: \"floats\",\n        precision: Number.isSafeInteger(checker.precision) && checker.precision > 0 ? checker.precision : 4\n      };\n    case \"lines\":\n      return { type: \"lines\", caseSensitive: !!checker.caseSensitive };\n    case \"binary\":\n      return { type: \"binary\" };\n    case \"custom\":\n      const language = Object.values(CodeLanguage).includes(checker.language)\n        ? checker.language\n        : Object.values(CodeLanguage)[0];\n      return {\n        type: \"custom\",\n        interface: CUSTOM_CHECKER_INTERFACES.includes(checker.interface)\n          ? checker.interface\n          : CUSTOM_CHECKER_INTERFACES[0],\n        language: language,\n        compileAndRunOptions:\n          language === checker.language\n            ? filterValidCompileAndRunOptions(language, checker.compileAndRunOptions)\n            : getPreferredCompileAndRunOptions(language),\n        filename:\n          checker.filename && typeof checker.filename === \"string\"\n            ? checker.filename\n            : (testData.find(file => checkCodeFileExtension(language, file.filename)) || testData[0] || {}).filename ||\n              \"\",\n        timeLimit: Number.isSafeInteger(checker.timeLimit) ? checker.timeLimit : null,\n        memoryLimit: Number.isSafeInteger(checker.memoryLimit) ? checker.memoryLimit : null\n      };\n  }\n}\n\nexport interface JudgeInfoWithChecker {\n  checker?: CheckerConfig;\n}\n\ntype CheckerEditorProps = EditorComponentProps<JudgeInfoWithChecker>;\n\nlet CheckerEditor: React.FC<CheckerEditorProps> = props => {\n  const _ = useLocalizer(\"problem_judge_settings\");\n\n  const checker = props.judgeInfo.checker;\n\n  function onUpdateChecker(delta: Partial<CheckerConfig>) {\n    props.onUpdateJudgeInfo(({ checker }) => ({\n      checker: Object.assign({}, checker, delta)\n    }));\n  }\n\n  const checkerConfigBackup = useRef<Map<CheckerType, CheckerConfig>>(new Map()).current;\n  function onChangeCheckerType(type: CheckerType) {\n    if (props.pending) return;\n\n    if (type === checker.type) return;\n    checkerConfigBackup.set(checker.type, checker);\n\n    props.onUpdateJudgeInfo({ checker: checkerConfigBackup.get(type) || parseCheckerConfig({ type }, props.testData) });\n  }\n\n  return (\n    <Form className={style.wrapper}>\n      <div className={style.menuWrapper}>\n        <Header size=\"tiny\" content={_(\".checker.checker\")} />\n        <Menu secondary pointing>\n          {CHECKER_TYPES.map(type => (\n            <Menu.Item\n              key={type}\n              content={_(`.checker.types.${type}`)}\n              active={checker.type === type}\n              onClick={() => checker.type !== type && onChangeCheckerType(type)}\n            />\n          ))}\n        </Menu>\n      </div>\n      <Segment color=\"grey\" className={style.checkerConfig}>\n        {(() => {\n          switch (checker.type) {\n            case \"integers\":\n              return null;\n            case \"floats\":\n              return (\n                <>\n                  <Form.Field width={8}>\n                    <label>{_(`.checker.config.floats.precision`)}</label>\n                    <Input\n                      value={checker.precision}\n                      onChange={(e, { value }) =>\n                        (value === \"\" || (Number.isSafeInteger(Number(value)) && Number(value) > 0)) &&\n                        onUpdateChecker({ precision: Number(value) })\n                      }\n                    />\n                  </Form.Field>\n                  <div className={style.description}>\n                    {_(\".checker.config.floats.description\", {\n                      value: `1e-${checker.precision}`\n                    })}\n                  </div>\n                </>\n              );\n            case \"lines\":\n              return (\n                <>\n                  <Form.Checkbox\n                    toggle\n                    label={_(`.checker.config.lines.case_sensitive`)}\n                    checked={checker.caseSensitive}\n                    onChange={(e, { checked }) => onUpdateChecker({ caseSensitive: checked })}\n                  />\n                  <div className={style.description}>{_(\".checker.config.lines.description\")}</div>\n                </>\n              );\n            case \"binary\":\n              return null;\n            case \"custom\":\n              return (\n                <div className={style.custom}>\n                  <TestDataFileSelector\n                    type=\"FormSelect\"\n                    label={_(\".checker.config.custom.filename\")}\n                    placeholder={_(\".checker.config.custom.filename_no_file\")}\n                    value={checker.filename}\n                    testData={props.testData}\n                    onChange={value => onUpdateChecker({ filename: value })}\n                  />\n                  <div className={style.compileAndRunOptions}>\n                    <Form.Select\n                      label={_(\".checker.config.custom.interface\")}\n                      value={checker.interface}\n                      options={CUSTOM_CHECKER_INTERFACES.map(iface => ({\n                        key: iface,\n                        value: iface,\n                        text: _(`.checker.config.custom.interfaces.${iface}`)\n                      }))}\n                      onChange={(e, { value }) => onUpdateChecker({ interface: value as any })}\n                    />\n                    <CodeLanguageAndOptions\n                      language={checker.language}\n                      compileAndRunOptions={checker.compileAndRunOptions}\n                      onUpdateLanguage={newLanguage => onUpdateChecker({ language: newLanguage })}\n                      onUpdateCompileAndRunOptions={compileAndRunOptions =>\n                        onUpdateChecker({ compileAndRunOptions: compileAndRunOptions })\n                      }\n                    />\n                  </div>\n                  <Form.Group>\n                    <Form.Field width={8}>\n                      <label>{_(\".meta.time_limit\")}</label>\n                      <Input\n                        className={style.labeledInput}\n                        placeholder={props.judgeInfo[\"timeLimit\"] ?? _(\".meta.time_limit\")}\n                        value={checker.timeLimit == null ? \"\" : checker.timeLimit}\n                        label=\"ms\"\n                        labelPosition=\"right\"\n                        icon=\"clock\"\n                        iconPosition=\"left\"\n                        onChange={(e, { value }) =>\n                          (value === \"\" || (Number.isSafeInteger(Number(value)) && Number(value) >= 0)) &&\n                          onUpdateChecker({ timeLimit: value === \"\" ? null : Number(value) })\n                        }\n                      />\n                    </Form.Field>\n                    <Form.Field width={8}>\n                      <label>{_(\".meta.memory_limit\")}</label>\n                      <Input\n                        className={style.labeledInput}\n                        placeholder={props.judgeInfo[\"memoryLimit\"] ?? _(\".meta.memory_limit\")}\n                        value={checker.memoryLimit == null ? \"\" : checker.memoryLimit}\n                        label=\"MiB\"\n                        labelPosition=\"right\"\n                        icon=\"microchip\"\n                        iconPosition=\"left\"\n                        onChange={(e, { value }) =>\n                          (value === \"\" || (Number.isSafeInteger(Number(value)) && Number(value) >= 0)) &&\n                          onUpdateChecker({ memoryLimit: value === \"\" ? null : Number(value) })\n                        }\n                      />\n                    </Form.Field>\n                  </Form.Group>\n                </div>\n              );\n          }\n        })()}\n      </Segment>\n    </Form>\n  );\n};\n\nCheckerEditor = observer(CheckerEditor);\n\nconst judgeInfoProcessor: JudgeInfoProcessor<JudgeInfoWithChecker> = {\n  parseJudgeInfo(raw, testData) {\n    return {\n      checker: parseCheckerConfig(raw.checker, testData)\n    };\n  },\n  normalizeJudgeInfo(judgeInfo) {\n    if (judgeInfo.checker.type === \"custom\") {\n      if (judgeInfo.checker.timeLimit == null) delete judgeInfo.checker.timeLimit;\n      if (judgeInfo.checker.memoryLimit == null) delete judgeInfo.checker.memoryLimit;\n    }\n  }\n};\n\nexport default Object.assign(CheckerEditor, judgeInfoProcessor);\n"],"sourceRoot":""}