{"version":3,"sources":["pages/submission/statistics/SubmissionStatisticsPage.tsx"],"names":["SubmissionStatisticsType","SUBMISSIONS_PER_PAGE","appState","serverPreference","pagination","submissionStatistics","getType","type","Object","values","find","s","toLowerCase","Fastest","fetchData","id","idType","page","a","api","submission","querySubmissionStatistics","locale","requestError","response","RouteError","showRefresh","showBack","error","makeToBeLocalizedText","SubmissionStatisticsPage","props","_","useLocalizer","navigation","useNavigationChecked","idString","getProblemIdString","use","useEffect","enterNewPage","scores","entries","filter","map","score","count","Number","scorePrefixSum","x","Array","from","scoreSuffixSum","i","length","isMobile","useScreenWidthWithin","importantField","MinMemory","as","className","style","header","compact","headerDropdown","simple","item","value","options","key","text","onClick","navigate","submissions","placeholder","icon","name","Inline","primary","goBack","textAlign","basic","table","unstackable","fixed","Header","Body","totalCount","currentPage","itemsPerPage","pageUrl","query","toString","headerChart","chartContainer","tooltips","xPadding","yPadding","displayColors","titleFontSize","bodyFontSize","titleFontStyle","callbacks","title","tooltip","label","scales","yAxes","ticks","beginAtZero","padding","maxTicksLimit","fontSize","fontColor","gridLines","drawBorder","color","xAxes","display","maintainAspectRatio","legend","data","labels","datasets","backgroundColor","getScoreColor","pointBackgroundColor","borderColor","pointBorderColor","pointRadius","pointHoverRadius","pointHitRadius","observer","byId","defineRoute","request","parseInt","params","byDisplayId","displayId","uuid"],"mappings":"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","file":"static/js/107.79f18860.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Table, Icon, Button, Segment, Header, Dropdown, Menu } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport { v4 as uuid } from \"uuid\";\n\nimport style from \"./SubmissionStatisticsPage.module.less\";\n\nimport api from \"@/api\";\nimport { appState } from \"@/appState\";\nimport { useLocalizer, useNavigationChecked, useScreenWidthWithin } from \"@/utils/hooks\";\nimport {\n  SubmissionItem,\n  SubmissionHeader,\n  SubmissionHeaderMobile,\n  SubmissionItemMobile\n} from \"../componments/SubmissionItem\";\nimport { Pagination } from \"@/components/Pagination\";\nimport { getScoreColor } from \"@/components/ScoreText\";\nimport { defineRoute, RouteError } from \"@/AppRouter\";\nimport { getProblemIdString } from \"@/pages/problem/utils\";\nimport { makeToBeLocalizedText } from \"@/locales\";\n\nconst SUBMISSIONS_PER_PAGE = appState.serverPreference.pagination.submissionStatistics;\n\nexport enum SubmissionStatisticsType {\n  Fastest = \"Fastest\",\n  MinMemory = \"MinMemory\",\n  MinAnswerSize = \"MinAnswerSize\",\n  Earliest = \"Earliest\"\n}\n\n// We use lower case type in URLs\nfunction getType(type: string): SubmissionStatisticsType {\n  return (\n    Object.values(SubmissionStatisticsType).find(s => s.toLowerCase() === type.toLowerCase()) ||\n    SubmissionStatisticsType.Fastest\n  );\n}\n\nasync function fetchData(id: number, idType: \"id\" | \"displayId\", type: SubmissionStatisticsType, page: number) {\n  const { requestError, response } = await api.submission.querySubmissionStatistics({\n    [idType === \"id\" ? \"problemId\" : \"problemDisplayId\"]: id,\n    statisticsType: type,\n    locale: appState.locale,\n    skipCount: SUBMISSIONS_PER_PAGE * (page - 1),\n    takeCount: SUBMISSIONS_PER_PAGE\n  });\n\n  if (requestError) throw new RouteError(requestError, { showRefresh: true, showBack: true });\n  else if (response.error) throw new RouteError(makeToBeLocalizedText(`submission_statistics.error.${response.error}`));\n\n  return response;\n}\n\ninterface SubmissionStatisticsPageProps {\n  idType: \"id\" | \"displayId\";\n  id: number;\n  type: SubmissionStatisticsType;\n  currentPage: number;\n  response: ApiTypes.QuerySubmissionStatisticsResponseDto;\n}\n\nlet SubmissionStatisticsPage: React.FC<SubmissionStatisticsPageProps> = props => {\n  const _ = useLocalizer(\"submission_statistics\");\n  const navigation = useNavigationChecked();\n\n  const idString = getProblemIdString(props.id, { use: props.idType });\n\n  useEffect(() => {\n    appState.enterNewPage(`${_(\".title\")} ${idString}`, \"problem_set\");\n  }, [appState.locale, props.id, props.idType]);\n\n  const scores: [number, number][] = Object.entries(props.response.scores)\n    .filter(([score, count]) => count)\n    .map(([score, count]) => [Number(score), Number(count)]);\n  const scorePrefixSum = scores.map(x => Array.from(x));\n  const scoreSuffixSum = scores.map(x => Array.from(x));\n  for (let i = 1; i < scores.length; i++) scorePrefixSum[i][1] += scorePrefixSum[i - 1][1];\n  for (let i = scores.length - 2; i >= 0; i--) scoreSuffixSum[i][1] += scoreSuffixSum[i + 1][1];\n\n  const isMobile = useScreenWidthWithin(0, 768);\n  const importantField =\n    props.type === SubmissionStatisticsType.Fastest\n      ? \"timeUsed\"\n      : props.type === SubmissionStatisticsType.MinMemory\n      ? \"memoryUsed\"\n      : null;\n\n  return (\n    <>\n      <Header as=\"h1\" className={style.header}>\n        {_(\".header\")}\n        <Menu compact className={style.headerDropdown}>\n          <Dropdown\n            simple\n            item\n            value={props.type}\n            options={Object.values(SubmissionStatisticsType).map(type => ({\n              key: type,\n              value: type,\n              text: _(`.type.${type}`),\n              onClick: () => navigation.navigate(type.toLowerCase())\n            }))}\n          />\n        </Menu>\n      </Header>\n      {props.response.submissions.length === 0 ? (\n        <Segment placeholder>\n          <Header icon>\n            <Icon name=\"file\" />\n            {_(\".empty\")}\n          </Header>\n          <Segment.Inline>\n            <Button primary onClick={() => navigation.goBack()}>\n              {_(\".empty_goback\")}\n            </Button>\n          </Segment.Inline>\n        </Segment>\n      ) : (\n        <>\n          <Table textAlign=\"center\" basic=\"very\" className={style.table} unstackable fixed>\n            <Table.Header>\n              {isMobile ? (\n                <SubmissionHeaderMobile importantField={importantField} />\n              ) : (\n                <SubmissionHeader page=\"statistics\" />\n              )}\n            </Table.Header>\n            <Table.Body>\n              {props.response.submissions.map(submission => {\n                return isMobile ? (\n                  <SubmissionItemMobile key={submission.id} submission={submission} importantField={importantField} />\n                ) : (\n                  <SubmissionItem key={submission.id} submission={submission} page=\"statistics\" />\n                );\n              })}\n            </Table.Body>\n          </Table>\n          {props.response.count <= SUBMISSIONS_PER_PAGE ? null : (\n            <div className={style.pagination}>\n              <Pagination\n                totalCount={props.response.count}\n                currentPage={props.currentPage}\n                itemsPerPage={SUBMISSIONS_PER_PAGE}\n                pageUrl={page => ({\n                  query: {\n                    page: page.toString()\n                  }\n                })}\n              />\n            </div>\n          )}\n        </>\n      )}\n      {scores.length > 0 && (\n        <>\n          <Header as=\"h1\" textAlign=\"center\" className={style.headerChart}>\n            {_(\".header_score_distribution\")}\n          </Header>\n          <div className={style.chartContainer}>\n            <Bar\n              options={{\n                tooltips: {\n                  xPadding: 10,\n                  yPadding: 10,\n                  displayColors: false,\n                  titleFontSize: 13,\n                  bodyFontSize: 13,\n                  titleFontStyle: \"\",\n                  callbacks: {\n                    title: tooltip => (tooltip.length === 1 ? _(\".chart_tooltip.score\") + tooltip[0].label : \"\"),\n                    label: tooltip => _(\".chart_tooltip.count\") + tooltip.value\n                  }\n                },\n                scales: {\n                  yAxes: [\n                    {\n                      ticks: {\n                        beginAtZero: true,\n                        padding: 10,\n                        maxTicksLimit: 5,\n                        fontSize: 13,\n                        fontColor: \"#888\"\n                      },\n                      gridLines: {\n                        drawBorder: false,\n                        color: \"#ccc\"\n                      }\n                    }\n                  ],\n                  xAxes: [\n                    {\n                      ticks: {\n                        fontSize: 13,\n                        fontColor: \"#888\"\n                      },\n                      gridLines: {\n                        display: false\n                      }\n                    }\n                  ]\n                },\n                maintainAspectRatio: false,\n                legend: {\n                  display: false\n                }\n              }}\n              data={{\n                labels: scores.map(([score, count]) => score),\n                datasets: [\n                  {\n                    data: scores.map(([score, count]) => count),\n                    backgroundColor: scores.map(([score, count]) => getScoreColor(score))\n                  }\n                ]\n              }}\n            />\n          </div>\n          <Header as=\"h1\" textAlign=\"center\" className={style.headerChart}>\n            {_(\".header_score_prefix_sum\")}\n          </Header>\n          <div className={style.chartContainer}>\n            <Line\n              options={{\n                tooltips: {\n                  xPadding: 10,\n                  yPadding: 10,\n                  displayColors: false,\n                  titleFontSize: 13,\n                  bodyFontSize: 13,\n                  titleFontStyle: \"\",\n                  callbacks: {\n                    title: tooltip => (tooltip.length === 1 ? _(\".chart_tooltip.score\") + \"≤ \" + tooltip[0].label : \"\"),\n                    label: tooltip => _(\".chart_tooltip.count\") + tooltip.value\n                  }\n                },\n                scales: {\n                  yAxes: [\n                    {\n                      ticks: {\n                        beginAtZero: true,\n                        padding: 10,\n                        maxTicksLimit: 5,\n                        fontSize: 13,\n                        fontColor: \"#888\"\n                      },\n                      gridLines: {\n                        drawBorder: false,\n                        color: \"#ccc\"\n                      }\n                    }\n                  ],\n                  xAxes: [\n                    {\n                      ticks: {\n                        fontSize: 13,\n                        fontColor: \"#888\"\n                      },\n                      gridLines: {\n                        display: false\n                      }\n                    }\n                  ]\n                },\n                maintainAspectRatio: false,\n                legend: {\n                  display: false\n                }\n              }}\n              data={{\n                labels: scorePrefixSum.map(([score, count]) => score),\n                datasets: [\n                  {\n                    data: scorePrefixSum.map(([score, count]) => count),\n                    pointBackgroundColor: scorePrefixSum.map(([score, count]) => getScoreColor(score)),\n                    backgroundColor: \"rgba(11, 98, 164, 0.08)\",\n                    borderColor: \"#0b62a4\",\n                    pointBorderColor: \"#fff\",\n                    pointRadius: 4,\n                    pointHoverRadius: 8,\n                    pointHitRadius: 30\n                  }\n                ]\n              }}\n            />\n          </div>\n          <Header as=\"h1\" textAlign=\"center\" className={style.headerChart}>\n            {_(\".header_score_suffix_sum\")}\n          </Header>\n          <div className={style.chartContainer}>\n            <Line\n              options={{\n                tooltips: {\n                  xPadding: 10,\n                  yPadding: 10,\n                  displayColors: false,\n                  titleFontSize: 13,\n                  bodyFontSize: 13,\n                  titleFontStyle: \"\",\n                  callbacks: {\n                    title: tooltip => (tooltip.length === 1 ? _(\".chart_tooltip.score\") + \"≥ \" + tooltip[0].label : \"\"),\n                    label: tooltip => _(\".chart_tooltip.count\") + tooltip.value\n                  }\n                },\n                scales: {\n                  yAxes: [\n                    {\n                      ticks: {\n                        beginAtZero: true,\n                        padding: 10,\n                        maxTicksLimit: 5,\n                        fontSize: 13,\n                        fontColor: \"#888\"\n                      },\n                      gridLines: {\n                        drawBorder: false,\n                        color: \"#ccc\"\n                      }\n                    }\n                  ],\n                  xAxes: [\n                    {\n                      ticks: {\n                        fontSize: 13,\n                        fontColor: \"#888\"\n                      },\n                      gridLines: {\n                        display: false\n                      }\n                    }\n                  ]\n                },\n                maintainAspectRatio: false,\n                legend: {\n                  display: false\n                }\n              }}\n              data={{\n                labels: scoreSuffixSum.map(([score, count]) => score),\n                datasets: [\n                  {\n                    data: scoreSuffixSum.map(([score, count]) => count),\n                    pointBackgroundColor: scoreSuffixSum.map(([score, count]) => getScoreColor(score)),\n                    backgroundColor: \"rgba(11, 98, 164, 0.08)\",\n                    borderColor: \"#0b62a4\",\n                    pointBorderColor: \"#fff\",\n                    pointRadius: 4,\n                    pointHoverRadius: 8,\n                    pointHitRadius: 30\n                  }\n                ]\n              }}\n            />\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n\nSubmissionStatisticsPage = observer(SubmissionStatisticsPage);\n\nexport default {\n  byId: defineRoute(async request => {\n    const id = parseInt(request.params[\"id\"]) || 0;\n\n    const type = getType(request.params[\"type\"]);\n    let currentPage = parseInt(request.params.page) || 1;\n    if (currentPage < 1) currentPage = 1;\n\n    const response = await fetchData(id, \"id\", type, currentPage);\n\n    return <SubmissionStatisticsPage id={id} idType=\"id\" type={type} currentPage={currentPage} response={response} />;\n  }),\n  byDisplayId: defineRoute(async request => {\n    const displayId = parseInt(request.params[\"displayId\"]) || 0;\n\n    const type = getType(request.params[\"type\"]);\n    let currentPage = parseInt(request.params.page) || 1;\n    if (currentPage < 1) currentPage = 1;\n\n    const response = await fetchData(displayId, \"displayId\", type, currentPage);\n\n    return (\n      <SubmissionStatisticsPage\n        key={uuid()}\n        id={displayId}\n        idType=\"displayId\"\n        type={type}\n        currentPage={currentPage}\n        response={response}\n      />\n    );\n  })\n};\n"],"sourceRoot":""}