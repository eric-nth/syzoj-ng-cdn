{"version":3,"sources":["pages/user/edit/AuditView.tsx"],"names":["AUDIT_LOGS_PER_PAGE","appState","serverPreference","pagination","userAuditLogs","normalizeQuery","rawQuery","result","actionQuery","trim","substr","ip","firstObjectId","Number","isSafeInteger","secondObjectId","page","Object","fromEntries","entries","filter","fetchData","username","a","query","response","Promise","all","api","user","getUserMeta","queryAuditLogs","skipCount","takeCount","locale","requestError","RouteError","showRefresh","showBack","error","makeToBeLocalizedText","assign","View","observer","props","_","useLocalizer","navigation","useNavigationChecked","useEffect","enterNewPage","meta","useState","setActionQuery","setIp","toString","setFirstObjectId","setSecondObjectId","getFilterUrl","queryOverride","map","onFilter","navigate","renderObject","whichObject","objectType","objectId","object","wrap","element","style","display","onClick","e","stopPropagation","ctrlKey","preventDefault","group","name","problem","title","href","getProblemUrl","getProblemDisplayName","problemTag","size","content","color","as","Link","pathname","tagIds","id","discussion","getDiscussionUrl","getDiscussionDisplayTitle","className","sectionHeader","queryForm","Group","inline","autoFormGroup","inputs","Input","inputActionQuery","icon","iconPosition","placeholder","value","onChange","inputIp","inputObjectId","filterButton","results","length","values","some","x","Inline","primary","goBack","auditLogs","i","Fragment","logItem","userAvatar","avatar","imageSize","Content","Author","action","Text","message","replace","match","key","firstObjectType","firstObject","secondObjectType","secondObject","node","details","keys","panels","segmentClassName","codeboxSegment","scrollableCodeBoxSegment","code","JSON","stringify","language","copyDetailsJson","copyToClipboard","Actions","info","Action","item","ipLocation","fixChineseSpace","formatDateTime","time","count","totalCount","currentPage","itemsPerPage","pageUrl"],"mappings":"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","file":"static/js/166.aaa2206f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Header, Button, Form, Segment, Icon, Comment, Accordion, Divider, Label } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\nimport replace from \"string-replace-to-array\";\nimport { URLDescriptor } from \"navi\";\n\nimport style from \"./UserEdit.module.less\";\n\nimport api from \"@/api\";\nimport { appState } from \"@/appState\";\nimport { useLocalizer, useNavigationChecked, Link } from \"@/utils/hooks\";\nimport { RouteError } from \"@/AppRouter\";\nimport UserAvatar from \"@/components/UserAvatar\";\nimport UserLink from \"@/components/UserLink\";\nimport { HighlightedCodeBox } from \"@/components/CodeBox\";\nimport formatDateTime from \"@/utils/formatDateTime\";\nimport fixChineseSpace from \"@/utils/fixChineseSpace\";\nimport { Pagination } from \"@/components/Pagination\";\nimport { UserMeta } from \"@/interfaces/UserMeta\";\nimport PseudoLink from \"@/components/PseudoLink\";\nimport copyToClipboard from \"@/utils/copyToClipboard\";\nimport { getProblemDisplayName, getProblemUrl } from \"@/pages/problem/utils\";\nimport { getDiscussionDisplayTitle, getDiscussionUrl } from \"@/pages/discussion/utils\";\nimport { makeToBeLocalizedText } from \"@/locales\";\nimport { EmojiRenderer } from \"@/components/EmojiRenderer\";\n\nconst AUDIT_LOGS_PER_PAGE = appState.serverPreference.pagination.userAuditLogs;\n\ninterface AuditQuery {\n  actionQuery?: string;\n  ip?: string;\n  firstObjectId?: number;\n  secondObjectId?: number;\n  page?: number;\n}\n\nfunction normalizeQuery(rawQuery: Record<string, string>): AuditQuery {\n  const result: AuditQuery = {\n    actionQuery: rawQuery.actionQuery?.trim() ? rawQuery.actionQuery.trim().substr(0, 40) : null,\n    ip: rawQuery.ip?.trim() ? rawQuery.ip.trim().substr(0, 45) : null,\n    firstObjectId: Number.isSafeInteger(Number(rawQuery.firstObjectId)) ? Number(rawQuery.firstObjectId) : null,\n    secondObjectId: Number.isSafeInteger(Number(rawQuery.secondObjectId)) ? Number(rawQuery.secondObjectId) : null,\n    page: Number.isSafeInteger(Number(rawQuery.page)) ? Number(rawQuery.page) : null\n  };\n  return Object.fromEntries(Object.entries(result).filter(([key, value]) => value != null));\n}\n\nexport async function fetchData(username: string, rawQuery: Record<string, string>) {\n  const query = normalizeQuery(rawQuery);\n  const page = query.page || 1;\n\n  const result = {\n    query,\n    response: {}\n  };\n\n  for (const { requestError, response } of await Promise.all([\n    api.user.getUserMeta({ username }),\n    api.user.queryAuditLogs({\n      username,\n      actionQuery: query.actionQuery,\n      ip: query.ip,\n      firstObjectId: query.firstObjectId,\n      secondObjectId: query.secondObjectId,\n      skipCount: AUDIT_LOGS_PER_PAGE * (page - 1),\n      takeCount: AUDIT_LOGS_PER_PAGE,\n      locale: appState.locale\n    })\n  ])) {\n    if (requestError) throw new RouteError(requestError, { showRefresh: true, showBack: true });\n    else if (response.error) throw new RouteError(makeToBeLocalizedText(`user_edit.errors.${response.error}`));\n    Object.assign(result.response, response);\n  }\n\n  return result;\n}\n\ninterface AuditViewProps {\n  query: AuditQuery;\n  response: ApiTypes.QueryAuditLogsResponseDto & ApiTypes.GetUserMetaResponseDto;\n}\n\nconst AuditView: React.FC<AuditViewProps> = props => {\n  const _ = useLocalizer(\"user_edit.audit\");\n  const navigation = useNavigationChecked();\n\n  useEffect(() => {\n    appState.enterNewPage(`${_(`.title`)} - ${props.response.meta.username}`, null, false);\n  }, [appState.locale, props.response]);\n\n  const [actionQuery, setActionQuery] = useState(props.query.actionQuery);\n  const [ip, setIp] = useState(props.query.ip);\n  const [firstObjectId, setFirstObjectId] = useState(\n    props.query.firstObjectId == null ? \"\" : props.query.firstObjectId.toString()\n  );\n  const [secondObjectId, setSecondObjectId] = useState(\n    props.query.secondObjectId == null ? \"\" : props.query.secondObjectId.toString()\n  );\n\n  function getFilterUrl(queryOverride?: Partial<AuditQuery>): Partial<URLDescriptor> {\n    const query: Partial<AuditQuery> = {};\n    if (actionQuery) query.actionQuery = actionQuery;\n    if (ip) query.ip = ip;\n    if (firstObjectId !== \"\") query.firstObjectId = Number(firstObjectId);\n    if (secondObjectId !== \"\") query.secondObjectId = Number(secondObjectId);\n\n    return {\n      query: Object.fromEntries(\n        Object.entries({\n          ...query,\n          ...queryOverride\n        }).map(([key, value]) => [key, value.toString()])\n      )\n    };\n  }\n\n  function onFilter(queryOverride?: Partial<AuditQuery>) {\n    navigation.navigate(getFilterUrl(queryOverride));\n  }\n\n  function renderObject(\n    whichObject: 1 | 2,\n    objectType: ApiTypes.QueryAuditLogsResponseItemDto[\"firstObjectType\"],\n    objectId: number,\n    object: unknown\n  ) {\n    const wrap = (element: React.ReactNode) => (\n      <EmojiRenderer>\n        <div\n          style={{ display: \"inline-block\" }}\n          onClick={e => {\n            e.stopPropagation();\n            if (e.ctrlKey) {\n              e.preventDefault();\n              onFilter(\n                whichObject === 1\n                  ? {\n                      firstObjectId: objectId\n                    }\n                  : {\n                      secondObjectId: objectId\n                    }\n              );\n            }\n          }}\n        >\n          {element}\n        </div>\n      </EmojiRenderer>\n    );\n\n    if (!objectType) return null;\n    if (!object)\n      return wrap(\n        <PseudoLink>\n          Deleted {objectType} #{objectId}\n        </PseudoLink>\n      );\n\n    switch (objectType) {\n      case \"User\": {\n        const user = object as UserMeta;\n        return wrap(<UserLink user={user} />);\n      }\n      case \"Group\": {\n        const group = object as ApiTypes.GroupMetaDto;\n        return wrap(<PseudoLink>{group.name}</PseudoLink>);\n      }\n      case \"Problem\": {\n        const [problem, title] = object as [ApiTypes.ProblemMetaDto, string];\n        return wrap(<Link href={getProblemUrl(problem)}>{getProblemDisplayName(problem, title, _)}</Link>);\n      }\n      case \"ProblemTag\": {\n        const problemTag = object as ApiTypes.LocalizedProblemTagDto;\n        return wrap(\n          <Label\n            size=\"small\"\n            content={problemTag.name}\n            color={problemTag.color as any}\n            as={Link}\n            href={{\n              pathname: \"/p\",\n              query: {\n                tagIds: problemTag.id.toString()\n              }\n            }}\n          />\n        );\n      }\n      case \"Submission\": {\n        return wrap(<Link href={`/s/${objectId}`}>#{objectId}</Link>);\n      }\n      case \"Discussion\": {\n        const discussion = object as ApiTypes.DiscussionMetaDto;\n        return wrap(\n          <Link href={getDiscussionUrl(discussion)}>\n            #{discussion.id} {getDiscussionDisplayTitle(discussion.title, _)}\n          </Link>\n        );\n      }\n      case \"DiscussionReply\": {\n        return wrap(<PseudoLink>#{objectId}</PseudoLink>);\n      }\n      default:\n        return wrap(\n          <PseudoLink>\n            Unknown {objectType} #{objectId}\n          </PseudoLink>\n        );\n    }\n  }\n\n  return (\n    <>\n      <Header className={style.sectionHeader} size=\"large\" content={_(\".header\")} />\n      <Form className={style.queryForm}>\n        <Form.Group inline className={style.autoFormGroup}>\n          <div className={style.inputs}>\n            <Form.Input\n              className={style.inputActionQuery}\n              icon=\"settings\"\n              iconPosition=\"left\"\n              placeholder={_(\".query.action_query\")}\n              value={actionQuery}\n              onChange={(e, { value }) => setActionQuery(value)}\n            />\n            <Form.Input\n              className={style.inputIp}\n              icon=\"wifi\"\n              iconPosition=\"left\"\n              placeholder={_(\".query.ip\")}\n              value={ip}\n              onChange={(e, { value }) => setIp(value)}\n            />\n            <Form.Input\n              className={style.inputObjectId}\n              icon=\"hashtag\"\n              iconPosition=\"left\"\n              placeholder={_(\".query.first_object_id\")}\n              value={firstObjectId}\n              onChange={(e, { value }) =>\n                value === \"\"\n                  ? setFirstObjectId(\"\")\n                  : Number.isSafeInteger(Number(value))\n                  ? setFirstObjectId(value)\n                  : null\n              }\n            />\n            <Form.Input\n              className={style.inputObjectId}\n              icon=\"hashtag\"\n              iconPosition=\"left\"\n              placeholder={_(\".query.second_object_id\")}\n              value={secondObjectId}\n              onChange={(e, { value }) =>\n                value === \"\"\n                  ? setSecondObjectId(\"\")\n                  : Number.isSafeInteger(Number(value))\n                  ? setSecondObjectId(value)\n                  : null\n              }\n            />\n          </div>\n          <Button\n            className={\"labeled icon \" + style.filterButton}\n            icon=\"search\"\n            content={_(\".query.filter\")}\n            onClick={() => onFilter()}\n          />\n        </Form.Group>\n      </Form>\n      {props.response.results.length === 0 ? (\n        <Segment placeholder>\n          {Object.values(props.query).some(x => x) ? (\n            <>\n              <Header icon>\n                <Icon name=\"search\" />\n                {_(\".no_matched_audit_log\")}\n              </Header>\n              <Segment.Inline>\n                <Button primary onClick={() => navigation.goBack()}>\n                  {_(\".goback\")}\n                </Button>\n              </Segment.Inline>\n            </>\n          ) : (\n            <>\n              <Header icon>\n                <Icon name=\"list alternate\" />\n                {_(\".no_audit_log\")}\n              </Header>\n            </>\n          )}\n        </Segment>\n      ) : (\n        <>\n          <Comment.Group className={style.auditLogs}>\n            {props.response.results.map((result, i) => (\n              <React.Fragment key={i}>\n                {i !== 0 && <Divider />}\n                <Comment className={style.logItem}>\n                  {/* Comment.Avatar */}\n                  <div className=\"avatar\">\n                    <UserAvatar userAvatar={result.user.avatar} imageSize={70} />\n                  </div>\n                  <Comment.Content>\n                    <Comment.Author>\n                      <span className={style.user}>\n                        <UserLink user={result.user} />\n                      </span>\n                      <span className={style.action}>\n                        <Link href={getFilterUrl({ actionQuery: result.action })}>{result.action}</Link>\n                      </span>\n                    </Comment.Author>\n                    <Comment.Text>\n                      {(() => {\n                        const message = (replace(\n                          _(`user_audit.${result.action}`),\n                          /\\[(.+?)\\]/g,\n                          (match: string, key: string) => {\n                            switch (key) {\n                              case \"firstObject\":\n                                return renderObject(\n                                  1,\n                                  result.firstObjectType,\n                                  result.firstObjectId,\n                                  result.firstObject\n                                );\n                              case \"secondObject\":\n                                return renderObject(\n                                  2,\n                                  result.secondObjectType,\n                                  result.secondObjectId,\n                                  result.secondObject\n                                );\n                              default:\n                                return null;\n                            }\n                          }\n                        ) as React.ReactNode[]).map((node, i) => <React.Fragment key={i}>{node}</React.Fragment>);\n\n                        return result.details && Object.keys(result.details) ? (\n                          <Accordion\n                            panels={[\n                              {\n                                key: \"\",\n                                title: {\n                                  className: style.message,\n                                  content: <span>{message}</span>\n                                },\n                                content: {\n                                  content: (\n                                    <HighlightedCodeBox\n                                      segmentClassName={style.codeboxSegment + \" \" + style.scrollableCodeBoxSegment}\n                                      code={JSON.stringify(result.details, null, 2)}\n                                      language=\"json\"\n                                    >\n                                      <div\n                                        className={style.copyDetailsJson}\n                                        title={_(\".copy_details\")}\n                                        onClick={() => copyToClipboard(JSON.stringify(result.details, null, 2))}\n                                      >\n                                        <Icon name=\"copy\" />\n                                      </div>\n                                    </HighlightedCodeBox>\n                                  )\n                                }\n                              }\n                            ]}\n                          />\n                        ) : (\n                          <div className={style.message}>{message}</div>\n                        );\n                      })()}\n                    </Comment.Text>\n                    <Comment.Actions className={style.info}>\n                      <Comment.Action as={Link} className={style.item} href={getFilterUrl({ ip: result.ip })}>\n                        {result.ip}\n                      </Comment.Action>\n                      {result.ipLocation && (\n                        <Comment.Action className={style.item} as=\"span\">\n                          {fixChineseSpace(result.ipLocation)}\n                        </Comment.Action>\n                      )}\n                      <Comment.Action className={style.item} as=\"span\">\n                        {formatDateTime(result.time)[1]}\n                      </Comment.Action>\n                    </Comment.Actions>\n                  </Comment.Content>\n                </Comment>\n              </React.Fragment>\n            ))}\n          </Comment.Group>\n          {props.response.count <= AUDIT_LOGS_PER_PAGE ? null : (\n            <div className={style.pagination}>\n              <Pagination\n                totalCount={props.response.count}\n                currentPage={props.query.page || 1}\n                itemsPerPage={AUDIT_LOGS_PER_PAGE}\n                pageUrl={page => ({\n                  query: Object.fromEntries(\n                    Object.entries({\n                      ...props.query,\n                      page\n                    }).map(([key, value]) => [key, value.toString()])\n                  )\n                })}\n              />\n            </div>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport const View = observer(AuditView);\n"],"sourceRoot":""}