{"version":3,"sources":["components/CodeLanguageAndOptions.tsx"],"names":["CodeLanguageAndOptions","props","_","useLocalizer","compileAndRunOptionsBackup","useRef","Map","current","Select","className","classNameForLanguage","label","headerForLanguage","value","language","options","Object","keys","compileAndRunOptions","map","key","text","onChange","e","pending","newLanguage","oldLanguage","set","onUpdateLanguage","onUpdateCompileAndRunOptions","get","getPreferredCompileAndRunOptions","onSwitchLanguage","elementAfterLanguageSelect","option","type","CodeLanguageOptionType","classNameForCompileAndRunOptions","name","values","assign","observer"],"mappings":"kLAwBIA,EAAgE,SAAAC,GAClE,IAAMC,EAAIC,YAAa,iBAEjBC,EAA6BC,iBAAO,IAAIC,KAA8CC,QAU5F,OACE,qCACE,cAAC,IAAKC,OAAN,CACEC,UAAWR,EAAMS,qBACjBC,MAAOV,EAAMW,mBAAqBV,EAAE,kBACpCW,MAAOZ,EAAMa,SACbC,QAASC,OAAOC,KAAKC,KAAsBC,KAAI,SAAAL,GAAQ,MAAK,CAC1DM,IAAKN,EACLD,MAAOC,EACPO,KAAMnB,EAAE,IAAD,OAAKY,EAAL,cAETQ,SAAU,SAACC,EAAD,OAAMV,EAAN,EAAMA,MAAN,OAAmBZ,EAAMuB,SApBzC,SAA0BC,GACxB,IAAMC,EAAczB,EAAMa,SAC1BV,EAA2BuB,IAAID,EAAazB,EAAMiB,sBAClDjB,EAAM2B,iBAAiBH,GACvBxB,EAAM4B,6BACJzB,EAA2B0B,IAAIL,IAAgBM,YAAiCN,IAehCO,CAAiBnB,MAEhEZ,EAAMgC,2BACNf,IAAqBjB,EAAMa,UAA0BK,KAAI,SAAAe,GACxD,OAAQA,EAAOC,MACb,KAAKC,IAAuB5B,OAC1B,OACE,cAAC,IAAKA,OAAN,CACEC,UAAWR,EAAMoC,iCAEjB1B,MAAOT,EAAE,IAAD,OAAKD,EAAMa,SAAX,oBAA+BoB,EAAOI,KAAtC,UACRzB,MAAOZ,EAAMiB,qBAAqBgB,EAAOI,MACzCvB,QAASmB,EAAOK,OAAOpB,KAAI,SAAAN,GAAK,MAAK,CACnCO,IAAKP,EACLA,MAAOA,EACPQ,KAAMnB,EAAE,IAAD,OAAKD,EAAMa,SAAX,oBAA+BoB,EAAOI,KAAtC,mBAAqDzB,QAE9DS,SAAU,SAACC,EAAD,OAAMV,EAAN,EAAMA,MAAN,OACPZ,EAAMuB,SACPvB,EAAM4B,6BACJb,OAAOwB,OAAO,GAAIvC,EAAMiB,qBAAxBF,OAAA,IAAAA,CAAA,GAAiDkB,EAAOI,KAAOzB,OAX9DqB,EAAOI,cAsB5BtC,EAAyByC,YAASzC,GAEnBA","file":"static/js/54.1d4bd6fa.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport { Form } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\n\nimport { useLocalizer } from \"@/utils/hooks\";\nimport {\n  compileAndRunOptions,\n  CodeLanguageOptionType,\n  CodeLanguage,\n  getPreferredCompileAndRunOptions\n} from \"@/interfaces/CodeLanguage\";\n\ninterface CodeLanguageAndOptionsProps {\n  pending?: boolean;\n  elementAfterLanguageSelect?: React.ReactNode;\n  headerForLanguage?: string;\n  classNameForLanguage?: string;\n  classNameForCompileAndRunOptions?: string;\n  language: CodeLanguage;\n  compileAndRunOptions: Record<string, unknown>;\n  onUpdateLanguage: (newLanguage: CodeLanguage) => void;\n  onUpdateCompileAndRunOptions: (newCompileAndRunOptions: Record<string, unknown>) => void;\n}\n\nlet CodeLanguageAndOptions: React.FC<CodeLanguageAndOptionsProps> = props => {\n  const _ = useLocalizer(\"code_language\");\n\n  const compileAndRunOptionsBackup = useRef(new Map<CodeLanguage, Record<string, unknown>>()).current;\n  function onSwitchLanguage(newLanguage: CodeLanguage) {\n    const oldLanguage = props.language;\n    compileAndRunOptionsBackup.set(oldLanguage, props.compileAndRunOptions);\n    props.onUpdateLanguage(newLanguage);\n    props.onUpdateCompileAndRunOptions(\n      compileAndRunOptionsBackup.get(newLanguage) || getPreferredCompileAndRunOptions(newLanguage)\n    );\n  }\n\n  return (\n    <>\n      <Form.Select\n        className={props.classNameForLanguage}\n        label={props.headerForLanguage || _(\".code_language\")}\n        value={props.language}\n        options={Object.keys(compileAndRunOptions).map(language => ({\n          key: language,\n          value: language,\n          text: _(`.${language}.name`)\n        }))}\n        onChange={(e, { value }) => !props.pending && onSwitchLanguage(value as CodeLanguage)}\n      />\n      {props.elementAfterLanguageSelect}\n      {compileAndRunOptions[props.language as CodeLanguage].map(option => {\n        switch (option.type) {\n          case CodeLanguageOptionType.Select:\n            return (\n              <Form.Select\n                className={props.classNameForCompileAndRunOptions}\n                key={option.name}\n                label={_(`.${props.language}.options.${option.name}.name`)}\n                value={props.compileAndRunOptions[option.name] as string}\n                options={option.values.map(value => ({\n                  key: value,\n                  value: value,\n                  text: _(`.${props.language}.options.${option.name}.values.${value}`)\n                }))}\n                onChange={(e, { value }) =>\n                  !props.pending &&\n                  props.onUpdateCompileAndRunOptions(\n                    Object.assign({}, props.compileAndRunOptions, { [option.name]: value })\n                  )\n                }\n              />\n            );\n        }\n      })}\n    </>\n  );\n};\n\nCodeLanguageAndOptions = observer(CodeLanguageAndOptions);\n\nexport default CodeLanguageAndOptions;\n"],"sourceRoot":""}