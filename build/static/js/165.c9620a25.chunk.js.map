{"version":3,"sources":["interfaces/SubmissionStatus.ts","pages/submission/submissions/SubmissionsPage.tsx"],"names":["SubmissionStatus","SubmissionStatusAll","SUBMISSIONS_PER_PAGE","appState","serverPreference","pagination","submissions","normalizeQuery","query","result","problemId","Number","problemDisplayId","submitter","isValidUsername","codeLanguage","Object","values","CodeLanguage","includes","status","minId","isSafeInteger","maxId","fromEntries","entries","filter","fetchData","a","api","submission","querySubmission","locale","takeCount","requestError","response","RouteError","showRefresh","showBack","SubmissionsPage","props","_","useLocalizer","navigation","useNavigationChecked","useEffect","enterNewPage","queryResult","error","toast","useState","toString","queryProblemId","setQueryProblemId","useFieldCheckSimple","value","toUpperCase","startsWith","substr","checkQueryProblemId","queryProblemIdError","querySubmitter","setQuerySubmitter","checkQuerySubmitter","querySubmitterError","queryCodeLanguage","setQueryCodeLanguage","queryStatus","setQueryStatus","onFilter","filterMySubmissions","currentUser","username","navigate","map","setSubmissions","subscriptionKey","progressSubscriptionKey","messagesMapRef","useRef","useSocket","socket","on","submissionId","messageDelta","messageMap","current","message","get","patch","set","newSubmissions","i","id","progressMeta","resultMeta","progressType","console","log","Map","hasPrevPage","hasLargerId","hasNextPage","hasSmallerId","isWideScreen","useScreenWidthWithin","Infinity","isMobile","Form","className","style","queryForm","Group","inline","unstackable","Input","queryInputProblemId","icon","iconPosition","placeholder","onChange","e","onBlur","queryInputSubmitter","Select","queryInputCodeLanguage","select","selectedAll","options","key","text","Icon","name","notInMenu","inMenu","keys","compileAndRunOptions","language","queryInputStatus","StatusText","Button","queryButton","content","onClick","mySubmissions","primary","length","Segment","Header","some","x","Inline","goBack","Table","textAlign","basic","table","fixed","page","Body","SubmissionProgressType","Preparing","Compiling","Running","SubmissionItem","pageUrl","direction","assign","observer","defineRoute","request","uuid"],"mappings":"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","file":"static/js/165.c9620a25.chunk.js","sourcesContent":["// Reordered for displaying in a select list\nexport enum SubmissionStatus {\n  Accepted = \"Accepted\",\n  PartiallyCorrect = \"PartiallyCorrect\",\n  WrongAnswer = \"WrongAnswer\",\n  RuntimeError = \"RuntimeError\",\n  TimeLimitExceeded = \"TimeLimitExceeded\",\n  MemoryLimitExceeded = \"MemoryLimitExceeded\",\n  CompilationError = \"CompilationError\",\n  FileError = \"FileError\",\n  OutputLimitExceeded = \"OutputLimitExceeded\",\n  JudgementFailed = \"JudgementFailed\",\n  ConfigurationError = \"ConfigurationError\",\n  SystemError = \"SystemError\",\n  Canceled = \"Canceled\",\n  Pending = \"Pending\"\n}\n\nexport enum SubmissionStatusAll {\n  Pending = \"Pending\",\n\n  ConfigurationError = \"ConfigurationError\",\n  SystemError = \"SystemError\",\n  Canceled = \"Canceled\",\n\n  CompilationError = \"CompilationError\",\n\n  FileError = \"FileError\",\n  RuntimeError = \"RuntimeError\",\n  TimeLimitExceeded = \"TimeLimitExceeded\",\n  MemoryLimitExceeded = \"MemoryLimitExceeded\",\n  OutputLimitExceeded = \"OutputLimitExceeded\",\n\n  PartiallyCorrect = \"PartiallyCorrect\",\n  WrongAnswer = \"WrongAnswer\",\n  Accepted = \"Accepted\",\n\n  JudgementFailed = \"JudgementFailed\",\n\n  Waiting = \"Waiting\",\n  Preparing = \"Preparing\",\n  Compiling = \"Compiling\",\n  Running = \"Running\",\n  Skipped = \"Skipped\"\n}\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { Table, Form, Icon, Button, Segment, Header } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\nimport { v4 as uuid } from \"uuid\";\nimport { patch } from \"jsondiffpatch\";\n\nimport style from \"./SubmissionsPage.module.less\";\n\nimport api from \"@/api\";\nimport { appState } from \"@/appState\";\nimport {\n  useLocalizer,\n  useFieldCheckSimple,\n  useSocket,\n  useScreenWidthWithin,\n  useNavigationChecked\n} from \"@/utils/hooks\";\nimport toast from \"@/utils/toast\";\nimport { CodeLanguage, compileAndRunOptions } from \"@/interfaces/CodeLanguage\";\nimport { SubmissionStatus } from \"@/interfaces/SubmissionStatus\";\nimport { isValidUsername } from \"@/utils/validators\";\nimport StatusText from \"@/components/StatusText\";\nimport {\n  SubmissionItem,\n  SubmissionItemMobile,\n  SubmissionHeader,\n  SubmissionHeaderMobile\n} from \"../componments/SubmissionItem\";\nimport { SimplePagination } from \"@/components/Pagination\";\nimport { defineRoute, RouteError } from \"@/AppRouter\";\nimport { SubmissionProgressMessageMetaOnly, SubmissionProgressType } from \"../common\";\n\nconst SUBMISSIONS_PER_PAGE = appState.serverPreference.pagination.submissions;\n\ninterface SubmissionsQuery {\n  problemId: number;\n  problemDisplayId: number;\n  submitter: string;\n  codeLanguage: CodeLanguage;\n  status: SubmissionStatus;\n  minId: number;\n  maxId: number;\n}\n\nfunction normalizeQuery(query: Record<string, string>): SubmissionsQuery {\n  const result: SubmissionsQuery = {\n    problemId: Number(query.problemId) ? Number(query.problemId) : null,\n    problemDisplayId:\n      Number(query.problemDisplayId) && !Number(query.problemId) ? Number(query.problemDisplayId) : null,\n    submitter: isValidUsername(query.submitter) ? query.submitter : null,\n    codeLanguage: Object.values(CodeLanguage).includes(query.codeLanguage as CodeLanguage)\n      ? (query.codeLanguage as CodeLanguage)\n      : null,\n    status: query.status in SubmissionStatus ? (query.status as SubmissionStatus) : null,\n    minId: Number.isSafeInteger(Number(query.minId)) ? Number(query.minId) : null,\n    maxId: Number.isSafeInteger(Number(query.maxId)) ? Number(query.maxId) : null\n  };\n  return Object.fromEntries(Object.entries(result).filter(([key, value]) => value != null)) as SubmissionsQuery;\n}\n\nasync function fetchData(query: SubmissionsQuery) {\n  const { requestError, response } = await api.submission.querySubmission({\n    ...query,\n    locale: appState.locale,\n    takeCount: SUBMISSIONS_PER_PAGE\n  });\n\n  if (requestError) throw new RouteError(requestError, { showRefresh: true, showBack: true });\n\n  return response;\n}\n\ninterface SubmissionsPageProps {\n  query: SubmissionsQuery;\n  queryResult: ApiTypes.QuerySubmissionResponseDto;\n}\n\nlet SubmissionsPage: React.FC<SubmissionsPageProps> = props => {\n  const _ = useLocalizer(\"submissions\");\n  const navigation = useNavigationChecked();\n\n  useEffect(() => {\n    appState.enterNewPage(_(\".title\"), \"submissions\");\n  }, [appState.locale]);\n\n  useEffect(() => {\n    if (props.queryResult.error) toast.error(_(`.query_error.${props.queryResult.error}`));\n  }, []);\n\n  const [queryProblemId, setQueryProblemId] = useState(\n    props.query.problemDisplayId\n      ? props.query.problemDisplayId.toString()\n      : props.query.problemId\n      ? \"P\" + props.query.problemId\n      : \"\"\n  );\n  const [checkQueryProblemId, queryProblemIdError] = useFieldCheckSimple(queryProblemId, value => {\n    if (value.toUpperCase().startsWith(\"P\") && Number.isSafeInteger(Number(value.substr(1)))) return true;\n    if (Number.isSafeInteger(Number(value))) return true;\n    return false;\n  });\n\n  const [querySubmitter, setQuerySubmitter] = useState(props.query.submitter || \"\");\n  const [checkQuerySubmitter, querySubmitterError] = useFieldCheckSimple(\n    querySubmitter,\n    value => !value || isValidUsername(value)\n  );\n\n  const [queryCodeLanguage, setQueryCodeLanguage] = useState(props.query.codeLanguage);\n  const [queryStatus, setQueryStatus] = useState(props.query.status);\n\n  function onFilter(filterMySubmissions: boolean) {\n    if (!checkQueryProblemId()) return toast.error(_(\".query_error.INVALID_PROBLEM_ID\"));\n    else if (!filterMySubmissions && !checkQuerySubmitter()) return toast.error(_(\".query_error.INVALID_USERNAME\"));\n\n    const query: Partial<SubmissionsQuery> = {};\n    if (queryProblemId && queryProblemId.toUpperCase().startsWith(\"P\"))\n      query.problemId = Number(queryProblemId.substr(1));\n    if (queryProblemId && !queryProblemId.toUpperCase().startsWith(\"P\"))\n      query.problemDisplayId = Number(queryProblemId);\n    if (filterMySubmissions) query.submitter = appState.currentUser.username;\n    else if (querySubmitter) query.submitter = querySubmitter;\n    if (queryCodeLanguage) query.codeLanguage = queryCodeLanguage;\n    if (queryStatus) query.status = queryStatus;\n\n    navigation.navigate({\n      query: Object.fromEntries(Object.entries(query).map(([key, value]) => [key, value.toString()]))\n    });\n  }\n\n  const [submissions, setSubmissions] = useState(props.queryResult.submissions || []);\n\n  // Subscribe to submission progress with the key\n  const subscriptionKey = props.queryResult.progressSubscriptionKey;\n  // Save the messages to a map, since we receive message delta each time\n  const messagesMapRef = useRef<Map<number, SubmissionProgressMessageMetaOnly>>();\n  useSocket(\n    \"submission-progress\",\n    {\n      subscriptionKey: subscriptionKey\n    },\n    socket => {\n      socket.on(\"message\", (submissionId: number, messageDelta: any) => {\n        const messageMap = messagesMapRef.current;\n        let message = messageMap.get(submissionId);\n        message = patch(message, messageDelta);\n        messageMap.set(submissionId, message);\n\n        setSubmissions(submissions => {\n          const newSubmissions = [...submissions];\n          for (const i in newSubmissions) {\n            if (submissionId === newSubmissions[i].id) {\n              if (!message.progressMeta.resultMeta) {\n                // Not finished\n                newSubmissions[i] = {\n                  ...newSubmissions[i],\n                  progressType: message.progressMeta.progressType\n                };\n              } else {\n                // Finished\n                delete newSubmissions[i].progressType;\n                newSubmissions[i] = {\n                  ...newSubmissions[i],\n                  ...message.progressMeta.resultMeta\n                };\n              }\n\n              break;\n            }\n          }\n          return newSubmissions;\n        });\n      });\n    },\n    () => {\n      // Server maintains the \"previous\" messages for each connection,\n      // so clear the local \"previous\" messages after reconnection\n      console.log(\"connected\");\n      messagesMapRef.current = new Map();\n    },\n    !!subscriptionKey\n  );\n\n  const hasPrevPage = props.queryResult.hasLargerId;\n  const hasNextPage = props.queryResult.hasSmallerId;\n\n  function pageUrl(direction: -1 | 1) {\n    const query = Object.assign({}, props.query);\n    if (direction === -1) {\n      query.minId = submissions[0].id + 1;\n      delete query.maxId;\n    } else {\n      query.maxId = submissions[submissions.length - 1].id - 1;\n      delete query.minId;\n    }\n\n    return {\n      query: Object.fromEntries(Object.entries(query).map(([key, value]) => [key, value.toString()]))\n    };\n  }\n\n  const isWideScreen = useScreenWidthWithin(1024, Infinity);\n  const isMobile = useScreenWidthWithin(0, 768);\n\n  return (\n    <>\n      <Form className={style.queryForm}>\n        <Form.Group inline unstackable>\n          <Form.Input\n            className={style.queryInputProblemId}\n            icon=\"hashtag\"\n            iconPosition=\"left\"\n            placeholder={_(\".query.problem_id\")}\n            value={queryProblemId}\n            onChange={(e, { value }) => setQueryProblemId(value)}\n            onBlur={checkQueryProblemId}\n            error={queryProblemIdError}\n          />\n          <Form.Input\n            className={style.queryInputSubmitter}\n            icon=\"user\"\n            iconPosition=\"left\"\n            placeholder={_(\".query.submitter\")}\n            value={querySubmitter}\n            onChange={(e, { value }) => setQuerySubmitter(value)}\n            onBlur={checkQuerySubmitter}\n            error={querySubmitterError}\n          />\n          <Form.Select\n            className={\n              style.queryInputCodeLanguage + \" \" + style.select + (!queryCodeLanguage ? \" \" + style.selectedAll : \"\")\n            }\n            value={queryCodeLanguage || \"ALL\"}\n            onChange={(e, { value }) => setQueryCodeLanguage(value === \"ALL\" ? null : (value as CodeLanguage))}\n            options={[\n              {\n                key: \"\",\n                value: \"ALL\",\n                text: (\n                  <>\n                    <Icon name=\"code\" />\n                    <span className={style.notInMenu}>{_(\".query.code_language\")}</span>\n                    <span className={style.inMenu}>{_(\".query.code_language_all\")}</span>\n                  </>\n                )\n              },\n              ...Object.keys(compileAndRunOptions).map(language => ({\n                key: language,\n                value: language,\n                text: (\n                  <>\n                    <Icon name=\"code\" />\n                    {_(`code_language.${language}.name`)}\n                  </>\n                )\n              }))\n            ]}\n          />\n          <Form.Select\n            className={style.queryInputStatus + \" \" + style.select + (!queryStatus ? \" \" + style.selectedAll : \"\")}\n            value={queryStatus || \"ALL\"}\n            onChange={(e, { value }) => setQueryStatus(value === \"ALL\" ? null : (value as SubmissionStatus))}\n            options={[\n              {\n                key: \"\",\n                value: \"ALL\",\n                text: (\n                  <>\n                    <Icon name=\"question\" />\n                    <span className={style.notInMenu}>{_(\".query.status\")}</span>\n                    <span className={style.inMenu}>{_(\".query.status_all\")}</span>\n                  </>\n                )\n              },\n              ...Object.values(SubmissionStatus).map(status => ({\n                key: status,\n                value: status,\n                text: <StatusText status={status} />\n              }))\n            ]}\n          />\n          <Button\n            className={style.queryButton + (isWideScreen ? \" labeled icon\" : \"\")}\n            icon=\"search\"\n            content={isWideScreen ? _(\".query.filter\") : null}\n            onClick={() => onFilter(false)}\n          />\n          {appState.currentUser && (\n            <Button\n              className={(isWideScreen ? \"labeled icon \" : \"\") + style.mySubmissions}\n              primary\n              icon=\"user\"\n              content={isWideScreen ? _(\".query.my_submissions\") : null}\n              onClick={() => onFilter(true)}\n            />\n          )}\n        </Form.Group>\n      </Form>\n      {submissions.length === 0 ? (\n        <Segment placeholder>\n          <Header icon>\n            {Object.values(props.query).some(x => x) ? (\n              <>\n                <Icon name=\"search\" />\n                {_(\".empty.message_filtered\")}\n              </>\n            ) : (\n              <>\n                <Icon name=\"file\" />\n                {_(\".empty.message_not_filtered\")}\n              </>\n            )}\n          </Header>\n          <Segment.Inline>\n            <Button primary onClick={() => navigation.goBack()}>\n              {_(\".empty.goback\")}\n            </Button>\n          </Segment.Inline>\n        </Segment>\n      ) : (\n        <>\n          <Table textAlign=\"center\" basic=\"very\" className={style.table} unstackable fixed>\n            {isMobile ? (\n              <Table.Header>\n                <SubmissionHeaderMobile />\n              </Table.Header>\n            ) : (\n              <Table.Header>\n                <SubmissionHeader page=\"submissions\" />\n              </Table.Header>\n            )}\n            <Table.Body>\n              {submissions.map(submission => {\n                let status = null;\n                if (submission.status === \"Pending\") {\n                  switch (submission.progressType) {\n                    case SubmissionProgressType.Preparing:\n                      status = \"Preparing\";\n                      break;\n                    case SubmissionProgressType.Compiling:\n                      status = \"Compiling\";\n                      break;\n                    case SubmissionProgressType.Running:\n                      status = \"Running\";\n                      break;\n                    default:\n                      status = \"Waiting\";\n                  }\n                }\n                return isMobile ? (\n                  <SubmissionItemMobile\n                    key={submission.id}\n                    submission={{\n                      ...submission,\n                      status: status || submission.status\n                    }}\n                  />\n                ) : (\n                  <SubmissionItem\n                    key={submission.id}\n                    submission={{\n                      ...submission,\n                      status: status || submission.status\n                    }}\n                    page=\"submissions\"\n                  />\n                );\n              })}\n            </Table.Body>\n          </Table>\n          {(hasPrevPage || hasNextPage) && (\n            <div className={style.pagination}>\n              <SimplePagination hasPrevPage={hasPrevPage} hasNextPage={hasNextPage} pageUrl={pageUrl} />\n            </div>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nSubmissionsPage = observer(SubmissionsPage);\n\nexport default defineRoute(async request => {\n  const query = normalizeQuery(request.query);\n  const queryResult = await fetchData(query);\n\n  return <SubmissionsPage key={uuid()} query={query} queryResult={queryResult} />;\n});\n"],"sourceRoot":""}