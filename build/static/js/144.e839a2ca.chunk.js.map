{"version":3,"sources":["pages/auth/login/LoginPage.tsx"],"names":["LoginPage","_","useLocalizer","currentRoute","useCurrentRoute","navigation","useNavigationChecked","redirect","navigate","url","query","loginRedirectUrl","navigateTo","useLoginOrRegisterNavigation","useEffect","appState","currentUser","enterNewPage","locale","recaptcha","useRecaptcha","useState","type","message","formError","setFormError","setError","successMessage","setSuccessMessage","setSuccess","usernameOrEmail","setUsernameOrEmail","password","setPassword","pending","setPending","refUsernameInput","useRef","refPasswordInput","migrationNewUsername","setMigrationNewUsername","refNewUsername","useAsyncCallbackPending","a","isValidUsername","toast","error","api","migration","migrateUser","isEmail","requestError","response","handleCommonError","current","refOnMigrationDialogFinish","token","migrationPending","doDialogMigration","migrationDialog","useDialog","size","icon","content","dangerouslySetInnerHTML","__html","iconPosition","placeholder","value","readOnly","onChange","e","disabled","onClick","primary","loading","focus","select","promptAndMigrate","open","Promise","resolve","result","close","tryMigrate","queryUserMigrationInfo","migrated","usernameMustChange","length","auth","login","username","setTimeout","refreshSession","logo","appLogoThemed","className","style","element","wrapper","as","header","withLogo","textAlign","innerRef","field","querySelector","Field","control","Input","pointing","fluid","autoComplete","target","onKeyPress","onEnterPress","tabIndex","inputAction","getCopyrightMessage","recaptchaCopyright","successButton","color","onSubmit","name","observer","route","view"],"mappings":"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","file":"static/js/144.e839a2ca.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { Header, Segment, Message, Input, Button, Form, Icon, Ref } from \"semantic-ui-react\";\nimport { route } from \"navi\";\nimport { useCurrentRoute } from \"react-navi\";\nimport { observer } from \"mobx-react\";\n\nimport style from \"../common.module.less\";\n\nimport { appState } from \"@/appState\";\n\nimport api from \"@/api\";\nimport {\n  useAsyncCallbackPending,\n  useDialog,\n  useLocalizer,\n  useLoginOrRegisterNavigation,\n  useRecaptcha,\n  useNavigationChecked\n} from \"@/utils/hooks\";\nimport { isValidUsername } from \"@/utils/validators\";\nimport toast from \"@/utils/toast\";\nimport { refreshSession } from \"@/initApp\";\nimport PseudoLink from \"@/components/PseudoLink\";\nimport { onEnterPress } from \"@/utils/onEnterPress\";\nimport { isEmail } from \"class-validator\";\n\nlet LoginPage: React.FC = () => {\n  const _ = useLocalizer(\"login\");\n  const currentRoute = useCurrentRoute();\n\n  const navigation = useNavigationChecked();\n  const redirect = () => {\n    navigation.navigate(currentRoute.url.query.loginRedirectUrl || \"/\");\n  };\n\n  const navigateTo = useLoginOrRegisterNavigation();\n\n  useEffect(() => {\n    if (appState.currentUser) redirect();\n  }, []);\n\n  useEffect(() => {\n    appState.enterNewPage(_(\".title\"));\n  }, [appState.locale]);\n\n  const recaptcha = useRecaptcha();\n\n  const [formError, setFormError] = useState<{ type: \"usernameOrEmail\" | \"password\"; message: string }>({\n    type: null,\n    message: null\n  });\n  const setError = (type: \"usernameOrEmail\" | \"password\", message: string) => setFormError({ type, message });\n\n  const [successMessage, setSuccessMessage] = useState<string>(null);\n  const setSuccess = (message: string) => {\n    setError(null, null);\n    setSuccessMessage(message);\n  };\n\n  const [usernameOrEmail, setUsernameOrEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [pending, setPending] = useState(false);\n\n  const refUsernameInput = useRef<HTMLInputElement>();\n  const refPasswordInput = useRef<HTMLInputElement>();\n\n  // These states are only for migration with dialog\n  const [migrationNewUsername, setMigrationNewUsername] = useState(\"\");\n  const refNewUsername = useRef<string>();\n  const [migrationPending, doDialogMigration] = useAsyncCallbackPending(async () => {\n    if (!isValidUsername(migrationNewUsername)) {\n      toast.error(_(\".migration.invalid_username\"));\n      return;\n    }\n\n    const { requestError, response } = await api.migration.migrateUser({\n      [isEmail(usernameOrEmail) ? \"email\" : \"oldUsername\"]: usernameOrEmail,\n      oldPassword: password,\n      newUsername: migrationNewUsername,\n      newPassword: password\n    });\n\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) handleCommonError(response.error);\n    else {\n      refNewUsername.current = migrationNewUsername;\n      setUsernameOrEmail(migrationNewUsername);\n      refOnMigrationDialogFinish.current(response.token);\n    }\n  });\n\n  const migrationDialog = useDialog(\n    {\n      size: \"small\"\n    },\n    <Header icon=\"key\" content={_(\".migration.title\")} />,\n    <>\n      <p>{_(\".migration.message\")}</p>\n      <p dangerouslySetInnerHTML={{ __html: _(\".migration.message_username\") }} />\n      <Input\n        icon=\"user\"\n        iconPosition=\"left\"\n        placeholder={_(\".migration.placeholder\")}\n        value={migrationNewUsername}\n        readOnly={migrationPending}\n        onChange={(e, { value }) => setMigrationNewUsername(value)}\n      />\n    </>,\n    () => (\n      <>\n        <Button\n          disabled={migrationPending}\n          content={_(\".migration.cancel\")}\n          onClick={() => {\n            setMigrationNewUsername(\"\");\n            refOnMigrationDialogFinish.current();\n          }}\n        />\n        <Button\n          primary\n          loading={migrationPending}\n          content={_(\".migration.confirm\")}\n          onClick={() => doDialogMigration()}\n        />\n      </>\n    )\n  );\n\n  function handleCommonError(error: string) {\n    switch (error) {\n      case \"NO_SUCH_USER\":\n        setError(\"usernameOrEmail\", _(\".no_such_user\"));\n        refUsernameInput.current.focus();\n        refUsernameInput.current.select();\n        break;\n      case \"WRONG_PASSWORD\":\n        setError(\"password\", _(\".wrong_password\"));\n        refPasswordInput.current.focus();\n        refPasswordInput.current.select();\n        break;\n      default:\n        toast.error(_(`.errors.${error}`));\n    }\n  }\n\n  let refOnMigrationDialogFinish = useRef<(token?: string) => void>();\n  async function promptAndMigrate() {\n    migrationDialog.open();\n    const result = await new Promise<string>(resolve => (refOnMigrationDialogFinish.current = resolve));\n    migrationDialog.close();\n    return result;\n  }\n\n  async function tryMigrate() {\n    const { requestError, response } = await api.migration.queryUserMigrationInfo({\n      [isEmail(usernameOrEmail) ? \"email\" : \"oldUsername\"]: usernameOrEmail\n    });\n\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) handleCommonError(response.error);\n    else {\n      if (response.migrated) {\n        toast.error(_(\".system_error\"));\n        return;\n      }\n\n      if (response.usernameMustChange) {\n        return await promptAndMigrate();\n      }\n\n      {\n        const { requestError, response } = await api.migration.migrateUser({\n          [isEmail(usernameOrEmail) ? \"email\" : \"oldUsername\"]: usernameOrEmail,\n          oldPassword: password,\n          newPassword: password\n        });\n\n        if (requestError) toast.error(requestError(_));\n        else if (response.error) handleCommonError(response.error);\n        else return response.token;\n      }\n    }\n  }\n\n  async function onSubmit() {\n    if (pending) return;\n    setPending(true);\n\n    if (usernameOrEmail.length === 0) {\n      setError(\"usernameOrEmail\", _(\".empty_username_or_email\"));\n    } else if (usernameOrEmail.length > 80 && !isEmail(usernameOrEmail)) {\n      // A SYZOJ 2 username is allowed to check if a user is not migrated.\n      setError(\"usernameOrEmail\", _(\".invalid_username_or_email\"));\n    } else if (password.length === 0) {\n      setError(\"password\", _(\".empty_password\"));\n    } else {\n      // Send login request\n      const { requestError, response } = await api.auth.login(\n        { [isEmail(usernameOrEmail) ? \"email\" : \"username\"]: usernameOrEmail, password },\n        recaptcha(\"Login\")\n      );\n\n      if (requestError) toast.error(requestError(_));\n      else if (response.error && response.error !== \"USER_NOT_MIGRATED\") handleCommonError(response.error);\n      else {\n        setError(null, null);\n\n        let token = \"\";\n        if (!response.error) token = response.token;\n        if (response.error === \"USER_NOT_MIGRATED\") token = await tryMigrate();\n\n        if (token) {\n          // Login success\n          appState.token = token;\n\n          {\n            setSuccess(_(\".welcome\", { username: refNewUsername.current || response.username }));\n\n            setTimeout(async () => {\n              await refreshSession();\n              redirect();\n            }, 1000);\n          }\n\n          return;\n        }\n      }\n    }\n\n    setPending(false);\n  }\n\n  const logo = appState.appLogoThemed && <img className={style.logo} {...appState.appLogoThemed} />;\n\n  return (\n    <>\n      {migrationDialog.element}\n      <div className={style.wrapper}>\n        <Header as=\"h2\" className={style.header + (logo ? \" \" + style.withLogo : \"\")} textAlign=\"center\">\n          {logo}\n          {_(\".login_to_your_account\")}\n        </Header>\n        <Form size=\"large\">\n          <Segment>\n            <Ref innerRef={field => field && (refUsernameInput.current = field.querySelector(\"input\"))}>\n              <Form.Field\n                control={Input}\n                error={\n                  formError.type === \"usernameOrEmail\" && {\n                    content: formError.message,\n                    pointing: \"left\"\n                  }\n                }\n                fluid\n                icon=\"user\"\n                iconPosition=\"left\"\n                placeholder={_(\".username_or_email\")}\n                value={usernameOrEmail}\n                autoComplete=\"username\"\n                readOnly={pending}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setUsernameOrEmail(e.target.value)}\n                onKeyPress={onEnterPress(() => refPasswordInput.current.focus())}\n              />\n            </Ref>\n            <PseudoLink onClick={() => navigateTo(\"forgot\")} tabIndex={-1} className={style.inputAction}>\n              {_(\".forgot_password\")}\n            </PseudoLink>\n            <Ref innerRef={field => field && (refPasswordInput.current = field.querySelector(\"input\"))}>\n              <Form.Field\n                control={Input}\n                error={\n                  formError.type === \"password\" && {\n                    content: formError.message,\n                    pointing: \"left\"\n                  }\n                }\n                fluid\n                icon=\"lock\"\n                iconPosition=\"left\"\n                placeholder={_(\".password\")}\n                value={password}\n                type=\"password\"\n                autoComplete=\"current-password\"\n                readOnly={pending}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPassword(e.target.value)}\n              />\n            </Ref>\n\n            {recaptcha.getCopyrightMessage(style.recaptchaCopyright)}\n\n            <Button\n              className={successMessage && style.successButton}\n              primary={!successMessage}\n              color={successMessage ? \"green\" : null}\n              fluid\n              size=\"large\"\n              loading={pending && !successMessage}\n              onClick={() => onSubmit()}\n            >\n              {successMessage ? (\n                <>\n                  <Icon name=\"checkmark\" />\n                  {successMessage}\n                </>\n              ) : (\n                _(\".login\")\n              )}\n            </Button>\n          </Segment>\n        </Form>\n        <Message className={style.message}>\n          {_(\".new_user\")}\n          <PseudoLink onClick={() => navigateTo(\"register\")}>{_(\".register\")}</PseudoLink>\n        </Message>\n      </div>\n    </>\n  );\n};\n\nLoginPage = observer(LoginPage);\n\nexport default route({\n  view: <LoginPage />\n});\n"],"sourceRoot":""}