{"version":3,"sources":["pages/problem/view/common/FileChooser.tsx","components/HorizontalScroll.tsx","pages/problem/view/common/TabbedEditor.tsx","pages/problem/view/types/SubmitAnswerProblemView.tsx"],"names":["FileChooser","props","_","useLocalizer","Form","className","style","flexContainer","Header","size","content","Button","disabled","onClick","openUploadDialog","onChange","accept","join","message","observer","HorizontalScroll","useBoundingRect","width","setWidthReferenceElement","height","setHeightReferenceElement","refScrollBarSizeTester","useRef","current","div","document","createElement","overflowY","position","top","left","useState","scrollBarSize","setScrollBarSize","useEffect","onResize","parentNode","body","appendChild","offsetWidth","clientWidth","removeChild","window","addEventListener","removeEventListener","outerWrapper","ref","middleWrapper","innerWrapper","children","TabbedEditor","refOnChangeCallback","refTabStates","tabs","map","tab","i","model","Monaco","createModel","initialContent","language","onDidChangeContent","getValue","viewState","refSetValue","tabIndex","value","setValue","refEditor","currentTabIndex","setCurrentTabIndex","tabbedEditor","tabMenuContainer","Menu","secondary","tabMenu","EmojiRenderer","Item","active","icon","title","index","saveViewState","setModel","restoreViewState","wrapper","editorDidMount","editor","ARCHIVE_FILE_EXTENSIONS","SubmitAnswerProblemSubmitView","wantedFiles","judgeInfo","subtasks","subtask","testcases","testcase","userOutputFilename","outputFile","flat","selectedFiles","setSelectedFiles","selectedIsArchive","length","some","ext","name","toLowerCase","endsWith","selectedWantedFiles","filter","file","includes","Array","fill","editorContents","setEditorContents","editorContentsNotEmpty","s","a","createZipBlob","start","ctrl","forEach","enqueue","close","filename","File","TypeError","refSetEditorValue","clearEditor","SubmitViewFrame","onGetSubmitFile","showSkipSamples","mainContent","EditorWrapper","getFileIcon","newValue","slice","sidebarContent","cancelFiles","PseudoLink","all","valid","submitDisabled","SubmitAnswerProblemViews","Labels","React","memo","SubmitView","getDefaultSubmissionContent","isSubmittable","hasAnySubtaskTestcase","enableStatistics"],"mappings":"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","file":"static/js/158.e5363e8f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button, Form, Header } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\n\nimport style from \"./FileChooser.module.less\";\n\nimport { useLocalizer } from \"@/utils/hooks\";\nimport openUploadDialog from \"@/utils/openUploadDialog\";\n\ninterface FileChooserProps {\n  accept?: string[];\n  disabled?: boolean;\n  single?: boolean;\n  message: React.ReactNode;\n  onChange: (files: File[]) => void;\n}\n\nlet FileChooser: React.FC<FileChooserProps> = props => {\n  const _ = useLocalizer(\"problem\");\n\n  return (\n    <Form>\n      <div className={style.flexContainer}>\n        <Header size=\"small\" content={_(\".submit.upload_files\")} />\n        <Button\n          disabled={props.disabled}\n          onClick={() => openUploadDialog(props.onChange, props.accept.join(\", \"))}\n          content={_(\".submit.choose_files\")}\n        />\n      </div>\n      <div className={style.message}>{props.message}</div>\n    </Form>\n  );\n};\n\nFileChooser = observer(FileChooser);\n\nexport default FileChooser;\n","import React, { useEffect, useRef, useState } from \"react\";\n\nimport style from \"./HorizontalScroll.module.less\";\nimport { useBoundingRect } from \"@/utils/hooks\";\n\ninterface HorizontalScrollProps {\n  className?: string;\n}\n\nconst HorizontalScroll: React.FC<HorizontalScrollProps> = props => {\n  const [width, setWidthReferenceElement] = useBoundingRect(\"width\");\n  const [height, setHeightReferenceElement] = useBoundingRect(\"height\");\n\n  const refScrollBarSizeTester = useRef<HTMLDivElement>();\n  if (!refScrollBarSizeTester.current) {\n    const div = document.createElement(\"div\");\n    div.style.overflowY = \"scroll\";\n    div.style.width = div.style.height = \"100px\";\n    div.style.position = \"fixed\";\n    div.style.top = div.style.left = \"-1000px\";\n    refScrollBarSizeTester.current = div;\n  }\n\n  const [scrollBarSize, setScrollBarSize] = useState(0);\n  useEffect(() => {\n    function onResize() {\n      const div = refScrollBarSizeTester.current;\n      if (div.parentNode) return;\n\n      document.body.appendChild(div);\n      setScrollBarSize(div.offsetWidth - div.clientWidth);\n      document.body.removeChild(div);\n    }\n\n    onResize();\n    window.addEventListener(\"resize\", onResize);\n    return () => window.removeEventListener(\"resize\", onResize);\n  });\n\n  return (\n    <div\n      className={style.outerWrapper + (props.className ? \" \" + props.className : \"\")}\n      ref={setWidthReferenceElement}\n      style={{ height: height }}\n    >\n      <div\n        className={style.middleWrapper}\n        style={{ width: height + scrollBarSize, height: width, top: -scrollBarSize }}\n      >\n        <div className={style.innerWrapper} ref={setHeightReferenceElement}>\n          {props.children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HorizontalScroll;\n","import React, { useRef, useState } from \"react\";\nimport { Menu } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\nimport * as Monaco from \"monaco-editor\";\n\nimport style from \"./TabbedEditor.module.less\";\n\nimport { useLocalizer } from \"@/utils/hooks\";\nimport CodeEditor from \"@/components/LazyCodeEditor\";\nimport HorizontalScroll from \"@/components/HorizontalScroll\";\nimport { EmojiRenderer } from \"@/components/EmojiRenderer\";\n\ninterface TabbedEditorTab {\n  title: string;\n  icon: string;\n  language: string;\n  initialContent: string;\n}\n\ninterface TabbedEditorProps {\n  tabs: TabbedEditorTab[];\n  refSetValue?: React.MutableRefObject<(tabIndex: number, value: string) => void>;\n  onChange: (tabIndex: number, value: string) => void;\n}\n\nlet TabbedEditor: React.FC<TabbedEditorProps> = props => {\n  const _ = useLocalizer(\"problem\");\n\n  // Without a ref wrapper, props.onChange() will call the outdated old callback function\n  // which is binded with the outdated states of the parent component\n  const refOnChangeCallback = useRef<typeof props.onChange>();\n  refOnChangeCallback.current = props.onChange;\n\n  const refTabStates = useRef<\n    {\n      model: Monaco.editor.ITextModel;\n      viewState: Monaco.editor.ICodeEditorViewState;\n    }[]\n  >(\n    props.tabs.map((tab, i) => {\n      const model = Monaco.editor.createModel(tab.initialContent, tab.language);\n      model.onDidChangeContent(() => refOnChangeCallback.current(i, model.getValue()));\n      return {\n        model,\n        viewState: null\n      };\n    })\n  );\n\n  if (props.refSetValue)\n    props.refSetValue.current = (tabIndex: number, value: string) =>\n      refTabStates.current[tabIndex].model.setValue(value);\n\n  const refEditor = useRef<Monaco.editor.IStandaloneCodeEditor>();\n\n  function editorDidMount(editor: Monaco.editor.IStandaloneCodeEditor) {\n    refEditor.current = editor;\n    editor.setModel(refTabStates.current[0]?.model);\n  }\n\n  const [currentTabIndex, setCurrentTabIndex] = useState(0);\n\n  function onChangeTab(index: number) {\n    if (index === currentTabIndex) return;\n\n    refTabStates.current[currentTabIndex].viewState = refEditor.current.saveViewState();\n    refEditor.current.setModel(refTabStates.current[index].model);\n    refEditor.current.restoreViewState(refTabStates.current[index].viewState);\n\n    setCurrentTabIndex(index);\n  }\n\n  return (\n    <div className={style.tabbedEditor}>\n      <HorizontalScroll className={style.tabMenuContainer}>\n        <Menu secondary className={style.tabMenu}>\n          {props.tabs.map((tab, i) => (\n            <EmojiRenderer key={i}>\n              <Menu.Item\n                active={currentTabIndex === i}\n                icon={tab.icon}\n                content={tab.title}\n                onClick={() => onChangeTab(i)}\n              />\n            </EmojiRenderer>\n          ))}\n        </Menu>\n      </HorizontalScroll>\n      <div className={style.wrapper}>\n        <CodeEditor editorDidMount={editorDidMount} value={null} language={null} />\n      </div>\n    </div>\n  );\n};\n\nTabbedEditor = observer(TabbedEditor);\n\nexport default TabbedEditor;\n","import React, { useRef, useState } from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport { useLocalizer } from \"@/utils/hooks\";\nimport { CodeLanguage } from \"@/interfaces/CodeLanguage\";\nimport getFileIcon from \"@/utils/getFileIcon\";\n\nimport { JudgeInfoSubmitAnswer } from \"../../judge-settings/types/SubmitAnswerProblemEditor\";\nimport { ProblemTypeLabelsProps, ProblemTypeSubmitViewProps, ProblemTypeView } from \"../common/interface\";\nimport SubmitViewFrame from \"../common/SubmitViewFrame\";\nimport FileChooser from \"../common/FileChooser\";\nimport TabbedEditor from \"../common/TabbedEditor\";\nimport PseudoLink from \"@/components/PseudoLink\";\nimport { createZipBlob } from \"@/utils/zip\";\nimport { hasAnySubtaskTestcase } from \"../common\";\n\ntype SubmitAnswerProblemLabelsProps = ProblemTypeLabelsProps<JudgeInfoSubmitAnswer>;\n\nconst ARCHIVE_FILE_EXTENSIONS = [\".zip\"];\n\nconst SubmitAnswerProblemLabels: React.FC<SubmitAnswerProblemLabelsProps> = React.memo(props => {\n  const _ = useLocalizer(\"problem\");\n\n  return <></>;\n});\n\ninterface SubmissionContent {\n  language: CodeLanguage;\n  code: string;\n  compileAndRunOptions: any;\n  skipSamples?: boolean;\n}\n\ntype SubmitAnswerProblemSubmitViewProps = ProblemTypeSubmitViewProps<JudgeInfoSubmitAnswer, SubmissionContent>;\n\nlet SubmitAnswerProblemSubmitView: React.FC<SubmitAnswerProblemSubmitViewProps> = props => {\n  const _ = useLocalizer(\"problem\");\n\n  const wantedFiles = props.judgeInfo.subtasks\n    .map(subtask => subtask.testcases.map(testcase => testcase.userOutputFilename || testcase.outputFile))\n    .flat();\n\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const selectedIsArchive =\n    selectedFiles.length === 1 &&\n    ARCHIVE_FILE_EXTENSIONS.some(ext => selectedFiles[0].name.toLowerCase().endsWith(ext));\n  const selectedWantedFiles = selectedFiles.filter(file => wantedFiles.includes(file.name));\n\n  const [editorContents, setEditorContents] = useState<string[]>(Array(wantedFiles.length).fill(\"\"));\n\n  // If the editor contents are not empty, and user choose some files, warn the user the editor contents will not be submitted.\n  const editorContentsNotEmpty = editorContents.some(s => s);\n\n  async function onGetSubmitFile(): Promise<Blob> {\n    if (selectedIsArchive) return selectedFiles[0];\n    else if (selectedWantedFiles.length > 0)\n      return await createZipBlob({\n        start(ctrl) {\n          selectedWantedFiles.forEach(file => ctrl.enqueue(file));\n          ctrl.close();\n        }\n      });\n    else if (editorContentsNotEmpty)\n      return await createZipBlob({\n        start(ctrl) {\n          wantedFiles.forEach((filename, i) => ctrl.enqueue(new File([editorContents[i]], filename)));\n          ctrl.close();\n        }\n      });\n    else throw new TypeError(\"This should not happen.\");\n  }\n\n  const refSetEditorValue = useRef<(tabIndex: number, value: string) => void>();\n  function clearEditor() {\n    wantedFiles.map((file, i) => refSetEditorValue.current(i, \"\"));\n  }\n\n  return (\n    <>\n      <SubmitViewFrame\n        {...props}\n        onGetSubmitFile={onGetSubmitFile}\n        showSkipSamples={false}\n        mainContent={\n          <SubmitViewFrame.EditorWrapper disabled={selectedFiles.length > 0}>\n            <TabbedEditor\n              tabs={wantedFiles.map(filename => ({\n                title: filename,\n                icon: getFileIcon(filename),\n                language: null,\n                initialContent: \"\"\n              }))}\n              refSetValue={refSetEditorValue}\n              onChange={(i, newValue) => {\n                const a = editorContents.slice(0);\n                a[i] = newValue;\n                setEditorContents(a);\n              }}\n            />\n          </SubmitViewFrame.EditorWrapper>\n        }\n        sidebarContent={\n          <>\n            <FileChooser\n              accept={wantedFiles}\n              disabled={editorContentsNotEmpty}\n              message={(() => {\n                const cancelFiles = (\n                  <PseudoLink onClick={() => setSelectedFiles([])}>{_(\".submit.cancel_select_files\")}</PseudoLink>\n                );\n                if (selectedIsArchive)\n                  return (\n                    <>\n                      {_(\".submit.selected_archive\")}\n                      {cancelFiles}\n                    </>\n                  );\n                if (selectedFiles.length > 0 && selectedFiles.length !== selectedWantedFiles.length)\n                  return (\n                    <>\n                      {_(\".submit.selected_valid_files\", {\n                        all: selectedFiles.length,\n                        valid: selectedWantedFiles.length\n                      })}\n                      {cancelFiles}\n                    </>\n                  );\n                if (selectedFiles.length > 0)\n                  return (\n                    <>\n                      {_(\".submit.selected_files\", { all: selectedFiles.length })}\n                      {cancelFiles}\n                    </>\n                  );\n                if (editorContentsNotEmpty)\n                  return (\n                    <>\n                      {_(\".submit.clear_editor_to_use_upload_left\")}\n                      <PseudoLink onClick={clearEditor}>{_(\".submit.clear_editor\")}</PseudoLink>\n                      {_(\".submit.clear_editor_to_use_upload_right\")}\n                    </>\n                  );\n                return _(\".submit.fill_in_editor_or_upload_file\");\n              })()}\n              onChange={setSelectedFiles}\n            />\n          </>\n        }\n        submitDisabled={!(selectedIsArchive || selectedWantedFiles.length > 0 || editorContentsNotEmpty)}\n      />\n    </>\n  );\n};\n\nSubmitAnswerProblemSubmitView = observer(SubmitAnswerProblemSubmitView);\n\nconst SubmitAnswerProblemViews: ProblemTypeView<JudgeInfoSubmitAnswer> = {\n  Labels: SubmitAnswerProblemLabels,\n  SubmitView: SubmitAnswerProblemSubmitView,\n  getDefaultSubmissionContent: () => ({}),\n  isSubmittable: hasAnySubtaskTestcase,\n  enableStatistics: () => false\n};\n\nexport default SubmitAnswerProblemViews;\n"],"sourceRoot":""}