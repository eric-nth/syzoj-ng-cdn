{"version":3,"sources":["pages/problem/view/common/SubmitViewFrame.tsx","pages/problem/view/common/index.ts"],"names":["SubmitViewFrame","props","_","useLocalizer","className","style","submitView","display","inSubmitView","leftContainer","mainContent","rightContainer","pointing","secondary","vertical","actionMenu","Item","name","icon","onClick","onCloseSubmitView","sidebarContent","showSkipSamples","skipSamples","label","checked","submissionContent","onChange","e","onUpdateSubmissionContent","submitButton","primary","fluid","loading","pendingSubmit","disabled","submitDisabled","content","onSubmit","onGetSubmitFile","lastSubmission","size","href","id","status","scoreText","score","observer","Object","assign","EditorWrapper","editorWrapper","children","getLimit","judgeInfo","limit","isValidLimit","x","Number","isSafeInteger","taskLimit","Infinity","min","max","subtasks","subtask","subtaskLimit","testcases","testcase","Math","isFinite","toString","hasAnySubtaskTestcase","Array","isArray","some","length"],"mappings":"kOA0BIA,EAAkD,SAAAC,GACpD,IAAMC,EAAIC,YAAa,WAEvB,OACE,sBAAKC,UAAWC,IAAMC,WAAYD,MAAO,CAAEE,QAASN,EAAMO,aAAe,KAAO,QAAhF,UACE,qBAAKJ,UAAWC,IAAMI,cAAtB,SAAsCR,EAAMS,cAC5C,sBAAKN,UAAWC,IAAMM,eAAtB,UACE,eAAC,IAAD,CAAMC,UAAQ,EAACC,WAAS,EAACC,UAAQ,EAACV,UAAWC,IAAMU,WAAnD,UACE,cAAC,IAAKC,KAAN,CAAWC,KAAMf,EAAE,6BAA8BgB,KAAK,aAAaC,QAASlB,EAAMmB,oBAClF,2BAEDnB,EAAMoB,eACNpB,EAAMqB,iBACL,cAAC,IAAD,CACElB,UAAWC,IAAMkB,YACjBC,MAAOtB,EAAE,wBACTuB,QAAUxB,EAAMyB,kBAA0BH,YAC1CI,SAAU,SAACC,EAAD,OAAMH,EAAN,EAAMA,QAAN,OAAoBxB,EAAM4B,0BAA0B,cAAeJ,MAGjF,cAAC,IAAD,CACErB,UAAWC,IAAMyB,aACjBC,SAAO,EACPC,OAAK,EACLd,KAAK,cACLe,QAAShC,EAAMiC,cACfC,SAAUlC,EAAMmC,eAChBC,QAASnC,EAAE,kBACXiB,QAAS,kBAAMlB,EAAMqC,SAASrC,EAAMsC,oBAErCtC,EAAMuC,gBAAkBvC,EAAMuC,eAAeA,gBAC5C,sBAAKpC,UAAWC,IAAMmC,eAAtB,UACE,cAAC,IAAD,CAAQC,KAAK,OAAOJ,QAASnC,EAAE,6BAC/B,cAAC,IAAD,CAAMwC,KAAI,aAAQzC,EAAMuC,eAAeA,eAAeG,IAAtD,SACE,cAAC,IAAD,CAAYC,OAAQ3C,EAAMuC,eAAeA,eAAeI,WAE1D,cAAC,IAAD,CAAMxC,UAAWC,IAAMwC,UAAWH,KAAI,aAAQzC,EAAMuC,eAAeA,eAAeG,IAAlF,SACE,cAAC,IAAD,CAAWG,MAAO7C,EAAMuC,eAAeA,eAAeM,OAAS,gBAS7E9C,EAAkB+C,YAAS/C,GAUZgD,WAAOC,OAAOjD,EAAiB,CAC5CkD,cALkD,SAAAjD,GAClD,OAAO,qBAAKG,UAAWC,IAAM8C,eAAiBlD,EAAMkC,SAAW,IAAM9B,IAAM8B,SAAW,IAA/E,SAAqFlC,EAAMmD,e,kHC/E7F,SAASC,EAASC,EAAgBC,GACvC,IAD2E,EACrEC,EAAe,SAACC,GAAD,OAAYC,OAAOC,cAAcF,IAAMA,GAAK,GAE3DG,EAAYJ,EAAaF,EAAUC,IAAUD,EAAUC,GAASM,IAElEC,EAAMD,IACRE,GAAOF,IANkE,cAOrDP,EAAUU,UAAY,IAP+B,IAO3E,2BAAgD,CAAC,IAAD,EAArCC,EAAqC,QACxCC,EAAeV,EAAaS,EAAQV,IAAUU,EAAQV,GAASK,EADvB,cAEvBK,EAAQE,WAAa,IAFE,IAE9C,2BAAgD,CAAC,IAAtCC,EAAqC,QACxCX,EAAID,EAAaY,EAASb,IAAUa,EAASb,GAASW,EAClD,IAANT,IAEJK,EAAMO,KAAKP,IAAIA,EAAKL,GACpBM,EAAMM,KAAKN,IAAIA,EAAKN,KAPwB,gCAP2B,8BAkB3E,OAAKC,OAAOY,SAASR,GAEjBA,IAAQC,EAAYD,EAAIS,WACrBT,EAAM,MAAQC,EAHa,KAM7B,SAASS,EAAsBlB,GACpC,OACEmB,MAAMC,QAAN,OAAcpB,QAAd,IAAcA,OAAd,EAAcA,EAAWU,WACzBV,EAAUU,SAASW,MAAK,SAAAV,GAAO,OAAIQ,MAAMC,QAAN,OAAcT,QAAd,IAAcA,OAAd,EAAcA,EAASE,aAAqB,OAAPF,QAAO,IAAPA,OAAA,EAAAA,EAASE,UAAUS,QAAS","file":"static/js/76.f9ccbd78.chunk.js","sourcesContent":["import React from \"react\";\nimport { Header, Menu, Button, Checkbox } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\n\nimport style from \"./SubmitViewFrame.module.less\";\n\nimport { useLocalizer, Link } from \"@/utils/hooks\";\nimport StatusText from \"@/components/StatusText\";\nimport ScoreText from \"@/components/ScoreText\";\n\ninterface SubmitViewFrameProps {\n  showSkipSamples: boolean;\n  mainContent: React.ReactNode;\n  sidebarContent: React.ReactNode;\n  submitDisabled: boolean;\n  onGetSubmitFile?: () => Promise<Blob>;\n\n  inSubmitView: boolean;\n  pendingSubmit: boolean;\n  lastSubmission: ApiTypes.ProblemLastSubmissionDto;\n  submissionContent: unknown;\n  onCloseSubmitView: () => void;\n  onUpdateSubmissionContent: (path: string, value: unknown) => void;\n  onSubmit: (onGetSubmitFile?: () => Promise<Blob>) => void;\n}\n\nlet SubmitViewFrame: React.FC<SubmitViewFrameProps> = props => {\n  const _ = useLocalizer(\"problem\");\n\n  return (\n    <div className={style.submitView} style={{ display: props.inSubmitView ? null : \"none\" }}>\n      <div className={style.leftContainer}>{props.mainContent}</div>\n      <div className={style.rightContainer}>\n        <Menu pointing secondary vertical className={style.actionMenu}>\n          <Menu.Item name={_(\".submit.back_to_statement\")} icon=\"arrow left\" onClick={props.onCloseSubmitView} />\n          <div />\n        </Menu>\n        {props.sidebarContent}\n        {props.showSkipSamples && (\n          <Checkbox\n            className={style.skipSamples}\n            label={_(\".submit.skip_samples\")}\n            checked={(props.submissionContent as any).skipSamples}\n            onChange={(e, { checked }) => props.onUpdateSubmissionContent(\"skipSamples\", checked)}\n          />\n        )}\n        <Button\n          className={style.submitButton}\n          primary\n          fluid\n          icon=\"paper plane\"\n          loading={props.pendingSubmit}\n          disabled={props.submitDisabled}\n          content={_(\".submit.submit\")}\n          onClick={() => props.onSubmit(props.onGetSubmitFile)}\n        />\n        {props.lastSubmission && props.lastSubmission.lastSubmission && (\n          <div className={style.lastSubmission}>\n            <Header size=\"tiny\" content={_(\".submit.last_submission\")} />\n            <Link href={`/s/${props.lastSubmission.lastSubmission.id}`}>\n              <StatusText status={props.lastSubmission.lastSubmission.status} />\n            </Link>\n            <Link className={style.scoreText} href={`/s/${props.lastSubmission.lastSubmission.id}`}>\n              <ScoreText score={props.lastSubmission.lastSubmission.score || 0} />\n            </Link>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nSubmitViewFrame = observer(SubmitViewFrame);\n\ninterface EditorWrapperProps {\n  disabled?: boolean;\n}\n\nconst EditorWrapper: React.FC<EditorWrapperProps> = props => {\n  return <div className={style.editorWrapper + (props.disabled ? \" \" + style.disabled : \"\")}>{props.children}</div>;\n};\n\nexport default Object.assign(SubmitViewFrame, {\n  EditorWrapper\n});\n","export function getLimit(judgeInfo: any, limit: \"timeLimit\" | \"memoryLimit\") {\n  const isValidLimit = (x: any) => Number.isSafeInteger(x) && x >= 0;\n\n  const taskLimit = isValidLimit(judgeInfo[limit]) ? judgeInfo[limit] : Infinity;\n\n  let min = Infinity,\n    max = -Infinity;\n  for (const subtask of judgeInfo.subtasks || []) {\n    const subtaskLimit = isValidLimit(subtask[limit]) ? subtask[limit] : taskLimit;\n    for (const testcase of subtask.testcases || []) {\n      const x = isValidLimit(testcase[limit]) ? testcase[limit] : subtaskLimit;\n      if (x === 0) continue;\n\n      min = Math.min(min, x);\n      max = Math.max(max, x);\n    }\n  }\n\n  if (!Number.isFinite(min)) return null;\n\n  if (min === max) return min.toString();\n  return min + \" - \" + max;\n}\n\nexport function hasAnySubtaskTestcase(judgeInfo: any) {\n  return (\n    Array.isArray(judgeInfo?.subtasks) &&\n    judgeInfo.subtasks.some(subtask => Array.isArray(subtask?.testcases) && subtask?.testcases.length > 0)\n  );\n}\n"],"sourceRoot":""}