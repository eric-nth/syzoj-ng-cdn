{"version":3,"sources":["../node_modules/autotrack/lib/plugins/event-tracker.js"],"names":["EventTracker","tracker","opts","trackUsage","plugins","EVENT_TRACKER","window","addEventListener","this","assign","events","fieldsObj","attributePrefix","handleEvents","bind","selector","delegates","forEach","event","delegate","document","composed","useCapture","element","prefix","getAttribute","split","indexOf","type","attributeFields","getAttributeFields","userFields","hitType","send","createFieldsObj","transport","hitFilter","Object","keys","key","destroy","provide"],"mappings":"sLA2BMA,E,WAMJ,WAAYC,EAASC,GAAM,WAIzB,GAJyB,oBACzBC,YAAWF,EAASG,IAAQC,eAGvBC,OAAOC,iBAAZ,CAUAC,KAAKN,KAAwCO,YAPzB,CAClBC,OAAQ,CAAC,SACTC,UAAW,GACXC,gBAAiB,OAI8CV,GAEjEM,KAAKP,QAAUA,EAGfO,KAAKK,aAAeL,KAAKK,aAAaC,KAAKN,MAE3C,IAAMO,EAAW,IAAMP,KAAKN,KAAKU,gBAAkB,MAGnDJ,KAAKQ,UAAY,GACjBR,KAAKN,KAAKQ,OAAOO,SAAQ,SAACC,GACxB,EAAKF,UAAUE,GAASC,YAASC,SAAUF,EAAOH,EAC9C,EAAKF,aAAc,CAACQ,UAAU,EAAMC,YAAY,Q,yDAS3CJ,EAAOK,GAClB,IAAMC,EAAShB,KAAKN,KAAKU,gBAIzB,KAHeW,EAAQE,aAAaD,EAAS,MAAME,MAAM,WAG9CC,QAAQT,EAAMU,MAAQ,GAAjC,CAGA,IACMC,EAAkBC,YAAmBP,EAASC,GAC9CO,EAAatB,YAAO,GAAID,KAAKN,KAAKS,UAAWkB,GAC7CG,EAAUH,EAAgBG,SAAW,QAE3CxB,KAAKP,QAAQgC,KAAKD,EAASE,YALL,CAACC,UAAW,UAM9BJ,EAAYvB,KAAKP,QAASO,KAAKN,KAAKkC,UAAWb,EAASL,O,+BAMrD,WACPmB,OAAOC,KAAK9B,KAAKQ,WAAWC,SAAQ,SAACsB,GACnC,EAAKvB,UAAUuB,GAAKC,iB,KAM1BC,YAAQ,eAAgBzC","file":"static/js/175.536f4df3.chunk.js","sourcesContent":["/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {delegate} from 'dom-utils';\nimport provide from '../provide';\nimport {plugins, trackUsage} from '../usage';\nimport {assign, createFieldsObj, getAttributeFields} from '../utilities';\n\n\n/**\n * Class for the `eventTracker` analytics.js plugin.\n * @implements {EventTrackerPublicInterface}\n */\nclass EventTracker {\n  /**\n   * Registers declarative event tracking.\n   * @param {!Tracker} tracker Passed internally by analytics.js\n   * @param {?EventTrackerOpts} opts Passed by the require command.\n   */\n  constructor(tracker, opts) {\n    trackUsage(tracker, plugins.EVENT_TRACKER);\n\n    // Feature detects to prevent errors in unsupporting browsers.\n    if (!window.addEventListener) return;\n\n    /** @type {EventTrackerOpts} */\n    const defaultOpts = {\n      events: ['click'],\n      fieldsObj: {},\n      attributePrefix: 'ga-',\n      // hitFilter: undefined,\n    };\n\n    this.opts = /** @type {EventTrackerOpts} */ (assign(defaultOpts, opts));\n\n    this.tracker = tracker;\n\n    // Binds methods.\n    this.handleEvents = this.handleEvents.bind(this);\n\n    const selector = '[' + this.opts.attributePrefix + 'on]';\n\n    // Creates a mapping of events to their delegates\n    this.delegates = {};\n    this.opts.events.forEach((event) => {\n      this.delegates[event] = delegate(document, event, selector,\n          this.handleEvents, {composed: true, useCapture: true});\n    });\n  }\n\n  /**\n   * Handles all events on elements with event attributes.\n   * @param {Event} event The DOM click event.\n   * @param {Element} element The delegated DOM element target.\n   */\n  handleEvents(event, element) {\n    const prefix = this.opts.attributePrefix;\n    const events = element.getAttribute(prefix + 'on').split(/\\s*,\\s*/);\n\n    // Ensures the type matches one of the events specified on the element.\n    if (events.indexOf(event.type) < 0) return;\n\n    /** @type {FieldsObj} */\n    const defaultFields = {transport: 'beacon'};\n    const attributeFields = getAttributeFields(element, prefix);\n    const userFields = assign({}, this.opts.fieldsObj, attributeFields);\n    const hitType = attributeFields.hitType || 'event';\n\n    this.tracker.send(hitType, createFieldsObj(defaultFields,\n        userFields, this.tracker, this.opts.hitFilter, element, event));\n  }\n\n  /**\n   * Removes all event listeners and instance properties.\n   */\n  remove() {\n    Object.keys(this.delegates).forEach((key) => {\n      this.delegates[key].destroy();\n    });\n  }\n}\n\n\nprovide('eventTracker', EventTracker);\n"],"sourceRoot":""}