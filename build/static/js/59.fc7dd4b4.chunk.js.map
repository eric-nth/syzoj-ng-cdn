{"version":3,"sources":["pages/discussion/discussions/DiscussionsPage.tsx","components/DiscussionSearch.tsx"],"names":["getNewDiscussionUrl","problemId","pathname","query","String","getBreadcrumb","problem","_","inTopLevelList","extra","className","style","breadcrumb","Section","Divider","icon","active","switch","divider","href","as","Link","allProblemsLink","getProblemUrl","meta","getProblemDisplayName","title","DISCUSSIONS_PER_PAGE","appState","serverPreference","pagination","discussions","generateRequestFromSearchQuery","searchQuery","currentPage","requestBody","locale","skipCount","takeCount","keyword","publisherId","nonpublic","fetchData","a","api","discussion","queryDiscussions","requestError","response","RouteError","showRefresh","showBack","error","makeToBeLocalizedText","generateSearchQuery","substr","toString","DiscussionsPage","props","useLocalizer","useEffect","enterNewPage","navigation","useNavigationChecked","isMobileOrPad","useScreenWidthWithin","isVeryNarrowScreen","allProblems","useState","searchMode","setSearchMode","redirectWithFilter","filter","navigate","Object","assign","onAddFilterNonpublic","permissions","filterNonpublic","currentUser","id","headerSearch","queryParameters","onResultSelect","getDiscussionUrl","onEnterPress","searchKeyword","onAddFilterKeyword","search","user","searchMenu","secondary","Item","searchMenuItem","onClick","filtersApplied","filterPublisher","headerSearchFilters","size","color","name","username","basic","headerButtons","createDiscussion","primary","content","filterProblem","hideProblemColumn","headerRow","headerSearchFiltersRow","headerRightControls","length","placeholder","Inline","goBack","textAlign","unstackable","Header","Row","tableHeaderRow","HeaderCell","twoRow","width","nowrapRow","Body","map","row","columnTitle","getDiscussionDisplayTitle","isPublic","labelNonPublic","columnProblem","columnPublisher","publisher","Cell","formatDateTime","sortTime","replyCount","count","totalCount","itemsPerPage","pageUrl","page","observer","defineRoute","request","parseInt","Number","isSafeInteger","uuid","SEARCH_DISCUSSION_PREVIEW_LIST_LENGTH","searchDiscussionsPreview","DiscussionSearch","noResultsMessage","onGetResultKey","result","onSearch","input","titleOnly","toast","onRenderResult"],"mappings":"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","file":"static/js/59.fc7dd4b4.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Breadcrumb, Button, Header, Icon, Label, Menu, Segment, Table } from \"semantic-ui-react\";\nimport { URLDescriptor } from \"navi\";\nimport { observer } from \"mobx-react\";\nimport { v4 as uuid } from \"uuid\";\n\nimport style from \"./DiscussionsPage.module.less\";\n\nimport { defineRoute, RouteError } from \"@/AppRouter\";\nimport { appState } from \"@/appState\";\nimport api from \"@/api\";\nimport { useLocalizer, useScreenWidthWithin, useNavigationChecked, Link } from \"@/utils/hooks\";\nimport UserSearch from \"@/components/UserSearch\";\nimport { Pagination } from \"@/components/Pagination\";\nimport { getDiscussionDisplayTitle, getDiscussionUrl } from \"../utils\";\nimport { getProblemDisplayName, getProblemUrl } from \"@/pages/problem/utils\";\nimport UserLink from \"@/components/UserLink\";\nimport formatDateTime from \"@/utils/formatDateTime\";\nimport { Localizer, makeToBeLocalizedText } from \"@/locales\";\nimport { EmojiRenderer } from \"@/components/EmojiRenderer\";\nimport { DiscussionSearch } from \"@/components/DiscussionSearch\";\n\nexport function getNewDiscussionUrl(problemId: number): Partial<URLDescriptor> {\n  return {\n    pathname: \"/d/new\",\n    query: problemId && {\n      problemId: String(problemId)\n    }\n  };\n}\n\nexport function getBreadcrumb(\n  problem: { meta: ApiTypes.ProblemMetaDto; title: string },\n  _: Localizer,\n  inTopLevelList?: \"general\" | \"allProblems\",\n  extra?: React.ReactNode\n) {\n  return (\n    <Breadcrumb className={style.breadcrumb}>\n      <Breadcrumb.Section>{_(\"discussions.breadcrumb.discussion\")}</Breadcrumb.Section>\n      <Breadcrumb.Divider icon=\"right angle\" />\n      {inTopLevelList ? (\n        <>\n          <Breadcrumb.Section active className={style.switch}>\n            {inTopLevelList === \"general\" ? _(\"discussions.breadcrumb.general\") : _(\"discussions.breadcrumb.problem\")}\n            <span className={style.divider}>/</span>\n            {inTopLevelList === \"allProblems\" ? (\n              <Link href=\"/d\">{_(\"discussions.breadcrumb.general\")}</Link>\n            ) : (\n              <Link href={{ pathname: \"/d\", query: { problemId: \"all\" } }}>{_(\"discussions.breadcrumb.problem\")}</Link>\n            )}\n          </Breadcrumb.Section>\n        </>\n      ) : problem ? (\n        <>\n          <Breadcrumb.Section\n            active\n            as={Link}\n            href={({ pathname: \"/d\", query: { problemId: \"all\" } } as unknown) as string}\n            className={style.allProblemsLink}\n          >\n            {_(\"discussions.breadcrumb.problem\")}\n          </Breadcrumb.Section>\n          <Breadcrumb.Divider icon=\"right angle\" />\n          <EmojiRenderer>\n            <Breadcrumb.Section active as={Link} href={getProblemUrl(problem.meta)}>\n              {getProblemDisplayName(problem.meta, problem.title, _, \"all\")}\n            </Breadcrumb.Section>\n          </EmojiRenderer>\n        </>\n      ) : (\n        <>\n          <Breadcrumb.Section active as={Link} href=\"/d\">\n            {_(\"discussions.breadcrumb.general\")}\n          </Breadcrumb.Section>\n        </>\n      )}\n      {extra}\n    </Breadcrumb>\n  );\n}\n\n// Parsed from querystring, without pagination\ninterface DiscussionsPageSearchQuery {\n  keyword: string;\n  problemId: number;\n  publisherId: number;\n  nonpublic: boolean;\n}\n\nconst DISCUSSIONS_PER_PAGE = appState.serverPreference.pagination.discussions;\n\nfunction generateRequestFromSearchQuery(\n  searchQuery: DiscussionsPageSearchQuery,\n  currentPage = 1\n): ApiTypes.QueryDiscussionsRequestDto {\n  const requestBody: ApiTypes.QueryDiscussionsRequestDto = {\n    locale: appState.locale,\n    skipCount: DISCUSSIONS_PER_PAGE * (currentPage - 1),\n    takeCount: DISCUSSIONS_PER_PAGE\n  };\n  if (searchQuery.keyword) requestBody.keyword = searchQuery.keyword;\n  if (searchQuery.problemId) requestBody.problemId = searchQuery.problemId;\n  if (searchQuery.publisherId) requestBody.publisherId = searchQuery.publisherId;\n  if (searchQuery.nonpublic) requestBody.nonpublic = true;\n\n  return requestBody;\n}\n\nasync function fetchData(\n  searchQuery: DiscussionsPageSearchQuery,\n  currentPage: number\n): Promise<ApiTypes.QueryDiscussionsResponseDto> {\n  const { requestError, response } = await api.discussion.queryDiscussions(\n    generateRequestFromSearchQuery(searchQuery, currentPage)\n  );\n\n  if (requestError) throw new RouteError(requestError, { showRefresh: true, showBack: true });\n  else if (response.error) throw new RouteError(makeToBeLocalizedText(`discussions.error.${response.error}`));\n\n  return response;\n}\n\nfunction parseSearchQuery(query: Record<string, string>): DiscussionsPageSearchQuery {\n  const searchQuery: DiscussionsPageSearchQuery = {\n    keyword: query[\"keyword\"] || \"\",\n    problemId:\n      query[\"problemId\"] === \"all\"\n        ? -1\n        : Number.isSafeInteger(Number(query[\"problemId\"]))\n        ? Number(query[\"problemId\"])\n        : null,\n    publisherId: Number.isSafeInteger(Number(query[\"publisherId\"])) ? Number(query[\"publisherId\"]) : null,\n    nonpublic: query[\"nonpublic\"] != null\n  };\n  return searchQuery;\n}\n\nfunction generateSearchQuery(searchQuery: DiscussionsPageSearchQuery): Record<string, string> {\n  const query: Record<string, string> = {};\n  if (searchQuery.keyword) query.keyword = searchQuery.keyword.substr(0, 100);\n  if (searchQuery.problemId) query.problemId = searchQuery.problemId.toString();\n  if (searchQuery.publisherId) query.publisherId = searchQuery.publisherId.toString();\n  if (searchQuery.nonpublic) query.nonpublic = \"\";\n  return query;\n}\n\ninterface DiscussionsPageProps {\n  searchQuery: DiscussionsPageSearchQuery;\n  currentPage: number;\n  response: ApiTypes.QueryDiscussionsResponseDto;\n}\n\nlet DiscussionsPage: React.FC<DiscussionsPageProps> = props => {\n  const _ = useLocalizer(\"discussions\");\n\n  useEffect(() => {\n    appState.enterNewPage(_(\".title\"), \"discussion\");\n  }, [appState.locale]);\n\n  const navigation = useNavigationChecked();\n\n  const isMobileOrPad = useScreenWidthWithin(0, 1024);\n  const isVeryNarrowScreen = useScreenWidthWithin(0, 640);\n\n  const allProblems = props.searchQuery.problemId === -1;\n\n  // Begin search\n  type SearchMode = \"title\" | \"user\";\n  const [searchMode, setSearchMode] = useState<SearchMode>(\"title\");\n\n  function redirectWithFilter(filter: Partial<DiscussionsPageSearchQuery>) {\n    navigation.navigate({\n      query: generateSearchQuery(Object.assign({}, props.searchQuery, filter))\n    });\n  }\n\n  function onAddFilterKeyword(searchKeyword: string) {\n    redirectWithFilter({\n      keyword: searchKeyword.substr(0, 100)\n    });\n  }\n\n  function onDelFilterKeyword() {\n    redirectWithFilter({\n      keyword: \"\"\n    });\n  }\n\n  function onAddFilterPublisher(publisherId: number) {\n    redirectWithFilter({\n      publisherId: publisherId\n    });\n  }\n\n  function onDelFilterPublisher() {\n    // A non-privileged user can only filter \"nonpublic\" if the \"publisher\" itself is applied.\n    // If the \"publisher\" filter is removed, the \"nonpublic\" filter should also be removed.\n    if (!props.response.permissions.filterNonpublic && props.searchQuery.nonpublic) {\n      redirectWithFilter({\n        publisherId: null,\n        nonpublic: false\n      });\n    } else {\n      redirectWithFilter({\n        publisherId: null\n      });\n    }\n  }\n\n  function onAddFilterNonpublic() {\n    // A non-privileged user can only filter \"nonpublic\" if the \"publisher\" itself is applied.\n    // If the \"publisher\" filter is not applied, it should be applied.\n    if (props.searchQuery.nonpublic) return;\n    if (!props.response.permissions.filterNonpublic && appState.currentUser) {\n      redirectWithFilter({\n        publisherId: appState.currentUser.id,\n        nonpublic: true\n      });\n    } else {\n      redirectWithFilter({\n        nonpublic: true\n      });\n    }\n  }\n\n  function onDelFilterNonpublic() {\n    redirectWithFilter({\n      nonpublic: false\n    });\n  }\n  // End search\n\n  const getPagination = () =>\n    props.response.count <= DISCUSSIONS_PER_PAGE ? null : (\n      <Pagination\n        totalCount={props.response.count}\n        currentPage={props.currentPage}\n        itemsPerPage={DISCUSSIONS_PER_PAGE}\n        pageUrl={page => ({\n          query: Object.assign(\n            {\n              page: page.toString()\n            },\n            generateSearchQuery(props.searchQuery)\n          )\n        })}\n      />\n    );\n\n  /**\n   * Search title: while user typing, results are listed below, when user select a result, redirect to that discussion\n   * Search user: while user typing, users are listed below, when user select a user, it's added to the filters\n   * Nonpublic: click to filter nonpublic discussions only, not a mode\n   */\n  const headerSearch = (\n    <>\n      {searchMode === \"title\" ? (\n        <DiscussionSearch\n          queryParameters={generateRequestFromSearchQuery(props.searchQuery)}\n          onResultSelect={discussion => navigation.navigate(getDiscussionUrl(discussion.meta))}\n          onEnterPress={searchKeyword => onAddFilterKeyword(searchKeyword)}\n        />\n      ) : (\n        // Search user\n        <UserSearch className={style.search} onResultSelect={user => onAddFilterPublisher(user.id)} />\n      )}\n      <Menu className={style.searchMenu} secondary>\n        <Menu.Item\n          className={style.searchMenuItem}\n          icon=\"user\"\n          active={searchMode === \"user\"}\n          title={_(\".search_icon.user\")}\n          onClick={() => (searchMode === \"user\" ? setSearchMode(\"title\") : setSearchMode(\"user\"))}\n        />\n        {(props.response.permissions.filterNonpublic ||\n          (appState.currentUser && props.searchQuery.publisherId === appState.currentUser.id)) && (\n          <Menu.Item\n            className={style.searchMenuItem}\n            icon=\"eye slash\"\n            active={false}\n            title={_(\".search_icon.nonpublic\")}\n            onClick={() => onAddFilterNonpublic()}\n          />\n        )}\n      </Menu>\n    </>\n  );\n\n  // To display the current search filters applied on the search result.\n  const filtersApplied = props.searchQuery.keyword || props.response.filterPublisher || props.searchQuery.nonpublic;\n  const headerSearchFilters = filtersApplied && (\n    <>\n      <strong>{_(\".search_filters\")}</strong>\n      {props.searchQuery.keyword && (\n        <Label size=\"small\" color=\"grey\">\n          <Icon name=\"file alternate\" />\n          {props.searchQuery.keyword}\n          <Icon name=\"delete\" onClick={() => onDelFilterKeyword()} />\n        </Label>\n      )}\n      {props.response.filterPublisher && (\n        <Label size=\"small\" color=\"pink\">\n          <Icon name=\"user\" />\n          {props.response.filterPublisher.username}\n          <Icon name=\"delete\" onClick={() => onDelFilterPublisher()} />\n        </Label>\n      )}\n      {props.searchQuery.nonpublic && (\n        <Label size=\"small\" color=\"red\" basic>\n          <Icon name=\"eye slash\" />\n          {_(\".non_public\")}\n          <Icon name=\"delete\" onClick={() => onDelFilterNonpublic()} />\n        </Label>\n      )}\n    </>\n  );\n\n  const headerButtons = allProblems ? null : (\n    <div className={style.headerButtons}>\n      {props.response.permissions.createDiscussion && (\n        <Button\n          size={isMobileOrPad ? \"small\" : null}\n          primary\n          className={isMobileOrPad ? \"icon\" : \"labeled icon\"}\n          icon=\"plus\"\n          content={isMobileOrPad ? \"\" : _(\".add_discussion\")}\n          as={Link}\n          href={getNewDiscussionUrl(props.response.filterProblem?.meta?.id)}\n        />\n      )}\n    </div>\n  );\n\n  const hideProblemColumn = !allProblems;\n  const breadcrumb = getBreadcrumb(\n    props.response.filterProblem,\n    _,\n    allProblems ? \"allProblems\" : !props.response.filterProblem ? \"general\" : null\n  );\n\n  return (\n    <>\n      {isVeryNarrowScreen ? (\n        <>\n          {breadcrumb}\n          <div className={style.headerRow}>\n            {headerSearch}\n            {headerButtons}\n          </div>\n          <div className={style.headerSearchFiltersRow}>{headerSearchFilters}</div>\n        </>\n      ) : (\n        <>\n          {breadcrumb}\n          <div className={style.headerRow}>\n            {headerSearch}\n            <div className={style.headerRightControls}>{headerButtons}</div>\n          </div>\n          <div className={style.headerSearchFiltersRow}>{headerSearchFilters}</div>\n        </>\n      )}\n      {props.response.discussions.length === 0 ? (\n        filtersApplied ? (\n          <Segment placeholder>\n            <Header icon>\n              <Icon name=\"search\" />\n              {_(\".no_discussions.message_search\")}\n            </Header>\n            <Segment.Inline>\n              <Button primary onClick={() => navigation.goBack()}>\n                {_(\".no_discussions.back\")}\n              </Button>\n              <Button\n                onClick={() =>\n                  redirectWithFilter({\n                    keyword: \"\",\n                    publisherId: null,\n                    nonpublic: false\n                  })\n                }\n              >\n                {_(\".no_discussions.clear_filters\")}\n              </Button>\n            </Segment.Inline>\n          </Segment>\n        ) : (\n          <Segment placeholder>\n            <Header icon>\n              <Icon name=\"file\" />\n              {_(\".no_discussions.message_no_search\")}\n            </Header>\n            {props.response.permissions.createDiscussion && (\n              <Segment.Inline>\n                <Button primary as={Link} href={getNewDiscussionUrl(props.response.filterProblem?.meta?.id)}>\n                  {_(\".no_discussions.create\")}\n                </Button>\n              </Segment.Inline>\n            )}\n          </Segment>\n        )\n      ) : (\n        <Table basic=\"very\" textAlign=\"center\" unstackable>\n          <Table.Header>\n            <Table.Row className={style.tableHeaderRow}>\n              {isVeryNarrowScreen ? (\n                <Table.HeaderCell className={style.twoRow} textAlign=\"left\">\n                  <div>{_(\".column_title\")}</div>\n                  {!hideProblemColumn && <div>{_(\".column_problem\")}</div>}\n                  <div>\n                    <div>{_(\".column_publisher\")}</div>\n                    <div>{_(\".column_sort_time\")}</div>\n                  </div>\n                </Table.HeaderCell>\n              ) : (\n                <>\n                  <Table.HeaderCell textAlign=\"left\">{_(\".column_title\")}</Table.HeaderCell>\n                  {!hideProblemColumn && <Table.HeaderCell textAlign=\"left\">{_(\".column_problem\")}</Table.HeaderCell>}\n                  <Table.HeaderCell textAlign=\"right\">{_(\".column_publisher\")}</Table.HeaderCell>\n                  {!isMobileOrPad && (\n                    <Table.HeaderCell width={1} className={style.nowrapRow}>\n                      {_(\".column_reply_count\")}\n                    </Table.HeaderCell>\n                  )}\n                  <Table.HeaderCell width={1} className={style.nowrapRow}>\n                    {_(\".column_sort_time\")}\n                  </Table.HeaderCell>\n                </>\n              )}\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {props.response.discussions.map(discussion => (\n              <Table.Row className={style.row} key={discussion.meta.id}>\n                {(() => {\n                  const columnTitle = (\n                    <>\n                      <EmojiRenderer>\n                        <Link href={getDiscussionUrl(discussion.meta)}>\n                          {getDiscussionDisplayTitle(discussion.meta.title, _)}\n                        </Link>\n                      </EmojiRenderer>\n                      {!discussion.meta.isPublic && (\n                        <Label\n                          className={style.labelNonPublic}\n                          icon=\"eye slash\"\n                          size=\"small\"\n                          color=\"red\"\n                          basic\n                          content={_(\".non_public\")}\n                          as=\"a\"\n                          // As long as a user can see the \"nonpublic\" label, it has the permission to filter the\n                          // nonpublic discussions\n                          onClick={() => onAddFilterNonpublic()}\n                        />\n                      )}\n                    </>\n                  );\n\n                  const columnProblem = !hideProblemColumn && (\n                    <>\n                      {discussion.problem && (\n                        <EmojiRenderer>\n                          <Link href={getProblemUrl(discussion.problem.meta)}>\n                            {getProblemDisplayName(discussion.problem.meta, discussion.problem.title, _, \"all\")}\n                          </Link>\n                        </EmojiRenderer>\n                      )}\n                    </>\n                  );\n\n                  const columnPublisher = <UserLink user={discussion.publisher} />;\n\n                  return isVeryNarrowScreen ? (\n                    <Table.Cell className={style.twoRow} textAlign=\"left\">\n                      <div>{columnTitle}</div>\n                      {columnProblem && <div>{columnProblem}</div>}\n                      <div>\n                        <div>{columnPublisher}</div>\n                        <div>{formatDateTime(discussion.meta.sortTime)[1]}</div>\n                      </div>\n                    </Table.Cell>\n                  ) : (\n                    <>\n                      <Table.Cell textAlign=\"left\">{columnTitle}</Table.Cell>\n                      {columnProblem && <Table.Cell textAlign=\"left\">{columnProblem}</Table.Cell>}\n                      <Table.Cell textAlign=\"right\">{columnPublisher}</Table.Cell>\n                      {!isMobileOrPad && (\n                        <Table.Cell className={style.nowrapRow}>{discussion.meta.replyCount}</Table.Cell>\n                      )}\n                      <Table.Cell className={style.nowrapRow}>\n                        {isMobileOrPad ? (\n                          <span title={formatDateTime(discussion.meta.sortTime)[1]}>\n                            {formatDateTime(discussion.meta.sortTime)[0]}\n                          </span>\n                        ) : (\n                          formatDateTime(discussion.meta.sortTime)[1]\n                        )}\n                      </Table.Cell>\n                    </>\n                  );\n                })()}\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      )}\n      <div className={style.pagination}>{getPagination()}</div>\n    </>\n  );\n};\n\nDiscussionsPage = observer(DiscussionsPage);\n\nexport default defineRoute(async request => {\n  const page = parseInt(request.query.page) || 1;\n  const searchQuery = parseSearchQuery(request.query);\n  const response = await fetchData(searchQuery, page);\n\n  return <DiscussionsPage key={uuid()} searchQuery={searchQuery} currentPage={page} response={response} />;\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport api from \"@/api\";\nimport { appState } from \"@/appState\";\nimport { getDiscussionDisplayTitle } from \"@/pages/discussion/utils\";\nimport { useLocalizer } from \"@/utils/hooks\";\nimport toast from \"@/utils/toast\";\nimport { EmojiRenderer } from \"./EmojiRenderer\";\nimport PreviewSearch from \"./PreviewSearch\";\n\ninterface DiscussionSearchProps {\n  className?: string;\n  queryParameters?: Omit<\n    ApiTypes.QueryDiscussionsRequestDto,\n    \"locale\" | \"keyword\" | \"titleOnly\" | \"skipCount\" | \"takeCount\"\n  >;\n  onResultSelect: (discussion: ApiTypes.QueryDiscussionsResponseDiscussionDto) => void;\n  onEnterPress?: (searchKeyword: string) => void;\n}\n\nconst SEARCH_DISCUSSION_PREVIEW_LIST_LENGTH = appState.serverPreference.pagination.searchDiscussionsPreview;\n\nexport let DiscussionSearch: React.FC<DiscussionSearchProps> = props => {\n  const _ = useLocalizer(\"discussions.search_discussion\");\n\n  return (\n    <PreviewSearch\n      className={props.className}\n      placeholder={_(\".placeholder\")}\n      noResultsMessage={_(\".no_result\")}\n      onGetResultKey={result => result.meta.id}\n      onSearch={async input => {\n        if (!input) return [];\n\n        const { requestError, response } = await api.discussion.queryDiscussions(\n          Object.assign({ locale: appState.locale }, props.queryParameters, {\n            keyword: input,\n            titleOnly: true,\n            skipCount: 0,\n            takeCount: SEARCH_DISCUSSION_PREVIEW_LIST_LENGTH\n          })\n        );\n\n        if (requestError) toast.error(requestError(_));\n        else return response.discussions;\n\n        return [];\n      }}\n      onRenderResult={result => (\n        <EmojiRenderer>\n          <div className=\"title\">{getDiscussionDisplayTitle(result.meta.title, _)}</div>\n        </EmojiRenderer>\n      )}\n      onResultSelect={props.onResultSelect}\n      onEnterPress={props.onEnterPress}\n    />\n  );\n};\n\nDiscussionSearch = observer(DiscussionSearch);\n"],"sourceRoot":""}