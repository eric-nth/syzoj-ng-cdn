{"version":3,"sources":["../node_modules/autotrack/lib/plugins/outbound-link-tracker.js"],"names":["OutboundLinkTracker","tracker","opts","trackUsage","plugins","OUTBOUND_LINK_TRACKER","window","addEventListener","defaultOpts","events","linkSelector","shouldTrackOutboundLink","this","fieldsObj","attributePrefix","assign","handleLinkInteractions","bind","delegates","forEach","event","delegate","document","composed","useCapture","link","parseUrl","href","getAttribute","url","defaultFields","transport","eventCategory","eventAction","type","eventLabel","userFields","getAttributeFields","createFieldsObj","hitFilter","navigator","sendBeacon","target","metaKey","ctrlKey","shiftKey","altKey","which","linkClickWillUnloadCurrentPage","clickHandler","removeEventListener","defaultPrevented","preventDefault","oldHitCallback","hitCallback","withTimeout","location","send","parseUrlFn","hostname","protocol","slice","Object","keys","key","destroy","provide"],"mappings":"sLA4BMA,E,WAMJ,WAAYC,EAASC,GAAM,WAIzB,GAJyB,oBACzBC,YAAWF,EAASG,IAAQC,uBAGvBC,OAAOC,iBAAZ,CAGA,IAAMC,EAAc,CAClBC,OAAQ,CAAC,SACTC,aAAc,UACdC,wBAAyBC,KAAKD,wBAC9BE,UAAW,GACXC,gBAAiB,OAInBF,KAAKV,KACDa,YAAOP,EAAaN,GAExBU,KAAKX,QAAUA,EAGfW,KAAKI,uBAAyBJ,KAAKI,uBAAuBC,KAAKL,MAG/DA,KAAKM,UAAY,GACjBN,KAAKV,KAAKO,OAAOU,SAAQ,SAACC,GACxB,EAAKF,UAAUE,GAASC,YAASC,SAAUF,EAAO,EAAKlB,KAAKQ,aACxD,EAAKM,uBAAwB,CAACO,UAAU,EAAMC,YAAY,Q,mEAY3CJ,EAAOK,GAAM,WAClC,GAAIb,KAAKV,KAAKS,wBAAwBc,EAAMC,KAAW,CACrD,IAAMC,EAAOF,EAAKG,aAAa,SAAWH,EAAKG,aAAa,cACtDC,EAAMH,YAASC,GAGfG,EAAgB,CACpBC,UAAW,SACXC,cAAe,gBACfC,YAAab,EAAMc,KACnBC,WAAYN,EAAIF,MAIZS,EAAarB,YAAO,GAAIH,KAAKV,KAAKW,UACpCwB,YAAmBZ,EAAMb,KAAKV,KAAKY,kBAEjCD,EAAYyB,YAAgBR,EAAeM,EAC7CxB,KAAKX,QAASW,KAAKV,KAAKqC,UAAWd,EAAML,GAE7C,IAAKoB,UAAUC,YAoErB,SAAwCrB,EAAOK,GAC7C,QAEkB,SAAdL,EAAMc,MAES,UAAfT,EAAKiB,QAGLtB,EAAMuB,SAAWvB,EAAMwB,SAGvBxB,EAAMyB,UAENzB,EAAM0B,QAIN1B,EAAM2B,MAAQ,GApFVC,CAA+B5B,EAAOK,GAAO,CAqB/CnB,OAAOC,iBAAiB,SAlBH,SAAf0C,IAKJ,GAJA3C,OAAO4C,oBAAoB,QAASD,IAI/B7B,EAAM+B,iBAAkB,CAG3B/B,EAAMgC,iBAEN,IAAMC,EAAiBxC,EAAUyC,YACjCzC,EAAUyC,YAAcC,aAAY,WACL,mBAAlBF,GAA8BA,IACzCG,SAAS7B,KAAOA,KAGpB,EAAK1B,QAAQwD,KAAK,QAAS5C,WAI7BD,KAAKX,QAAQwD,KAAK,QAAS5C,M,8CAcTY,EAAMiC,GAC5B,IACM7B,EAAM6B,EADCjC,EAAKG,aAAa,SAAWH,EAAKG,aAAa,eAE5D,OAAOC,EAAI8B,UAAYH,SAASG,UACA,QAA5B9B,EAAI+B,SAASC,MAAM,EAAG,K,+BAMnB,WACPC,OAAOC,KAAKnD,KAAKM,WAAWC,SAAQ,SAAC6C,GACnC,EAAK9C,UAAU8C,GAAKC,iB,KAM1BC,YAAQ,sBAAuBlE","file":"static/js/176.57b35088.chunk.js","sourcesContent":["/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {delegate, parseUrl} from 'dom-utils';\nimport provide from '../provide';\nimport {plugins, trackUsage} from '../usage';\nimport {assign, createFieldsObj,\n        getAttributeFields, withTimeout} from '../utilities';\n\n\n/**\n * Class for the `outboundLinkTracker` analytics.js plugin.\n * @implements {OutboundLinkTrackerPublicInterface}\n */\nclass OutboundLinkTracker {\n  /**\n   * Registers outbound link tracking on a tracker object.\n   * @param {!Tracker} tracker Passed internally by analytics.js\n   * @param {?Object} opts Passed by the require command.\n   */\n  constructor(tracker, opts) {\n    trackUsage(tracker, plugins.OUTBOUND_LINK_TRACKER);\n\n    // Feature detects to prevent errors in unsupporting browsers.\n    if (!window.addEventListener) return;\n\n    /** @type {OutboundLinkTrackerOpts} */\n    const defaultOpts = {\n      events: ['click'],\n      linkSelector: 'a, area',\n      shouldTrackOutboundLink: this.shouldTrackOutboundLink,\n      fieldsObj: {},\n      attributePrefix: 'ga-',\n      // hitFilter: undefined,\n    };\n\n    this.opts = /** @type {OutboundLinkTrackerOpts} */ (\n        assign(defaultOpts, opts));\n\n    this.tracker = tracker;\n\n    // Binds methods.\n    this.handleLinkInteractions = this.handleLinkInteractions.bind(this);\n\n    // Creates a mapping of events to their delegates\n    this.delegates = {};\n    this.opts.events.forEach((event) => {\n      this.delegates[event] = delegate(document, event, this.opts.linkSelector,\n          this.handleLinkInteractions, {composed: true, useCapture: true});\n    });\n  }\n\n  /**\n   * Handles all interactions on link elements. A link is considered an outbound\n   * link if its hostname property does not match location.hostname. When the\n   * beacon transport method is not available, the links target is set to\n   * \"_blank\" to ensure the hit can be sent.\n   * @param {Event} event The DOM click event.\n   * @param {Element} link The delegated event target.\n   */\n  handleLinkInteractions(event, link) {\n    if (this.opts.shouldTrackOutboundLink(link, parseUrl)) {\n      const href = link.getAttribute('href') || link.getAttribute('xlink:href');\n      const url = parseUrl(href);\n\n      /** @type {FieldsObj} */\n      const defaultFields = {\n        transport: 'beacon',\n        eventCategory: 'Outbound Link',\n        eventAction: event.type,\n        eventLabel: url.href,\n      };\n\n      /** @type {FieldsObj} */\n      const userFields = assign({}, this.opts.fieldsObj,\n          getAttributeFields(link, this.opts.attributePrefix));\n\n      const fieldsObj = createFieldsObj(defaultFields, userFields,\n          this.tracker, this.opts.hitFilter, link, event);\n\n      if (!navigator.sendBeacon &&\n          linkClickWillUnloadCurrentPage(event, link)) {\n        // Adds a new event handler at the last minute to minimize the chances\n        // that another event handler for this click will run after this logic.\n        const clickHandler = () => {\n          window.removeEventListener('click', clickHandler);\n\n          // Checks to make sure another event handler hasn't already prevented\n          // the default action. If it has the custom redirect isn't needed.\n          if (!event.defaultPrevented) {\n            // Stops the click and waits until the hit is complete (with\n            // timeout) for browsers that don't support beacon.\n            event.preventDefault();\n\n            const oldHitCallback = fieldsObj.hitCallback;\n            fieldsObj.hitCallback = withTimeout(function() {\n              if (typeof oldHitCallback == 'function') oldHitCallback();\n              location.href = href;\n            });\n          }\n          this.tracker.send('event', fieldsObj);\n        };\n        window.addEventListener('click', clickHandler);\n      } else {\n        this.tracker.send('event', fieldsObj);\n      }\n    }\n  }\n\n  /**\n   * Determines whether or not the tracker should send a hit when a link is\n   * clicked. By default links with a hostname property not equal to the current\n   * hostname are tracked.\n   * @param {Element} link The link that was clicked on.\n   * @param {Function} parseUrlFn A cross-browser utility method for url\n   *     parsing (note: renamed to disambiguate when compiling).\n   * @return {boolean} Whether or not the link should be tracked.\n   */\n  shouldTrackOutboundLink(link, parseUrlFn) {\n    const href = link.getAttribute('href') || link.getAttribute('xlink:href');\n    const url = parseUrlFn(href);\n    return url.hostname != location.hostname &&\n        url.protocol.slice(0, 4) == 'http';\n  }\n\n  /**\n   * Removes all event listeners and instance properties.\n   */\n  remove() {\n    Object.keys(this.delegates).forEach((key) => {\n      this.delegates[key].destroy();\n    });\n  }\n}\n\n\nprovide('outboundLinkTracker', OutboundLinkTracker);\n\n\n/**\n * Determines if a link click event will cause the current page to upload.\n * Note: most link clicks *will* cause the current page to unload because they\n * initiate a page navigation. The most common reason a link click won't cause\n * the page to unload is if the clicked was to open the link in a new tab.\n * @param {Event} event The DOM event.\n * @param {Element} link The link element clicked on.\n * @return {boolean} True if the current page will be unloaded.\n */\nfunction linkClickWillUnloadCurrentPage(event, link) {\n  return !(\n      // The event type can be customized; we only care about clicks here.\n      event.type != 'click' ||\n      // Links with target=\"_blank\" set will open in a new window/tab.\n      link.target == '_blank' ||\n      // On mac, command clicking will open a link in a new tab. Control\n      // clicking does this on windows.\n      event.metaKey || event.ctrlKey ||\n      // Shift clicking in Chrome/Firefox opens the link in a new window\n      // In Safari it adds the URL to a favorites list.\n      event.shiftKey ||\n      // On Mac, clicking with the option key is used to download a resouce.\n      event.altKey ||\n      // Middle mouse button clicks (which == 2) are used to open a link\n      // in a new tab, and right clicks (which == 3) on Firefox trigger\n      // a click event.\n      event.which > 1);\n}\n"],"sourceRoot":""}