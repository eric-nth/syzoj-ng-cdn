{"version":3,"sources":["components/PreviewSearch.tsx"],"names":["PreviewSearch","props","useState","searchKeyword","setSearchKeyword","results","setResults","pending","setPending","refInput","useRef","onSearch","useDebouncedCallback","input","a","trim","current","setHideResults","callback","hideResults","useNavigationChecked","subscribe","route","type","isMobile","useScreenWidthWithin","className","style","search","placeholder","value","noResultsMessage","onSearchChange","e","iconPosition","fluid","map","result","key","onGetResultKey","title","data","loading","showNoResults","resultRenderer","onRenderResult","onResultSelect","onKeyPress","onEnterPress"],"mappings":"+NAqFeA,IAjEO,SAAeC,GAAyE,IAAD,EACjEC,mBAAS,IADwD,mBACpGC,EADoG,KACrFC,EADqF,OAE7EF,mBAAc,IAF+D,mBAEpGG,EAFoG,KAE3FC,EAF2F,OAG7EJ,oBAAS,GAHoE,mBAGpGK,EAHoG,KAG3FC,EAH2F,KAIrGC,EAAWC,iBAAO,IAClBC,EAAWC,YAAoB,uCAAC,WAAOC,GAAP,eAAAC,EAAA,yDACpCD,EAAQA,EAAME,OAEdP,GAAW,GACXC,EAASO,QAAUH,EAEdA,EAN+B,uBAOlCL,GAAW,GAPuB,0CAWdP,EAAMU,SAASE,GAXD,UAW9BR,EAX8B,OAahCI,EAASO,UAAYH,EAbW,mDAkBpCP,EAAWD,GAAW,IACtBY,GAAe,GACfT,GAAW,GApByB,4CAAD,sDAqBlC,KAAKU,SA1BmG,EA4BrEhB,oBAAS,GA5B4D,mBA4BpGiB,EA5BoG,KA4BvFF,EA5BuF,KA6BxFG,cACRC,WAAU,SAAAC,GAAK,MAAmB,UAAfA,EAAMC,OAAqBJ,GAAeF,GAAe,MAEvF,IAAMO,EAAWC,YAAqB,EAAG,KAEzC,OACE,cAAC,IAAD,CACEC,UAAWC,IAAMC,QAAU3B,EAAMyB,UAAY,IAAMzB,EAAMyB,UAAY,IACrEG,YAAa5B,EAAM4B,YACnBC,MAAO3B,EACP4B,iBAAkB9B,EAAM8B,iBACxBC,eAAgB,SAACC,EAAD,GAAmB,IAAbH,EAAY,EAAZA,MACpB1B,EAAiB0B,GACjBtB,GAAW,GACXG,EAASmB,IAEXjB,MAAO,CAAEqB,aAAc,OAAQC,MAAOX,GAEtCnB,QACEc,EACI,GACAd,EAAQ+B,KAAI,SAAAC,GAAM,MAAK,CACrBC,IAAKrC,EAAMsC,eAAeF,GAC1BG,MAAO,GACPC,KAAMJ,MAGdK,QAASnC,EACToC,eAAgBpC,IAAYY,EAC5ByB,eAAgB,SAACP,GAAD,OAAiBpC,EAAM4C,eAAeR,EAAOI,OAC7DK,eAAgB,SAACb,EAAD,OAAMI,EAAN,EAAMA,OAAN,OAAoCpC,EAAM6C,eAAeT,EAAOI,OAChFM,WAAYC,aAAa,kBAAM7C,GAAiBF,EAAM+C,cAAgB/C,EAAM+C,aAAa7C","file":"static/js/35.bcf57133.chunk.js","sourcesContent":["import React, { useState, useRef, PropsWithChildren } from \"react\";\nimport { Search } from \"semantic-ui-react\";\nimport { useDebouncedCallback } from \"use-debounce\";\n\nimport style from \"./PreviewSearch.module.less\";\n\nimport { useNavigationChecked, useScreenWidthWithin } from \"@/utils/hooks\";\nimport { onEnterPress } from \"@/utils/onEnterPress\";\n\ninterface PreviewSearchProps<T> {\n  className?: string;\n  placeholder: string;\n  noResultsMessage: string;\n  onGetResultKey: (result: T) => React.Key;\n  onSearch: (input: string) => Promise<T[]>;\n  onRenderResult: (result: T) => React.ReactNode;\n  onResultSelect: (item: T) => void;\n  onEnterPress?: (searchKeyword: string) => void;\n}\n\nconst PreviewSearch = <T extends {}>(props: PropsWithChildren<PreviewSearchProps<T>>): React.ReactElement => {\n  const [searchKeyword, setSearchKeyword] = useState(\"\");\n  const [results, setResults] = useState<T[]>([]);\n  const [pending, setPending] = useState(false);\n  const refInput = useRef(\"\");\n  const onSearch = useDebouncedCallback(async (input: string) => {\n    input = input.trim();\n\n    setPending(true);\n    refInput.current = input;\n\n    if (!input) {\n      setPending(false);\n      return;\n    }\n\n    const results = await props.onSearch(input);\n\n    if (refInput.current !== input) {\n      // Still pending\n      return;\n    }\n\n    setResults(results || []);\n    setHideResults(false);\n    setPending(false);\n  }, 500).callback;\n\n  const [hideResults, setHideResults] = useState(true);\n  const navigation = useNavigationChecked();\n  navigation.subscribe(route => route.type === \"ready\" && !hideResults && setHideResults(true));\n\n  const isMobile = useScreenWidthWithin(0, 768);\n\n  return (\n    <Search\n      className={style.search + (props.className ? \" \" + props.className : \"\")}\n      placeholder={props.placeholder}\n      value={searchKeyword}\n      noResultsMessage={props.noResultsMessage}\n      onSearchChange={(e, { value }) => {\n        setSearchKeyword(value);\n        setPending(true);\n        onSearch(value);\n      }}\n      input={{ iconPosition: \"left\", fluid: isMobile }}\n      // Workaround Semantic UI's buggy \"custom result renderer\"\n      results={\n        hideResults\n          ? []\n          : results.map(result => ({\n              key: props.onGetResultKey(result),\n              title: \"\",\n              data: result\n            }))\n      }\n      loading={pending}\n      showNoResults={!pending && !hideResults}\n      resultRenderer={(result: any) => props.onRenderResult(result.data) as any}\n      onResultSelect={(e, { result }: { result: any }) => props.onResultSelect(result.data)}\n      onKeyPress={onEnterPress(() => searchKeyword && props.onEnterPress && props.onEnterPress(searchKeyword))}\n    />\n  );\n};\n\nexport default PreviewSearch;\n"],"sourceRoot":""}