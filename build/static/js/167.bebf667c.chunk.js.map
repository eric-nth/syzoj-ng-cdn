{"version":3,"sources":["pages/user/edit/PreferenceView.tsx"],"names":["fetchData","username","a","api","user","getUserPreference","requestError","response","RouteError","showRefresh","showBack","error","makeToBeLocalizedText","CodeFormatter","FontNameWithPreview","props","style","fontFamily","fontFace","View","observer","_","useLocalizer","navigation","useNavigationChecked","useEffect","appState","enterNewPage","meta","locale","useConfirmNavigation","setModified","useState","preference","system","systemLocale","setSystemLocale","content","contentLocale","setContentLocale","hideUnavailableMessage","hidePreferredLocalizedContentUnavailableMessage","setHidePreferredLocalizedContentUnavailableMessage","theme","themeList","setTheme","font","contentFontFace","availableContentFonts","setContentFontFace","codeFontFace","availableCodeFonts","setCodeFontFace","codeFontSize","setCodeFontSize","codeLineHeight","setCodeLineHeight","codeFontLigatures","setCodeFontLigatures","markdownEditorFont","setMarkdownEditorFont","codeFormatter","options","codeFormatterOptions","setCodeFormatterOptions","disableByDefault","doNotFormatCodeByDefault","setDoNotFormatCodeByDefault","Object","values","CodeLanguage","includes","code","defaultLanguage","Cpp","defaultCodeLanguage","setDefaultCodeLanguage","filterValidCompileAndRunOptions","defaultCompileAndRunOptions","setDefaultCompileAndRunOptions","defaultSystemLocale","browserDefaultLocale","defaultContentLocale","temporaryThemeOverride","useAsyncCallbackPending","updateUserPreference","userId","id","toast","success","currentUser","systemLocaleChanged","userPreference","setMobX","refresh","pending","onSubmit","formatPreviewSuccess","formattedPreviewCode","className","sectionHeader","size","header","notFullWidth","localeSelect","fluid","value","onChange","e","key","text","name","localeMeta","flag","entries","map","notes","checkbox","checked","label","keys","selectOptionNotes","forceLoadFonts","fontSelect","segment","color","html","fontFaceOverride","wrap","type","min","max","step","x","Number","largeMargin","language","fontSizeOverride","lineHeightOverride","fontLigaturesOverride","Group","inline","formLabel","Radio","headerMargin","headerForLanguage","classNameForCompileAndRunOptions","halfWidthFieldContainer","compileAndRunOptions","onUpdateLanguage","codeLanguage","onUpdateCompileAndRunOptions","textarea","rows","placeholder","length","href","target","rel","segmentClassName","formatPreviewCodeBoxSegment","scrollableCodeBoxSegment","submit","loading","disabled","primary","onClick"],"mappings":"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","file":"static/js/167.bebf667c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Form, Header, Checkbox, TextArea, Button, Select, Flag, Icon, Input } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\nimport { set as setMobX } from \"mobx\";\n\nimport style from \"./UserEdit.module.less\";\n\nimport api from \"@/api\";\nimport { appState, browserDefaultLocale } from \"@/appState\";\nimport toast from \"@/utils/toast\";\nimport { useAsyncCallbackPending, useConfirmNavigation, useLocalizer, useNavigationChecked } from \"@/utils/hooks\";\nimport { Locale } from \"@/interfaces/Locale\";\nimport localeMeta from \"@/locales/meta\";\nimport * as CodeFormatter from \"@/utils/CodeFormatter\";\nimport { CodeLanguage, filterValidCompileAndRunOptions } from \"@/interfaces/CodeLanguage\";\nimport { CodeBox, HighlightedCodeBox } from \"@/components/CodeBox\";\nimport { RouteError } from \"@/AppRouter\";\nimport CodeLanguageAndOptions from \"@/components/CodeLanguageAndOptions\";\nimport { availableCodeFonts, availableContentFonts } from \"@/misc/fonts\";\nimport { makeToBeLocalizedText } from \"@/locales\";\nimport { themeList } from \"@/themes\";\n\nexport async function fetchData(username: string) {\n  const { requestError, response } = await api.user.getUserPreference({ username });\n  if (requestError) throw new RouteError(requestError, { showRefresh: true, showBack: true });\n  else if (response.error) throw new RouteError(makeToBeLocalizedText(`user_edit.errors.${response.error}`));\n\n  await CodeFormatter.ready;\n\n  return response;\n}\n\ninterface FontNameWithPreviewProps {\n  fontFace: string;\n}\n\nconst FontNameWithPreview: React.FC<FontNameWithPreviewProps> = props => (\n  <span style={{ fontFamily: `\"${props.fontFace}\"` }}>{props.fontFace}</span>\n);\n\ninterface PreferenceViewProps {\n  meta?: ApiTypes.UserMetaDto;\n  preference?: ApiTypes.UserPreferenceDto;\n}\n\nconst PreferenceView: React.FC<PreferenceViewProps> = props => {\n  const _ = useLocalizer(\"user_edit.preference\");\n  const navigation = useNavigationChecked();\n\n  useEffect(() => {\n    appState.enterNewPage(`${_(`.title`)} - ${props.meta.username}`, null, false);\n  }, [appState.locale, props.meta]);\n\n  const [modified, setModified] = useConfirmNavigation();\n\n  const [systemLocale, setSystemLocale] = useState<Locale>((props.preference.locale?.system || null) as Locale);\n  const [contentLocale, setContentLocale] = useState<Locale>((props.preference.locale?.content || null) as Locale);\n  const [\n    hidePreferredLocalizedContentUnavailableMessage,\n    setHidePreferredLocalizedContentUnavailableMessage\n  ] = useState(props.preference.locale?.hideUnavailableMessage || false);\n  const [theme, setTheme] = useState(props.preference.theme in themeList ? props.preference.theme : \"\");\n  const [contentFontFace, setContentFontFace] = useState(\n    props.preference.font?.contentFontFace || availableContentFonts[0] || \"sans-serif\"\n  );\n  const [codeFontFace, setCodeFontFace] = useState(\n    props.preference.font?.codeFontFace || availableCodeFonts[0] || \"monospace\"\n  );\n  const [codeFontSize, setCodeFontSize] = useState(props.preference.font?.codeFontSize || 14);\n  const [codeLineHeight, setCodeLineHeight] = useState(props.preference.font?.codeLineHeight || 1.3);\n  const [codeFontLigatures, setCodeFontLigatures] = useState(props.preference.font?.codeFontLigatures !== false);\n  const [markdownEditorFont, setMarkdownEditorFont] = useState(\n    (props.preference.font?.markdownEditorFont || \"content\") as \"content\" | \"code\"\n  );\n  const [codeFormatterOptions, setCodeFormatterOptions] = useState(props.preference.codeFormatter?.options || \"\");\n  const [doNotFormatCodeByDefault, setDoNotFormatCodeByDefault] = useState(\n    !!props.preference.codeFormatter?.disableByDefault\n  );\n\n  // Validate the code language and options value to prevent garbage data on server\n  const [defaultCodeLanguage, setDefaultCodeLanguage] = useState(\n    Object.values(CodeLanguage).includes(props.preference.code?.defaultLanguage as CodeLanguage)\n      ? (props.preference.code?.defaultLanguage as CodeLanguage)\n      : CodeLanguage.Cpp\n  );\n  const [defaultCompileAndRunOptions, setDefaultCompileAndRunOptions] = useState(\n    filterValidCompileAndRunOptions(defaultCodeLanguage, props.preference.code?.defaultCompileAndRunOptions)\n  );\n\n  const defaultSystemLocale = browserDefaultLocale;\n  const defaultContentLocale = systemLocale || browserDefaultLocale;\n\n  // Theme preview\n  useEffect(() => {\n    appState.temporaryThemeOverride = theme;\n    return () => (appState.temporaryThemeOverride = null);\n  }, [theme]);\n\n  const [pending, onSubmit] = useAsyncCallbackPending(async () => {\n    const preference: ApiTypes.UserPreferenceDto = {\n      locale: {\n        system: systemLocale,\n        content: contentLocale,\n        hideUnavailableMessage: hidePreferredLocalizedContentUnavailableMessage\n      },\n      theme,\n      font: {\n        contentFontFace,\n        codeFontFace,\n        codeFontSize,\n        codeLineHeight,\n        codeFontLigatures,\n        markdownEditorFont\n      },\n      codeFormatter: {\n        options: codeFormatterOptions,\n        disableByDefault: doNotFormatCodeByDefault\n      },\n      code: {\n        defaultLanguage: defaultCodeLanguage,\n        defaultCompileAndRunOptions: defaultCompileAndRunOptions\n      }\n    };\n\n    const { requestError, response } = await api.user.updateUserPreference({\n      userId: props.meta.id,\n      preference\n    });\n\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) toast.error(_(`.${response.error}`));\n    else {\n      setModified(false);\n\n      toast.success(_(\".success\"));\n\n      if (appState.currentUser.id === props.meta.id) {\n        const systemLocaleChanged = appState.userPreference.locale?.system !== systemLocale;\n        setMobX(appState.userPreference, preference);\n        if (systemLocaleChanged) {\n          navigation.refresh();\n        }\n      }\n    }\n  });\n\n  const fontPreviewContent = `<h2>A Harmony of LIGHT</h2><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. A scelerisque purus semper eget duis at tellus at. Adipiscing elit duis tristique sollicitudin nibh.</p><h2>Awaits You in a Lost WORLD</h2><p>Velit sed ullamcorper morbi tincidunt ornare. Suscipit tellus mauris a diam maecenas. Tellus integer feugiat scelerisque varius morbi enim nunc. Eget aliquet nibh praesent tristique. Interdum posuere lorem ipsum dolor sit. Sed sed risus pretium quam vulputate dignissim suspendisse in est.</p><p>Elementum sagittis vitae et leo duis. Neque convallis a cras semper auctor. Justo eget magna fermentum iaculis eu non diam.</p>`;\n\n  // XD I write this because I'm studying the course -- Introduction to Database Systems\n  const fontPreviewCode = `// **Comments**\nif ((a->b <=> c++) >= 0xFF && f(d || e) != (g << h)) {\n    /* Do something */\n    int abcdefghijklmn = OPQRSTUVWXYZ;\n    int ABCDEFGHIJKLMN = opqrstuvwxyz;\n}\n\nreturn 1234567890;`;\n\n  const formatPreviewCode =\n    \"#include<world.h>\\n\\nint main() {\\n// ~ Switch on the power line / Remember to put on PROTECTION ~\\nworld.start();\\n\\n// ~ Lay down your pieces / And let's begin OBJECT CREATION ~\\n// ~ Fill in my data / Parameters INITIALIZATION ~\\nauto*me = World::createObject(\\\"me\\\",world,parameters...);\\nauto &you = *World::createObject(\\\"you\\\",world,parameters...);\\n\\n// ~ Set up our new world ~\\nauto& world = World{me,you};\\n\\n// ~ And let's begin the SIMULATION ~\\nworld.beginSimulation();\\n\\n      switch(me->type) {\\n        case Object::SET_OF_POINTS:\\n          // ~ If I'm a set of points / Then I will give you my DIMENSION ~\\n        you << dynamic_cast<Set<Point>*>(me)->getDimension(); break;\\n    case Object::CIRCLE:\\n  // ~ If I'm a circle / Then I will give you my CIRCUMFERENCE ~\\n  you << dynamic_cast<Circle* >(me)->getCircumference();\\n  break;\\n    case Object::SINE_WAVE:\\n      // ~ If I'm a sine wave / Then you can sit on all my TANGENTS ~\\n          for (auto&tangent:dynamic_cast<SineWave*>(me)->getTangents())\\n        you.sitOn(tangent);\\n      break;\\n    default:\\n  // ~ If I approach infinity / Then you can be my LIMITATIONS ~\\n    you.limit()>>me->limit();\\n}\\n\\n    // ~ Switch my current / To AC to DC ~\\n    me->setCurrent(CurrentType::AC),me->setCurrent(CurrentType::DC);\\n\\n    // ~ And then blind my vision / So dizzy, so dizzy ~\\n    delete me->vision;\\n\\n// ~ Oh, we can travel / From A.D to B.C ~\\nworld.setTime(CommonEra::AD,2016y+6m+16d);\\nworld.setTime(CommonEra::BC,-2016y+6m+16d);\\n\\n    // ~ And we can unite / So deeply, so deeply ~\\n    world.unite(you, *me);\\n\\n    // ~ If I can, if I can, give you all THE SIMULATIONS ~\\n    if (std::all_of(world.simulations.begin(), world.simulations.end(), [&] (auto &simulation) {\\nreturn you << me->run(simulation);\\n}))\\n        // ~ Then I can, then I can, be your only SATISFACTION ~\\n        you.satisfactions = std::vector{me};\\n\\n    // ~ If I can make you happy / Then I'll run the EXECUTION ~\\n    try\\n    {\\n      me->execute(you.nextCommand());\\n    } catch (const NotHappyException &e) {}\\n\\n    // ~ Though we are trapped in this strange, strange SIMULATION ~\\n    world.trap(me);\\n\\n    // ~ EXECUTION / EXECUTION / EXECUTION / EXECUTION ~\\n    // ~ EXECUTION / EXECUTION / EXECUTION / EXECUTION ~\\n    // ~ EXECUTION / EXECUTION / EXECUTION / EXECUTION ~\\n    for (size_t i = 0; i < 3; i++){\\n      for (size_t j = 0; j < 4; j++) world.continueExecution();\\n    }\\n\\n    // ~ EIN / DOS / TROIS / NE / FEM / LIU / EXECUTION ~\\n    for (size_t i = 1; i <= 6; i++)\\n        sleepms(500);\\n    world.continueExecution();\\n\\n    // ~ If I can, if I can, give you all the EXECUTION ~\\n    if (std::all_of(world.begin(), world.end(), [&] (auto &object) {\\n      return me->execute(object);\\n }))\\n        // ~ Then I can, then I can, be your only EXECUTION ~\\n        me->execute(you.nextCommand());\\n\\n    // ~ If I can, have you back ~\\n    if (*me << you)\\n        // ~ Then I will run the EXECUTION ~\\n        me->execute(you.nextCommand());\\n    \\n// ~ Though we are trapped / We are trapped ah ~\\nworld.trap(me);\\n\\n// ~ I've studied / I've studied how to properly / LO-O-OVE ~\\nme->study(Knowledge::Love);\\n// ~ Question me / Question me / I can answer all / LO-O-OVE ~\\nyou.question(me, Knowledge::Love);\\n// ~ I know the algebraic expression of / LO-O-OVE ~\\nme->answer(you, Knowledge::Love);\\n// ~ Though you are free / I am trapped, trapped in / LO-O-OVE ~\\nworld.trap(me);\\n\\n// ~ EXECUTION ~\\nworld.execute(me);\\n}\\n\";\n\n  const [formatPreviewSuccess, formattedPreviewCode] = CodeFormatter.format(\n    formatPreviewCode,\n    CodeLanguage.Cpp,\n    codeFormatterOptions || CodeFormatter.defaultOptions\n  );\n\n  return (\n    <>\n      <Header className={style.sectionHeader} size=\"large\" content={_(\".locale.header\")} />\n      <Header className={style.header} size=\"tiny\" content={_(\".locale.system\")} />\n      <Select\n        className={style.notFullWidth + \" \" + style.localeSelect}\n        fluid\n        value={systemLocale || \"DEFAULT\"}\n        onChange={(e, { value }) => (\n          setModified(true), setSystemLocale((value === \"DEFAULT\" ? null : value) as Locale)\n        )}\n        options={[\n          {\n            key: \"DEFAULT\",\n            value: \"DEFAULT\",\n            text:\n              props.meta.id === appState.currentUser.id ? (\n                <>\n                  <Flag name={localeMeta[defaultSystemLocale].flag as any} />\n                  {_(\".locale.system_default_name\", { name: localeMeta[defaultSystemLocale].name })}\n                </>\n              ) : (\n                <>\n                  <Icon name=\"globe\" />\n                  {_(\".locale.system_default\")}\n                </>\n              )\n          },\n          ...Object.entries(localeMeta).map(([locale, meta]) => ({\n            text: (\n              <>\n                <Flag name={meta.flag as any} />\n                {meta.name}\n              </>\n            ),\n            value: locale,\n            key: locale\n          }))\n        ]}\n      />\n      <div className={style.notes}>{_(\".locale.system_notes\")}</div>\n      <Header className={style.header} size=\"tiny\" content={_(\".locale.content\")} />\n      <Select\n        className={style.notFullWidth + \" \" + style.localeSelect}\n        fluid\n        value={contentLocale || \"DEFAULT\"}\n        onChange={(e, { value }) => (\n          setModified(true), setContentLocale((value === \"DEFAULT\" ? null : value) as Locale)\n        )}\n        options={[\n          {\n            key: \"DEFAULT\",\n            value: \"DEFAULT\",\n            text:\n              props.meta.id === appState.currentUser.id ? (\n                <>\n                  <Flag name={localeMeta[defaultContentLocale].flag as any} />\n                  {_(\".locale.content_default_name\", { name: localeMeta[defaultContentLocale].name })}\n                </>\n              ) : (\n                <>\n                  <Icon name=\"globe\" />\n                  {_(\".locale.content_default\")}\n                </>\n              )\n          },\n          ...Object.entries(localeMeta).map(([locale, meta]) => ({\n            text: (\n              <>\n                <Flag name={meta.flag as any} />\n                {meta.name}\n              </>\n            ),\n            value: locale,\n            key: locale\n          }))\n        ]}\n      />\n      <div className={style.notes}>{_(\".locale.content_notes\")}</div>\n      <Checkbox\n        className={style.checkbox}\n        checked={hidePreferredLocalizedContentUnavailableMessage}\n        label={_(\".locale.hide_unavailable_message\")}\n        onChange={(e, { checked }) =>\n          !pending && (setModified(true), setHidePreferredLocalizedContentUnavailableMessage(checked))\n        }\n      />\n      <Header className={style.sectionHeader} size=\"large\" content={_(\".appearance.header\")} />\n      <Header className={style.header} size=\"tiny\" content={_(\".appearance.theme\")} />\n      <Select\n        className={style.notFullWidth}\n        fluid\n        value={theme || \"auto\"}\n        onChange={(e, { value }) => (setModified(true), setTheme(value === \"auto\" ? \"\" : (value as string)))}\n        options={[\"auto\", ...Object.keys(themeList)].map(theme => ({\n          key: theme,\n          value: theme,\n          text: (\n            <>\n              {_(`.appearance.themes.${theme}.name`)}\n              <div className={style.notes + \" \" + style.selectOptionNotes}>\n                {_(`.appearance.themes.${theme}.description`)}\n              </div>\n            </>\n          )\n        }))}\n      />\n      <Header className={style.header} size=\"tiny\" content={_(\".appearance.content_font_face\")} />\n      {/* The browser may won't load the webfonts until the user open the select. */}\n      <div className={style.forceLoadFonts}>\n        {[...availableCodeFonts, ...availableContentFonts].map(fontFace => (\n          <FontNameWithPreview key={fontFace} fontFace={fontFace} />\n        ))}\n      </div>\n      <Select\n        className={style.notFullWidth + \" \" + style.fontSelect}\n        fluid\n        value={contentFontFace}\n        onChange={(e, { value }) => (setModified(true), setContentFontFace(value as string))}\n        options={[\n          {\n            key: \"sans-serif\",\n            value: \"sans-serif\",\n            text: <span style={{ fontFamily: \"sans-serif\" }}>{_(\".appearance.system_default_sans_serif\")}</span>\n          },\n          {\n            key: \"serif\",\n            value: \"serif\",\n            text: <span style={{ fontFamily: \"serif\" }}>{_(\".appearance.system_default_serif\")}</span>\n          },\n          ...availableContentFonts.map(fontFace => ({\n            text: <FontNameWithPreview fontFace={fontFace} />,\n            value: fontFace,\n            key: fontFace\n          }))\n        ]}\n      />\n      <Header className={style.header} size=\"tiny\" content={_(\".appearance.content_preview\")} />\n      <CodeBox\n        className=\"content-font\"\n        segment={{\n          color: \"pink\"\n        }}\n        html={fontPreviewContent}\n        fontFaceOverride={contentFontFace}\n        wrap\n      />\n      <Header className={style.header} size=\"tiny\" content={_(\".appearance.code_font_face\")} />\n      <Select\n        className={style.notFullWidth + \" \" + style.fontSelect}\n        fluid\n        value={codeFontFace}\n        onChange={(e, { value }) => (setModified(true), setCodeFontFace(value as string))}\n        options={[\n          {\n            key: \"monospace\",\n            value: \"monospace\",\n            text: <span style={{ fontFamily: \"monospace\" }}>{_(\".appearance.system_default\")}</span>\n          },\n          ...availableCodeFonts.map(fontFace => ({\n            text: <FontNameWithPreview fontFace={fontFace} />,\n            value: fontFace,\n            key: fontFace\n          }))\n        ]}\n      />\n      <Header className={style.header} size=\"tiny\" content={_(\".appearance.code_font_size\")} />\n      <Input\n        className={style.notFullWidth}\n        fluid\n        value={codeFontSize}\n        type=\"number\"\n        min={5}\n        max={20}\n        step={0.5}\n        onChange={(e, { value }) => {\n          const x = Number(value);\n          if (x >= 5 && x <= 20) setModified(true), setCodeFontSize(x);\n        }}\n      />\n      <Header className={style.header} size=\"tiny\" content={_(\".appearance.code_line_height\")} />\n      <Input\n        className={style.notFullWidth}\n        fluid\n        value={codeLineHeight}\n        type=\"number\"\n        min={1}\n        max={2}\n        step={0.05}\n        onChange={(e, { value }) => {\n          const x = Number(value);\n          if (x >= 1 && x <= 2) setModified(true), setCodeLineHeight(x);\n        }}\n      />\n      <Checkbox\n        className={style.checkbox + \" \" + style.largeMargin}\n        checked={codeFontLigatures}\n        label={_(\".appearance.code_font_ligatures\")}\n        onChange={(e, { checked }) => !pending && (setModified(true), setCodeFontLigatures(checked))}\n      />\n      <div className={style.notes}>{_(\".appearance.code_font_ligatures_notes\")}</div>\n      <Header className={style.header} size=\"tiny\" content={_(\".appearance.code_preview\")} />\n      <HighlightedCodeBox\n        segment={{\n          color: \"blue\"\n        }}\n        language={\"cpp\"}\n        code={fontPreviewCode}\n        fontFaceOverride={codeFontFace}\n        fontSizeOverride={codeFontSize}\n        lineHeightOverride={codeLineHeight}\n        fontLigaturesOverride={codeFontLigatures}\n      />\n      <Form>\n        <Form.Group inline>\n          <label className={style.formLabel}>{_(\".appearance.markdown_editor_font.markdown_editor\")}</label>\n          <Form.Radio\n            label={_(\".appearance.markdown_editor_font.content_font\")}\n            value=\"content\"\n            checked={markdownEditorFont === \"content\"}\n            onChange={() => setMarkdownEditorFont(\"content\")}\n          />\n          <Form.Radio\n            label={_(\".appearance.markdown_editor_font.code_font\")}\n            value=\"code\"\n            checked={markdownEditorFont === \"code\"}\n            onChange={() => setMarkdownEditorFont(\"code\")}\n          />\n        </Form.Group>\n      </Form>\n      <Header className={style.sectionHeader} size=\"large\" content={_(\".code_language.header\")} />\n      <Form className={style.notFullWidth + \" \" + style.headerMargin}>\n        <CodeLanguageAndOptions\n          headerForLanguage={_(\".code_language.language\")}\n          classNameForCompileAndRunOptions={style.halfWidthFieldContainer}\n          language={defaultCodeLanguage}\n          compileAndRunOptions={defaultCompileAndRunOptions}\n          onUpdateLanguage={codeLanguage => (setModified(true), setDefaultCodeLanguage(codeLanguage))}\n          onUpdateCompileAndRunOptions={options => (setModified(true), setDefaultCompileAndRunOptions(options))}\n        />\n      </Form>\n      <div className={style.notes}>{_(\".code_language.content_notes\")}</div>\n      <Header className={style.sectionHeader} size=\"large\" content={_(\".code_formatter.header\")} />\n      <Header className={style.header} size=\"tiny\" content={_(\".code_formatter.astyle_options\")} />\n      <Form>\n        <TextArea\n          className={style.textarea + \" monospace\"}\n          rows=\"5\"\n          placeholder={CodeFormatter.defaultOptions}\n          value={codeFormatterOptions}\n          onChange={(e, { value }: { value: string }) =>\n            value.length < 1024 && !pending && (setModified(true), setCodeFormatterOptions(value))\n          }\n        />\n      </Form>\n      <div className={style.notes}>\n        {_(\".code_formatter.notes_before\")}\n        <a href=\"http://astyle.sourceforge.net/astyle.html\" target=\"_blank\" rel=\"noreferrer noopener\">\n          &nbsp;{_(\".code_formatter.notes_link\")}&nbsp;\n        </a>\n        {_(\".code_formatter.notes_after\")}\n      </div>\n      <Checkbox\n        className={style.checkbox}\n        checked={!doNotFormatCodeByDefault}\n        label={_(\".code_formatter.format_code_by_default\")}\n        onChange={(e, { checked }) => !pending && (setModified(true), setDoNotFormatCodeByDefault(!checked))}\n      />\n      <Header\n        className={style.header}\n        size=\"tiny\"\n        content={_(formatPreviewSuccess ? \".code_formatter.preview\" : \".code_formatter.error\")}\n      />\n      <HighlightedCodeBox\n        segmentClassName={style.formatPreviewCodeBoxSegment + \" \" + style.scrollableCodeBoxSegment}\n        segment={{\n          color: formatPreviewSuccess ? \"green\" : \"red\"\n        }}\n        language={formatPreviewSuccess ? \"cpp\" : null}\n        code={formattedPreviewCode}\n      />\n      <Button\n        className={style.submit}\n        loading={pending}\n        disabled={!formatPreviewSuccess}\n        primary\n        content={_(\".submit\")}\n        onClick={onSubmit}\n      />\n    </>\n  );\n};\n\nexport const View = observer(PreferenceView);\n"],"sourceRoot":""}