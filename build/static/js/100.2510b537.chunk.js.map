{"version":3,"sources":["pages/discussion/edit/DiscussionEditPage.tsx"],"names":["DiscussionEditPage","props","_","useLocalizer","navigation","useNavigationChecked","useEffect","appState","enterNewPage","discussion","meta","id","locale","recaptcha","useRecaptcha","useState","title","setTitle","content","setContent","a","api","updateDiscussion","discussionId","createDiscussion","problemId","problem","requestError","response","toast","error","newId","navigate","getBreadcrumb","Divider","icon","Section","className","style","editor","type","publisher","currentUser","onChangeTitle","length","onChangeContent","onCancel","onSubmit","noSubmitPermission","permissions","includes","observer","new","defineRoute","request","serverPreference","security","allowEveryoneCreateDiscussion","currentUserHasPrivilege","RouteError","makeToBeLocalizedText","params","getProblem","Number","localizedContentsOfLocale","localizedContentsTitleOnly","showRefresh","showBack","uuid","edit","getDiscussionAndReplies","getDiscussion"],"mappings":"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","file":"static/js/100.2510b537.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Breadcrumb } from \"semantic-ui-react\";\nimport { v4 as uuid } from \"uuid\";\nimport { observer } from \"mobx-react\";\n\nimport style from \"./DiscussionEditPage.module.less\";\n\nimport { defineRoute, RouteError } from \"@/AppRouter\";\nimport api from \"@/api\";\nimport { appState } from \"@/appState\";\nimport { useLocalizer, useRecaptcha, useNavigationChecked } from \"@/utils/hooks\";\nimport { DiscussionEditor } from \"../view/DiscussionViewPage\";\nimport { getBreadcrumb } from \"../discussions/DiscussionsPage\";\nimport toast from \"@/utils/toast\";\nimport { makeToBeLocalizedText } from \"@/locales\";\n\ninterface DiscussionEditPageProps {\n  problem?: {\n    meta: ApiTypes.ProblemMetaDto;\n    title: string;\n  };\n  discussion?: ApiTypes.DiscussionDto;\n}\n\nlet DiscussionEditPage: React.FC<DiscussionEditPageProps> = props => {\n  const _ = useLocalizer(\"discussion_edit\");\n  const navigation = useNavigationChecked();\n\n  useEffect(() => {\n    appState.enterNewPage(props.discussion ? `${_(\".title_update\")} #${props.discussion.meta.id}` : _(\".title_new\"));\n  }, [appState.locale, props.discussion]);\n\n  const recaptcha = useRecaptcha();\n\n  const [title, setTitle] = useState(props.discussion ? props.discussion.meta.title : \"\");\n  const [content, setContent] = useState(props.discussion ? props.discussion.content : \"\");\n\n  async function onSubmit() {\n    const { requestError, response } = props.discussion\n      ? await api.discussion.updateDiscussion({\n          discussionId: props.discussion.meta.id,\n          title,\n          content\n        })\n      : await api.discussion.createDiscussion(\n          {\n            problemId: props.problem?.meta?.id,\n            title,\n            content\n          },\n          recaptcha(\"CreateDiscussion\")\n        );\n\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) toast.error(_(`.errors.${response.error}`));\n    else {\n      const newId = props.discussion\n        ? props.discussion.meta.id\n        : (response as ApiTypes.CreateDiscussionResponseDto).discussionId;\n      return () => navigation.navigate(`/d/${newId}`);\n    }\n\n    return false;\n  }\n\n  return (\n    <>\n      {getBreadcrumb(\n        props.discussion ? props.discussion.problem : props.problem,\n        _,\n        null,\n        <>\n          <Breadcrumb.Divider icon=\"right angle\" />\n          <Breadcrumb.Section>\n            {props.discussion ? `${_(\".header.update\")} #${props.discussion.meta.id}` : _(\".header.add\")}\n          </Breadcrumb.Section>\n        </>\n      )}\n      <DiscussionEditor\n        className={style.editor}\n        type={props.discussion ? \"UpdateDiscussion\" : \"NewDiscussion\"}\n        publisher={props.discussion?.publisher || appState.currentUser}\n        title={title}\n        content={content}\n        onChangeTitle={title => title.length <= 80 && setTitle(title)}\n        onChangeContent={setContent}\n        onCancel={() => navigation.navigate(`/d/${props.discussion.meta.id}`)}\n        onSubmit={onSubmit}\n        noSubmitPermission={props.discussion && !props.discussion.permissions.includes(\"Modify\")}\n      />\n    </>\n  );\n};\n\nDiscussionEditPage = observer(DiscussionEditPage);\n\nexport default {\n  new: defineRoute(async request => {\n    if (\n      !(\n        (appState.currentUser && appState.serverPreference.security.allowEveryoneCreateDiscussion) ||\n        appState.currentUserHasPrivilege(\"ManageDiscussion\")\n      )\n    ) {\n      throw new RouteError(makeToBeLocalizedText(`discussion_edit.errors.PERMISSION_DENIED`));\n    }\n\n    const problem = await (async (): Promise<DiscussionEditPageProps[\"problem\"]> => {\n      const problemId = request.params.problemId;\n      if (problemId == null) return null;\n\n      const { requestError, response } = await api.problem.getProblem({\n        id: Number(problemId) || 0,\n        localizedContentsOfLocale: appState.locale,\n        localizedContentsTitleOnly: true\n      });\n\n      if (requestError) throw new RouteError(requestError, { showRefresh: true, showBack: true });\n      else if (response.error) throw new RouteError(makeToBeLocalizedText(`discussion_edit.errors.${response.error}`));\n\n      return {\n        meta: response.meta,\n        title: response.localizedContentsOfLocale.title\n      };\n    })();\n\n    return <DiscussionEditPage key={uuid()} problem={problem} />;\n  }),\n  edit: defineRoute(async request => {\n    const { requestError, response } = await api.discussion.getDiscussionAndReplies({\n      locale: appState.locale,\n      discussionId: Number(request.params.id) || 0,\n      getDiscussion: true\n    });\n\n    if (requestError) throw new RouteError(requestError, { showRefresh: true, showBack: true });\n    else if (response.error) throw new RouteError(makeToBeLocalizedText(`discussion_edit.errors.${response.error}`));\n\n    return <DiscussionEditPage key={uuid()} discussion={response.discussion} />;\n  })\n};\n"],"sourceRoot":""}