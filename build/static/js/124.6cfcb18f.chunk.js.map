{"version":3,"sources":["components/CodeEditor.tsx"],"names":["Monaco","register","id","registerRulesForLanguage","require","defineTheme","CodeEditor","props","refEditor","useRef","containerRef","resizeSensorRef","ref","div","current","detach","ResizeSensor","layout","className","style","editorContainer","theme","themeList","appState","editor","language","value","options","lineNumbersMinChars","generateCodeFontEditorOptions","locale","editorDidMount","getModel","setEOL","EndOfLineSequence","LF","console","log","onChange","observer"],"mappings":"yPAeEA,YAAiBC,SAAS,CAAEC,GAAI,YAChCC,mCAAyB,UAAW,IAAKC,EAAQ,MAAb,UAItCJ,SAAcK,YAAY,WAAYD,EAAQ,OAC9CJ,SAAcK,YAAY,iBAAkBD,EAAQ,OAWpD,IAAIE,EAAwC,SAAAC,GAC1C,IAAMC,EAAYC,mBAYlB,IAAMC,EAAeD,mBACfE,EAAkBF,mBAexB,OACE,qBACEG,IAhBJ,SAAgCC,GAC1BH,EAAaI,UAAYD,IACvBF,EAAgBG,SAClBH,EAAgBG,QAAQC,SAGxBJ,EAAgBG,QADdD,EACwB,IAAIG,IAAaH,GAAK,WAC1CL,EAAUM,SAASN,EAAUM,QAAQG,YAEZ,KACjCP,EAAaI,QAAUD,IAOvBK,UAAWX,EAAMW,UAAN,UAAqBC,IAAMC,gBAA3B,YAA8Cb,EAAMW,WAAcC,IAAMC,gBAFrF,SAIE,cAAC,IAAD,CACEC,MAAOC,IAAUC,IAASF,OAAOG,OACjCC,SAAUlB,EAAMkB,SAChBC,MAAOnB,EAAMmB,MACbC,QAAO,yBACLC,oBAAqB,GAClBC,YAA8BN,IAASO,SACvCvB,EAAMoB,SAEXI,eAzCN,SAAwBP,GACtBA,EAAOQ,WAAWC,OAAOjC,SAAckC,kBAAkBC,IAEzD3B,EAAUM,QAAUU,EACpBY,QAAQC,IAAI,iBAAkBb,GAE1BjB,EAAMwB,gBAAgBxB,EAAMwB,eAAeP,IAoC3Cc,SAAU/B,EAAM+B,cAMxBhC,EAAaiC,YAASjC,GAEPA,a","file":"static/js/124.6cfcb18f.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { observer } from \"mobx-react\";\nimport ReactMonacoEditor from \"react-monaco-editor\";\nimport * as Monaco from \"monaco-editor\";\nimport { registerRulesForLanguage } from \"monaco-ace-tokenizer\";\nimport ResizeSensor from \"css-element-queries/src/ResizeSensor\";\n\nimport style from \"./CodeEditor.module.less\";\n\nimport { CodeLanguage } from \"@/interfaces/CodeLanguage\";\nimport { appState } from \"@/appState\";\nimport { generateCodeFontEditorOptions } from \"@/misc/fonts\";\nimport { themeList } from \"@/themes\";\n\nfunction loadAceHighlights() {\n  Monaco.languages.register({ id: \"haskell\" });\n  registerRulesForLanguage(\"haskell\", new (require(\"monaco-ace-tokenizer/es/ace/definitions/haskell\").default)());\n}\nloadAceHighlights();\n\nMonaco.editor.defineTheme(\"tomorrow\", require(\"@/assets/monaco-tomorrow.json\"));\nMonaco.editor.defineTheme(\"tomorrow-night\", require(\"@/assets/monaco-tomorrow-night.json\"));\n\nexport interface CodeEditorProps {\n  editorDidMount?: (editor: Monaco.editor.IStandaloneCodeEditor) => void;\n  className?: string;\n  value: string;\n  language: CodeLanguage | string;\n  onChange?: (newValue: string) => void;\n  options?: Monaco.editor.IEditorConstructionOptions;\n}\n\nlet CodeEditor: React.FC<CodeEditorProps> = props => {\n  const refEditor = useRef<Monaco.editor.IStandaloneCodeEditor>();\n  function editorDidMount(editor: Monaco.editor.IStandaloneCodeEditor) {\n    editor.getModel().setEOL(Monaco.editor.EndOfLineSequence.LF);\n\n    refEditor.current = editor;\n    console.log(\"Monaco Editor:\", editor);\n\n    if (props.editorDidMount) props.editorDidMount(editor);\n  }\n\n  // The Monaco Editor's automaticLayout option doesn't work on a initially hidden editor\n  // So use ResizeSensor instead\n  const containerRef = useRef<HTMLDivElement>();\n  const resizeSensorRef = useRef<ResizeSensor>();\n  function initializeResizeSensor(div: HTMLDivElement) {\n    if (containerRef.current !== div) {\n      if (resizeSensorRef.current) {\n        resizeSensorRef.current.detach();\n      }\n      if (div) {\n        resizeSensorRef.current = new ResizeSensor(div, () => {\n          if (refEditor.current) refEditor.current.layout();\n        });\n      } else resizeSensorRef.current = null;\n      containerRef.current = div;\n    }\n  }\n\n  return (\n    <div\n      ref={initializeResizeSensor}\n      className={props.className ? `${style.editorContainer} ${props.className}` : style.editorContainer}\n    >\n      <ReactMonacoEditor\n        theme={themeList[appState.theme].editor}\n        language={props.language}\n        value={props.value}\n        options={{\n          lineNumbersMinChars: 4,\n          ...generateCodeFontEditorOptions(appState.locale),\n          ...props.options\n        }}\n        editorDidMount={editorDidMount}\n        onChange={props.onChange}\n      />\n    </div>\n  );\n};\n\nCodeEditor = observer(CodeEditor);\n\nexport default CodeEditor;\n"],"sourceRoot":""}