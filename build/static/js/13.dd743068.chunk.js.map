{"version":3,"sources":["components/CodeBox.tsx"],"names":["CodeBox","React","forwardRef","props","ref","content","html","undefined","useState","preElement","setPreElement","useEffect","fontFaceOverride","style","setProperty","removeProperty","fontSizeOverride","lineHeightOverride","String","fontLigaturesOverride","className","codeBox","title","codeBoxSegment","segmentClassName","segment","children","pre","current","codeBoxContent","wrap","dangerouslySetInnerHTML","__html","HighlightedCodeBox","CodeHighlighter","code","language","OmittedLabel","_","useLocalizer","omittedLabel","omittedLength","count","OmittableAnsiCodeBox","useMemo","omittableContent","ansiMessage","text","data","AnsiUp","ansi_to_html","mainCodeBox","codeBoxStyle"],"mappings":"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","file":"static/js/13.dd743068.chunk.js","sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\";\nimport { Segment, SegmentProps } from \"semantic-ui-react\";\nimport AnsiUp from \"ansi_up\";\n\nimport style from \"./CodeBox.module.less\";\nimport * as CodeHighlighter from \"@/utils/CodeHighlighter\";\nimport { useLocalizer } from \"@/utils/hooks\";\nimport { EmojiRenderer } from \"./EmojiRenderer\";\n\nexport type OmittableString =\n  | string\n  | {\n      data: string;\n      omittedLength: number;\n    };\n\ninterface CodeBoxProps {\n  children?: React.ReactNode;\n  className?: string;\n  segmentClassName?: string;\n  segment?: SegmentProps;\n  title?: React.ReactNode;\n  content?: React.ReactNode;\n  html?: string;\n  fontFaceOverride?: string;\n  fontSizeOverride?: number;\n  lineHeightOverride?: number;\n  fontLigaturesOverride?: boolean;\n  wrap?: boolean;\n}\n\nexport const CodeBox = React.forwardRef<HTMLPreElement, CodeBoxProps>((props, ref) => {\n  const content = !props.html ? props.content : undefined;\n  const [preElement, setPreElement] = useState<HTMLPreElement>();\n\n  function refPre(pre: HTMLPreElement) {\n    if (typeof ref === \"function\") ref(pre);\n    else if (ref) ref.current = pre;\n\n    setPreElement(pre);\n  }\n\n  useEffect(() => {\n    // Override font\n    if (preElement) {\n      if (props.fontFaceOverride)\n        preElement.style.setProperty(\"font-family\", `\"${props.fontFaceOverride}\"`, \"important\");\n      else preElement.style.removeProperty(\"font-family\");\n\n      if (typeof props.fontSizeOverride === \"number\")\n        preElement.style.setProperty(\"font-size\", `${props.fontSizeOverride}px`, \"important\");\n      else preElement.style.removeProperty(\"font-size\");\n\n      if (typeof props.lineHeightOverride === \"number\")\n        preElement.style.setProperty(\"line-height\", String(props.lineHeightOverride), \"important\");\n      else preElement.style.removeProperty(\"line-height\");\n\n      // fontLigatures is enabled by default\n      if (props.fontLigaturesOverride === false)\n        preElement.style.setProperty(\"font-variant-ligatures\", \"none\", \"important\");\n      else preElement.style.removeProperty(\"font-variant-ligatures\");\n    }\n  }, [\n    preElement,\n    props.fontFaceOverride,\n    props.fontSizeOverride,\n    props.lineHeightOverride,\n    props.fontLigaturesOverride\n  ]);\n\n  return props.html || content ? (\n    <div className={style.codeBox + (props.className ? \" \" + props.className : \"\")}>\n      {props.title && <p>{typeof props.title === \"string\" ? <strong>{props.title}</strong> : props.title}</p>}\n      <Segment\n        className={style.codeBoxSegment + (props.segmentClassName ? \" \" + props.segmentClassName : \"\")}\n        {...props.segment}\n      >\n        {props.children}\n        <EmojiRenderer>\n          <pre\n            ref={refPre}\n            className={style.codeBoxContent + (props.wrap ? \" \" + style.wrap : \"\")}\n            dangerouslySetInnerHTML={props.html ? { __html: props.html } : undefined}\n          >\n            {content}\n          </pre>\n        </EmojiRenderer>\n      </Segment>\n    </div>\n  ) : null;\n});\n\ninterface HighlightedCodeBoxProps {\n  children?: React.ReactNode;\n  className?: string;\n  segmentClassName?: string;\n  segment?: SegmentProps;\n  title?: React.ReactNode;\n  code: string;\n  language: string;\n  fontFaceOverride?: string;\n  fontSizeOverride?: number;\n  lineHeightOverride?: number;\n  fontLigaturesOverride?: boolean;\n}\n\nexport const HighlightedCodeBox = React.forwardRef<HTMLPreElement, HighlightedCodeBoxProps>((props, ref) => {\n  const html = CodeHighlighter.highlight(props.code, props.language);\n  return (\n    <CodeBox\n      className={props.className}\n      segmentClassName={props.segmentClassName}\n      segment={props.segment}\n      title={props.title}\n      html={html}\n      fontFaceOverride={props.fontFaceOverride}\n      fontSizeOverride={props.fontSizeOverride}\n      lineHeightOverride={props.lineHeightOverride}\n      fontLigaturesOverride={props.fontLigaturesOverride}\n      ref={ref}\n    >\n      {props.children}\n    </CodeBox>\n  );\n});\n\ninterface OmittedLabelProps {\n  omittedLength: number;\n}\n\nconst OmittedLabel: React.FC<OmittedLabelProps> = props => {\n  const _ = useLocalizer(\"components.code_box\");\n\n  return (\n    <div className={style.omittedLabel + \" monospace\"}>\n      {props.omittedLength === 1\n        ? _(\".omitted\", { count: props.omittedLength })\n        : _(\".omitted_s\", { count: props.omittedLength })}\n    </div>\n  );\n};\n\ninterface OmittableCodeBoxProps {\n  className?: string;\n  title?: React.ReactNode;\n  content: OmittableString;\n}\n\nexport const OmittableCodeBox: React.FC<OmittableCodeBoxProps> = React.forwardRef<\n  HTMLPreElement,\n  OmittableCodeBoxProps\n>((props, ref) => {\n  const omittableContent = props.content || \"\";\n  const content = typeof omittableContent === \"string\" ? omittableContent : omittableContent.data;\n  const omittedLength = typeof omittableContent === \"string\" ? 0 : omittableContent.omittedLength;\n  return (\n    <CodeBox className={style.mainCodeBox} title={props.title} content={content} ref={ref}>\n      {omittedLength ? <OmittedLabel omittedLength={omittedLength} /> : null}\n    </CodeBox>\n  );\n});\n\ninterface OmittableAnsiCodeBoxProps {\n  className?: string;\n  title?: React.ReactNode;\n  ansiMessage: OmittableString;\n}\n\nexport const OmittableAnsiCodeBox = React.forwardRef<HTMLPreElement, OmittableAnsiCodeBoxProps>((props, ref) => {\n  const [html, omittedLength] = useMemo(() => {\n    const omittableContent = props.ansiMessage || \"\";\n    const text = typeof omittableContent === \"string\" ? omittableContent : omittableContent.data;\n    const omittedLength = typeof omittableContent === \"string\" ? 0 : omittableContent.omittedLength;\n    const converter = new AnsiUp();\n    return [converter.ansi_to_html(text), omittedLength];\n  }, [props.ansiMessage]);\n\n  return (\n    <CodeBox className={style.mainCodeBox} title={props.title} html={html} ref={ref}>\n      {omittedLength ? <OmittedLabel omittedLength={omittedLength} /> : null}\n    </CodeBox>\n  );\n});\n\nexport const codeBoxStyle = {\n  segment: style.codeBoxSegment,\n  pre: style.codeBoxContent\n};\n"],"sourceRoot":""}