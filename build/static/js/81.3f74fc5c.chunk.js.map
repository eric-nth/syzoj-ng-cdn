{"version":3,"sources":["pages/problem/edit/defaultSections.ts","pages/problem/edit/ProblemEditPage.tsx"],"names":["Locale","zh_CN","uuid","sectionTitle","type","text","sampleId","en_US","ja_JP","fetchData","idType","id","a","api","problem","getProblem","appState","locale","requestError","response","RouteError","showRefresh","showBack","error","makeToBeLocalizedText","fetchDataAllProblemTags","getAllProblemTags","tags","LocalizedContentEditorSection","props","_","useLocalizer","useState","preview","setPreview","refOptionsButton","setRefOptionsButton","problemViewMarkdownContentPatcher","useProblemViewMarkdownContentPatcher","problemId","Menu","attached","className","style","toolbarMenu","Item","toolbarMenuInputItem","Input","boldInput","fluid","transparent","placeholder","value","section","onChange","e","onChangeSectionValue","position","Checkbox","fitted","label","checked","isPreview","disabled","Dropdown","item","options","samples","map","sample","key","onClick","onChangeSectionSampleId","Icon","name","closeOnChange","onChangeSectionType","icon","toolbarMenuIconItem","onAddSectionBefore","onAddSectionAfter","Ref","innerRef","isFirst","onMoveSectionUp","isLast","onMoveSectionDown","Popup","trigger","context","content","Button","color","onDeleteSection","on","Segment","sectionSegment","data-type","Grid","columns","sampleEditorGrid","Row","Column","Form","TextArea","rows","inputData","onChangeSampleData","outputData","basic","MarkdownContent","patcher","getMarkdownEditorFontClass","as","TextAreaAutoSize","minRows","maxRows","LocalizedContentEditor","addDefaultSectionsPopupOpen","setAddDefaultSectionsPopupOpen","localizedContent","title","onChangeTitle","isOnly","Radio","isDefault","onMakeDefault","open","onOpen","onClose","onAddDefaultSections","onDelete","contentSections","index","length","newValue","newType","newSampleId","onAddSection","onMoveSection","SampleEditor","useRef","readOnly","warningMessage","List","bulleted","sampleWarningMessage","referenceCount","language","localeMeta","toString","onAddSampleBefore","onAddSampleAfter","onMoveSampleUp","onMoveSampleDown","onDeleteSample","ProblemEditPage","navigation","useNavigationChecked","idString","new","getProblemIdString","meta","useEffect","enterNewPage","recaptcha","useRecaptcha","converted","defaultSections","localizedContentsOfAllLocales","localizedContents","setLocalizedContents","ProblemType","Traditional","newProblemType","setNewProblemType","useConfirmNavigation","modified","setModified","useAsyncCallbackPending","localizedContentsPayload","Object","keys","locales","defaultLocale","some","locaizedContents","toast","samplesPayload","createProblem","statement","problemTagIds","tagIds","navigate","getProblemUrl","updateStatement","success","pendingSubmit","onSubmit","onBackToProblem","pathname","use","query","requestedLocale","onAddSample","setSamples","update","$push","ensureFirstNotReferencedSampleId","find","i","newData","$set","updateSampleIdReference","callback","spec","forEach","$unset","onAddSampleAt","$splice","onMoveSample","direction","swappingSampleId","activeLocale","setActiveLocale","tagsOfLocale","problemTag","setTagIds","setDefaultLocale","haveSubmitPermission","permissionOfCurrentUser","includes","row","width","Header","headerContainer","compact","typeDropdown","values","backButton","negative","primary","loading","LocalizeTab","filter","onAddDefaultSectionsToLocale","nextLocale","deleteingIndex","indexOf","onDeleteLocale","onAddLocale","onSetActiveLocale","Dimmer","Dimmable","dimmed","noSampleDimmer","active","x","search","toLowerCase","result","option","sort","b","startsWith","multiple","selection","noResultsMessage","allProblemTags","observer","defineRoute","request","byId","parseInt","params","Promise","all","byDisplayId","displayId"],"mappings":"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","file":"static/js/81.3f74fc5c.chunk.js","sourcesContent":["import { v4 as uuid } from \"uuid\";\n\nimport { Locale } from \"@/interfaces/Locale\";\n\nimport type { LocalizedContentSection } from \"./ProblemEditPage\";\n\nexport default <Record<Locale, LocalizedContentSection[]>>{\n  [Locale.zh_CN]: [\n    {\n      uuid: uuid(),\n      sectionTitle: \"题目描述\",\n      type: \"Text\",\n      text: \"\"\n    },\n    {\n      uuid: uuid(),\n      sectionTitle: \"输入格式\",\n      type: \"Text\",\n      text: \"\"\n    },\n    {\n      uuid: uuid(),\n      sectionTitle: \"输出格式\",\n      type: \"Text\",\n      text: \"\"\n    },\n    {\n      uuid: uuid(),\n      sectionTitle: \"样例\",\n      type: \"Sample\",\n      sampleId: 0,\n      text: \"\"\n    },\n    {\n      uuid: uuid(),\n      sectionTitle: \"数据范围与提示\",\n      type: \"Text\",\n      text: \"\"\n    }\n  ],\n  [Locale.en_US]: [\n    {\n      uuid: uuid(),\n      sectionTitle: \"Description\",\n      type: \"Text\",\n      text: \"\"\n    },\n    {\n      uuid: uuid(),\n      sectionTitle: \"Input\",\n      type: \"Text\",\n      text: \"\"\n    },\n    {\n      uuid: uuid(),\n      sectionTitle: \"Output\",\n      type: \"Text\",\n      text: \"\"\n    },\n    {\n      uuid: uuid(),\n      sectionTitle: \"Sample\",\n      type: \"Sample\",\n      sampleId: 0,\n      text: \"\"\n    },\n    {\n      uuid: uuid(),\n      sectionTitle: \"Limits And Hints\",\n      type: \"Text\",\n      text: \"\"\n    }\n  ],\n  [Locale.ja_JP]: [\n    {\n      uuid: uuid(),\n      sectionTitle: \"問題文\",\n      type: \"Text\",\n      text: \"\"\n    },\n    {\n      uuid: uuid(),\n      sectionTitle: \"入力\",\n      type: \"Text\",\n      text: \"\"\n    },\n    {\n      uuid: uuid(),\n      sectionTitle: \"出力\",\n      type: \"Text\",\n      text: \"\"\n    },\n    {\n      uuid: uuid(),\n      sectionTitle: \"例\",\n      type: \"Sample\",\n      sampleId: 0,\n      text: \"\"\n    },\n    {\n      uuid: uuid(),\n      sectionTitle: \"制約\",\n      type: \"Text\",\n      text: \"\"\n    }\n  ]\n};\n","import React, { useEffect, useState, useRef } from \"react\";\nimport {\n  Dropdown,\n  Grid,\n  Icon,\n  Header,\n  Menu,\n  Segment,\n  Popup,\n  Button,\n  Form,\n  Input,\n  TextArea,\n  Checkbox,\n  Radio,\n  Dimmer,\n  List,\n  Ref\n} from \"semantic-ui-react\";\nimport TextAreaAutoSize from \"react-textarea-autosize\";\nimport { v4 as uuid } from \"uuid\";\nimport update from \"immutability-helper\";\n\nimport style from \"./ProblemEditPage.module.less\";\n\nimport api from \"@/api\";\nimport { Locale } from \"@/interfaces/Locale\";\nimport localeMeta from \"@/locales/meta\";\nimport { appState } from \"@/appState\";\nimport toast from \"@/utils/toast\";\nimport {\n  useLocalizer,\n  useConfirmNavigation,\n  useAsyncCallbackPending,\n  useRecaptcha,\n  useNavigationChecked\n} from \"@/utils/hooks\";\nimport { observer } from \"mobx-react\";\nimport { defineRoute, RouteError } from \"@/AppRouter\";\nimport { ProblemType } from \"@/interfaces/ProblemType\";\nimport MarkdownContent from \"@/markdown/MarkdownContent\";\nimport { getProblemIdString, getProblemUrl } from \"../utils\";\nimport { useProblemViewMarkdownContentPatcher } from \"../view/ProblemViewPage\";\nimport { makeToBeLocalizedText } from \"@/locales\";\nimport { LocalizeTab } from \"@/components/LocalizeTab\";\nimport { getMarkdownEditorFontClass } from \"@/misc/fonts\";\nimport defaultSections from \"./defaultSections\";\n\ntype Problem = ApiTypes.GetProblemResponseDto;\n\nasync function fetchData(idType: \"id\" | \"displayId\", id: number): Promise<Problem> {\n  const { requestError, response } = await api.problem.getProblem({\n    [idType]: id,\n    localizedContentsOfAllLocales: true,\n    tagsOfLocale: appState.locale,\n    samples: true,\n    permissionOfCurrentUser: true\n  });\n\n  if (requestError) throw new RouteError(requestError, { showRefresh: true, showBack: true });\n  else if (response.error) throw new RouteError(makeToBeLocalizedText(`problem_edit.error.${response.error}`));\n\n  return response;\n}\n\nasync function fetchDataAllProblemTags(): Promise<ApiTypes.LocalizedProblemTagDto[]> {\n  const { requestError, response } = await api.problem.getAllProblemTags({\n    locale: appState.locale\n  });\n\n  if (requestError) throw new RouteError(requestError, { showRefresh: true, showBack: true });\n\n  return response.tags;\n}\n\nexport interface LocalizedContentSection {\n  uuid: string;\n  sectionTitle: string;\n  type: \"Text\" | \"Sample\";\n  sampleId?: number;\n  text?: string;\n}\n\ninterface LocalizedContent {\n  title: string;\n  contentSections: LocalizedContentSection[];\n}\n\ninterface Sample {\n  uuid: string;\n  inputData: string;\n  outputData: string;\n}\n\ninterface LocalizedContentEditorSectionProps {\n  problemId: number;\n\n  section: LocalizedContentSection;\n  samples: Sample[];\n\n  isPreview: boolean;\n  isFirst: boolean;\n  isLast: boolean;\n\n  onChangeSectionValue: (type: \"sectionTitle\" | \"text\", newValue: string) => void;\n  onChangeSectionType: (newType: \"Text\" | \"Sample\") => void;\n  onChangeSectionSampleId: (newSampleId: number) => void;\n  onChangeSampleData: (sampleId: number, type: \"inputData\" | \"outputData\", newData: string) => void;\n  onAddSectionBefore: () => void;\n  onAddSectionAfter: () => void;\n  onMoveSectionUp: () => void;\n  onMoveSectionDown: () => void;\n  onDeleteSection: () => void;\n}\n\nconst LocalizedContentEditorSection: React.FC<LocalizedContentEditorSectionProps> = props => {\n  const _ = useLocalizer(\"problem_edit\");\n\n  const [preview, setPreview] = useState(false);\n\n  const [refOptionsButton, setRefOptionsButton] = useState<HTMLElement>();\n\n  const problemViewMarkdownContentPatcher = useProblemViewMarkdownContentPatcher(props.problemId);\n\n  return (\n    <>\n      <Menu attached=\"top\" className={style.toolbarMenu}>\n        <Menu.Item className={style.toolbarMenuInputItem}>\n          <Input\n            className={style.boldInput}\n            fluid\n            transparent\n            placeholder={_(\".content_editor.section_title\")}\n            value={props.section.sectionTitle}\n            onChange={(e, { value }) => props.onChangeSectionValue(\"sectionTitle\", value)}\n          />\n        </Menu.Item>\n        <Menu.Menu position=\"right\">\n          <Menu.Item>\n            <Checkbox\n              fitted\n              label={_(\".content_editor.preview\")}\n              checked={preview || props.isPreview}\n              disabled={props.isPreview}\n              onChange={(e, { checked }) => setPreview(checked)}\n            />\n          </Menu.Item>\n          {props.section.type === \"Sample\" && (\n            <Dropdown\n              item\n              value={props.section.sampleId}\n              options={[\n                ...props.samples.map((sample, id) => ({\n                  key: id,\n                  text: id + 1,\n                  value: id,\n                  onClick: () => props.onChangeSectionSampleId(id)\n                })),\n                {\n                  key: \"new\",\n                  text: (\n                    <>\n                      <Icon name=\"add\" />\n                      {_(\".content_editor.new_sample\")}\n                    </>\n                  ),\n                  value: \"new\",\n                  onClick: () => props.onChangeSectionSampleId(null)\n                }\n              ]}\n            />\n          )}\n          <Dropdown\n            item\n            closeOnChange\n            value={props.section.type}\n            options={[\n              {\n                key: \"Text\",\n                text: (\n                  <>\n                    <Icon name=\"sticky note\" />\n                    {_(\".content_editor.section_type.text\")}\n                  </>\n                ),\n                value: \"Text\",\n                onClick: () => props.section.type === \"Text\" || props.onChangeSectionType(\"Text\")\n              },\n              {\n                key: \"Sample\",\n                text: (\n                  <>\n                    <Icon name=\"sticky note outline\" />\n                    {_(\".content_editor.section_type.sample\")}\n                  </>\n                ),\n                value: \"Sample\",\n                onClick: () => props.section.type === \"Sample\" || props.onChangeSectionType(\"Sample\")\n              }\n            ]}\n          />\n          <Dropdown item closeOnChange icon=\"add\" className={`icon ${style.toolbarMenuIconItem}`}>\n            <Dropdown.Menu>\n              <Dropdown.Item\n                icon=\"arrow up\"\n                text={_(\".content_editor.add_section.before_this_section\")}\n                onClick={() => props.onAddSectionBefore()}\n              />\n              <Dropdown.Item\n                icon=\"arrow down\"\n                text={_(\".content_editor.add_section.after_this_section\")}\n                onClick={() => props.onAddSectionAfter()}\n              />\n            </Dropdown.Menu>\n          </Dropdown>\n          <Ref innerRef={setRefOptionsButton}>\n            <Dropdown item icon=\"bars\" className={`icon ${style.toolbarMenuIconItem}`}>\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  disabled={props.isFirst}\n                  icon=\"angle double up\"\n                  text={_(\".content_editor.section_options.move_up\")}\n                  onClick={() => props.onMoveSectionUp()}\n                />\n                <Dropdown.Item\n                  disabled={props.isLast}\n                  icon=\"angle double down\"\n                  text={_(\".content_editor.section_options.move_down\")}\n                  onClick={() => props.onMoveSectionDown()}\n                />\n                <Popup\n                  trigger={\n                    <Dropdown.Item\n                      disabled={props.isFirst && props.isLast}\n                      icon=\"delete\"\n                      text={_(\".content_editor.section_options.delete\")}\n                    />\n                  }\n                  context={refOptionsButton}\n                  content={\n                    <Button\n                      color=\"red\"\n                      content={_(\".content_editor.section_options.confirm_delete\")}\n                      onClick={() => props.onDeleteSection()}\n                    />\n                  }\n                  on=\"click\"\n                  position=\"bottom right\"\n                />\n              </Dropdown.Menu>\n            </Dropdown>\n          </Ref>\n        </Menu.Menu>\n      </Menu>\n      <Segment attached=\"bottom\" className={style.sectionSegment} data-type={props.section.type}>\n        {props.section.type === \"Sample\" ? (\n          <Grid columns=\"equal\" className={style.sampleEditorGrid}>\n            <Grid.Row>\n              <Grid.Column>\n                <Form>\n                  <TextArea\n                    className=\"monospace\"\n                    rows={4}\n                    value={props.samples[props.section.sampleId].inputData}\n                    placeholder={_(\".content_editor.sample_input\")}\n                    onChange={(e, { value }) =>\n                      props.onChangeSampleData(props.section.sampleId, \"inputData\", value as string)\n                    }\n                  />\n                </Form>\n              </Grid.Column>\n              <Grid.Column>\n                <Form>\n                  <TextArea\n                    className=\"monospace\"\n                    rows={4}\n                    value={props.samples[props.section.sampleId].outputData}\n                    placeholder={_(\".content_editor.sample_output\")}\n                    onChange={(e, { value }) =>\n                      props.onChangeSampleData(props.section.sampleId, \"outputData\", value as string)\n                    }\n                  />\n                </Form>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                {preview || props.isPreview ? (\n                  <Segment basic>\n                    <MarkdownContent content={props.section.text} patcher={problemViewMarkdownContentPatcher} />\n                  </Segment>\n                ) : (\n                  <Form>\n                    <TextArea\n                      className={getMarkdownEditorFontClass()}\n                      as={TextAreaAutoSize}\n                      minRows={6}\n                      maxRows={16}\n                      value={props.section.text}\n                      placeholder={_(\".content_editor.sample_explanation\")}\n                      onChange={(e, { value }) => props.onChangeSectionValue(\"text\", value as string)}\n                    />\n                  </Form>\n                )}\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        ) : preview || props.isPreview ? (\n          <Segment basic>\n            <MarkdownContent content={props.section.text} patcher={problemViewMarkdownContentPatcher} />\n          </Segment>\n        ) : (\n          <Form>\n            <TextArea\n              className={getMarkdownEditorFontClass()}\n              as={TextAreaAutoSize}\n              minRows={6}\n              maxRows={16}\n              value={props.section.text}\n              placeholder={_(\".content_editor.section_content\")}\n              onChange={(e, { value }) => props.onChangeSectionValue(\"text\", value as string)}\n            />\n          </Form>\n        )}\n      </Segment>\n    </>\n  );\n};\n\ninterface LocalizedContentEditorProps {\n  problemId: number;\n\n  localizedContent: LocalizedContent;\n  samples: Sample[];\n\n  isOnly: boolean;\n  isDefault: boolean;\n  onMakeDefault: () => void;\n  onAddDefaultSections: () => void;\n  onDelete: () => void;\n\n  onChangeTitle: (newTitle: string) => void;\n\n  onChangeSectionValue: (index: number, type: \"sectionTitle\" | \"text\", newValue: string) => void;\n  onChangeSectionType: (index: number, newType: \"Text\" | \"Sample\") => void;\n  onChangeSectionSampleId: (index: number, newSampleId: number) => void;\n  onChangeSampleData: (sampleId: number, type: \"inputData\" | \"outputData\", newData: string) => void;\n  onAddSection: (index: number, type: \"Text\" | \"Sample\") => void;\n  onDeleteSection: (index: number) => void;\n  onMoveSection: (index: number, direction: \"UP\" | \"DOWN\") => void;\n}\n\nconst LocalizedContentEditor: React.FC<LocalizedContentEditorProps> = props => {\n  const _ = useLocalizer(\"problem_edit\");\n\n  const [preview, setPreview] = useState(false);\n\n  const [addDefaultSectionsPopupOpen, setAddDefaultSectionsPopupOpen] = useState(false);\n\n  return (\n    <>\n      <Menu attached=\"top\" className={style.toolbarMenu}>\n        <Menu.Item className={style.toolbarMenuInputItem}>\n          <Input\n            className={style.boldInput}\n            fluid\n            transparent\n            placeholder={_(\".content_editor.title\")}\n            value={props.localizedContent.title}\n            onChange={(e, { value }) => props.onChangeTitle(value)}\n          />\n        </Menu.Item>\n        <Menu.Menu position=\"right\">\n          <Menu.Item>\n            <Checkbox\n              label={_(\".content_editor.preview_all\")}\n              checked={preview}\n              onChange={(e, { checked }) => setPreview(checked)}\n            />\n          </Menu.Item>\n          {!props.isOnly && (\n            <>\n              <Menu.Item>\n                <Radio\n                  label={_(\".content_editor.default\")}\n                  checked={props.isDefault}\n                  onChange={(e, { checked }) => checked && props.onMakeDefault()}\n                />\n              </Menu.Item>\n            </>\n          )}\n          <Popup\n            trigger={<Menu.Item as=\"a\" icon=\"file alternate outline\" className={style.toolbarMenuIconItem} />}\n            open={addDefaultSectionsPopupOpen}\n            onOpen={() => setAddDefaultSectionsPopupOpen(true)}\n            onClose={() => setAddDefaultSectionsPopupOpen(false)}\n            content={\n              <Button\n                color=\"green\"\n                content={_(\".content_editor.add_default_sections\")}\n                onClick={() => {\n                  setAddDefaultSectionsPopupOpen(false);\n                  props.onAddDefaultSections();\n                }}\n              />\n            }\n            on=\"click\"\n            position=\"top right\"\n          />\n          {!props.isOnly && (\n            <>\n              <Popup\n                trigger={<Menu.Item as=\"a\" icon=\"delete\" className={style.toolbarMenuIconItem} />}\n                content={\n                  <Button color=\"red\" content={_(\".content_editor.confirm_delete\")} onClick={() => props.onDelete()} />\n                }\n                on=\"click\"\n                position=\"top right\"\n              />\n            </>\n          )}\n        </Menu.Menu>\n      </Menu>\n      {props.localizedContent.contentSections.map((section, index) => (\n        <LocalizedContentEditorSection\n          key={section.uuid}\n          problemId={props.problemId}\n          section={section}\n          samples={props.samples}\n          isPreview={preview}\n          isFirst={index === 0}\n          isLast={index === props.localizedContent.contentSections.length - 1}\n          onChangeSectionValue={(type, newValue) => props.onChangeSectionValue(index, type, newValue)}\n          onChangeSectionType={newType => props.onChangeSectionType(index, newType)}\n          onChangeSectionSampleId={newSampleId => props.onChangeSectionSampleId(index, newSampleId)}\n          onChangeSampleData={props.onChangeSampleData}\n          onAddSectionBefore={() => props.onAddSection(index, section.type)}\n          onAddSectionAfter={() => props.onAddSection(index + 1, section.type)}\n          onMoveSectionUp={() => props.onMoveSection(index, \"UP\")}\n          onMoveSectionDown={() => props.onMoveSection(index, \"DOWN\")}\n          onDeleteSection={() => props.onDeleteSection(index)}\n        />\n      ))}\n    </>\n  );\n};\n\ninterface SampleEditorProps {\n  sampleId: number;\n  sample: Sample;\n  warningMessage: {\n    locale: Locale;\n    referenceCount: number;\n  }[];\n\n  isFirst: boolean;\n  isLast: boolean;\n\n  onChangeSampleData: (type: \"inputData\" | \"outputData\", newData: string) => void;\n  onAddSampleBefore: () => void;\n  onAddSampleAfter: () => void;\n  onMoveSampleUp: () => void;\n  onMoveSampleDown: () => void;\n  onDeleteSample: () => void;\n}\n\nconst SampleEditor: React.FC<SampleEditorProps> = props => {\n  const _ = useLocalizer(\"problem_edit\");\n\n  const refOptionsButton = useRef(null);\n\n  return (\n    <>\n      <Menu attached=\"top\" className={style.toolbarMenu}>\n        <Menu.Item className={style.toolbarMenuInputItem}>\n          <Input\n            className={style.boldInput}\n            fluid\n            transparent\n            placeholder={_(\".sample_editor.sample_id\")}\n            value={props.sampleId == null ? \"\" : props.sampleId + 1}\n            readOnly\n          />\n        </Menu.Item>\n        <Menu.Menu position=\"right\">\n          {props.warningMessage.length > 0 && (\n            <Popup\n              trigger={<Menu.Item icon=\"warning sign\" className={style.toolbarMenuIconItem} />}\n              position=\"top right\"\n              content={\n                <List bulleted className={style.sampleWarningMessage}>\n                  {props.warningMessage.map((warningMessage, index) => (\n                    <List.Item key={index}>\n                      {warningMessage.referenceCount === 0\n                        ? _(\".sample_editor.warning.not_referenced\", {\n                            language: localeMeta[warningMessage.locale].name\n                          })\n                        : _(\".sample_editor.warning.multiple_references\", {\n                            language: localeMeta[warningMessage.locale].name,\n                            referenceCount: warningMessage.referenceCount.toString()\n                          })}\n                    </List.Item>\n                  ))}\n                </List>\n              }\n            />\n          )}\n          <Dropdown item closeOnChange icon=\"add\" className={`icon ${style.toolbarMenuIconItem}`}>\n            <Dropdown.Menu>\n              <Dropdown.Item\n                icon=\"arrow up\"\n                text={_(\".sample_editor.add_sample.before_this_sample\")}\n                onClick={() => props.onAddSampleBefore()}\n              />\n              <Dropdown.Item\n                icon=\"arrow down\"\n                text={_(\".sample_editor.add_sample.after_this_sample\")}\n                onClick={() => props.onAddSampleAfter()}\n              />\n            </Dropdown.Menu>\n          </Dropdown>\n          <Ref innerRef={refOptionsButton}>\n            <Dropdown item icon=\"bars\" className={`icon ${style.toolbarMenuIconItem}`}>\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  disabled={props.isFirst}\n                  icon=\"angle double up\"\n                  text={_(\".sample_editor.options.move_up\")}\n                  onClick={() => props.onMoveSampleUp()}\n                />\n                <Dropdown.Item\n                  disabled={props.isLast}\n                  icon=\"angle double down\"\n                  text={_(\".sample_editor.options.move_down\")}\n                  onClick={() => props.onMoveSampleDown()}\n                />\n                <Popup\n                  trigger={<Dropdown.Item icon=\"delete\" text={_(\".sample_editor.options.delete\")} />}\n                  context={refOptionsButton}\n                  content={\n                    <Button\n                      color=\"red\"\n                      content={_(\".sample_editor.options.confirm_delete\")}\n                      onClick={() => props.onDeleteSample()}\n                    />\n                  }\n                  on=\"click\"\n                  position=\"bottom right\"\n                />\n              </Dropdown.Menu>\n            </Dropdown>\n          </Ref>\n        </Menu.Menu>\n      </Menu>\n      <Segment attached=\"bottom\" className={style.sectionSegment}>\n        <Grid columns=\"equal\" className={style.sampleEditorGrid}>\n          <Grid.Row>\n            <Grid.Column>\n              <Form>\n                <TextArea\n                  className=\"monospace\"\n                  rows={4}\n                  value={props.sample ? props.sample.inputData : \"\"}\n                  placeholder={_(\".content_editor.sample_input\")}\n                  onChange={(e, { value }) => props.onChangeSampleData(\"inputData\", value as string)}\n                />\n              </Form>\n            </Grid.Column>\n            <Grid.Column>\n              <Form>\n                <TextArea\n                  className=\"monospace\"\n                  rows={4}\n                  value={props.sample ? props.sample.outputData : \"\"}\n                  placeholder={_(\".content_editor.sample_output\")}\n                  onChange={(e, { value }) => props.onChangeSampleData(\"outputData\", value as string)}\n                />\n              </Form>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Segment>\n    </>\n  );\n};\n\ninterface ProblemEditPageProps {\n  idType?: \"id\" | \"displayId\";\n  problem?: Problem;\n  new?: boolean;\n  allProblemTags: ApiTypes.LocalizedProblemTagDto[];\n  requestedLocale?: Locale;\n}\n\nlet ProblemEditPage: React.FC<ProblemEditPageProps> = props => {\n  const _ = useLocalizer(\"problem_edit\");\n  const navigation = useNavigationChecked();\n\n  const idString = !props.new && getProblemIdString(props.problem.meta);\n\n  useEffect(() => {\n    appState.enterNewPage(props.new ? `${_(\".title_new\")}` : `${_(\".title_edit\")} ${idString}`, \"problem_set\", false);\n  }, [appState.locale, props.new, props.problem]);\n\n  const recaptcha = useRecaptcha();\n\n  const [localizedContents, setLocalizedContents] = useState(\n    (() => {\n      const converted: Partial<Record<Locale, LocalizedContent>> = {};\n      if (!props.new) {\n        for (const content of props.problem.localizedContentsOfAllLocales) {\n          converted[content.locale] = {\n            title: content.title,\n            contentSections: content.contentSections.map(section => ({\n              uuid: uuid(),\n              ...section\n            }))\n          };\n        }\n      } else {\n        // For a new problem, use the user's preferred locale\n        converted[appState.locale] = {\n          title: \"\",\n          contentSections: defaultSections[appState.locale]\n        };\n      }\n      return converted;\n    })()\n  );\n\n  const [newProblemType, setNewProblemType] = useState(ProblemType.Traditional);\n\n  const [modified, setModified] = useConfirmNavigation();\n  const [pendingSubmit, onSubmit] = useAsyncCallbackPending(async () => {\n    // Swap the default locale to the first of the array.\n    const localizedContentsPayload = Object.keys(localizedContents)\n      .map((locale: Locale, index, locales: Locale[]) => {\n        if (index === 0) return defaultLocale;\n        if (locale === defaultLocale) return locales[0];\n        return locale;\n      })\n      .map(\n        (locale): ApiTypes.ProblemLocalizedContentDto => ({\n          locale: locale,\n          title: localizedContents[locale].title,\n          contentSections: localizedContents[locale].contentSections.map(section =>\n            section.type === \"Text\"\n              ? {\n                  sectionTitle: section.sectionTitle,\n                  type: \"Text\",\n                  text: section.text\n                }\n              : {\n                  sectionTitle: section.sectionTitle,\n                  type: \"Sample\",\n                  sampleId: section.sampleId,\n                  text: section.text\n                }\n          )\n        })\n      );\n\n    const hasEmpty = localizedContentsPayload.some(\n      locaizedContents =>\n        !locaizedContents.title ||\n        locaizedContents.contentSections.some(\n          section => !section.sectionTitle || (section.type === \"Text\" && !section.text)\n        )\n    );\n    if (hasEmpty) {\n      toast.error(_(\".something_empty\"));\n      return;\n    }\n\n    const samplesPayload = samples.map(sample => ({\n      inputData: sample.inputData,\n      outputData: sample.outputData\n    }));\n\n    if (props.new) {\n      const { requestError, response } = await api.problem.createProblem(\n        {\n          type: newProblemType,\n          statement: {\n            localizedContents: localizedContentsPayload,\n            samples: samplesPayload,\n            problemTagIds: tagIds\n          }\n        },\n        recaptcha(\"CreateProblem\")\n      );\n\n      if (requestError) toast.error(requestError(_));\n      else if (response.error) {\n        toast.error(_(`.error.${response.error}`));\n      } else {\n        setModified(false);\n        navigation.navigate(getProblemUrl(response.id));\n      }\n    } else {\n      const { requestError, response } = await api.problem.updateStatement({\n        problemId: props.problem.meta.id,\n        localizedContents: localizedContentsPayload,\n        samples: samplesPayload,\n        problemTagIds: tagIds\n      });\n\n      if (requestError) toast.error(requestError(_));\n      else if (response.error) {\n        toast.error(_(`.error.${response.error}`));\n      } else {\n        toast.success(_(\".submit_success\"));\n        setModified(false);\n      }\n    }\n  });\n\n  function onBackToProblem() {\n    setModified(false);\n\n    if (props.new) {\n      navigation.navigate(\"/p\");\n    } else {\n      navigation.navigate({\n        pathname: getProblemUrl(props.problem.meta, { use: props.idType }),\n        query: props.requestedLocale\n          ? {\n              locale: props.requestedLocale\n            }\n          : null\n      });\n    }\n  }\n\n  function onAddDefaultSectionsToLocale(locale: Locale) {\n    if (pendingSubmit) return;\n    setModified(true);\n\n    if (samples.length === 0) onAddSample();\n    setLocalizedContents(\n      update(localizedContents, {\n        [locale]: {\n          contentSections: {\n            $set: [\n              ...defaultSections[locale],\n              ...localizedContents[locale].contentSections.filter(\n                section => !(section.type === \"Text\" && !section.sectionTitle && !section.text)\n              )\n            ]\n          }\n        }\n      })\n    );\n  }\n\n  function onDeleteLocale(locale: Locale) {\n    if (pendingSubmit) return;\n    setModified(true);\n\n    const locales = Object.keys(localizedContents) as Locale[];\n\n    // Select first non-deleting locale as default\n    locales.some((nextLocale: Locale) => {\n      if (nextLocale !== locale) {\n        setDefaultLocale(nextLocale);\n        return true;\n      }\n    });\n\n    // Select the one next to the deleting as active\n    const deleteingIndex = locales.indexOf(locale);\n    if (deleteingIndex === locales.length - 1) {\n      setActiveLocale(locales[deleteingIndex - 1]);\n    } else {\n      setActiveLocale(locales[deleteingIndex + 1]);\n    }\n\n    setLocalizedContents(\n      update(localizedContents, {\n        $unset: [locale]\n      })\n    );\n  }\n\n  function onAddLocale(locale: Locale) {\n    if (pendingSubmit) return;\n    setModified(true);\n\n    setLocalizedContents(\n      update(localizedContents, {\n        [locale]: {\n          $set: {\n            title: \"\",\n            contentSections: [\n              {\n                uuid: uuid(),\n                sectionTitle: \"\",\n                type: \"Text\",\n                text: \"\"\n              }\n            ]\n          }\n        }\n      })\n    );\n\n    setActiveLocale(locale);\n  }\n\n  function onAddSample() {\n    if (pendingSubmit) return;\n    setModified(true);\n\n    setSamples(\n      update(samples, {\n        $push: [\n          {\n            uuid: uuid(),\n            inputData: \"\",\n            outputData: \"\"\n          }\n        ]\n      })\n    );\n  }\n\n  function ensureFirstNotReferencedSampleId(locale: Locale) {\n    const id = [...samples.keys()].find(\n      i => !localizedContents[locale].contentSections.some(section => section.sampleId === i)\n    );\n    if (id != null) return id;\n    onAddSample();\n    return samples.length; // This still references to the old \"samples\" array\n  }\n\n  function onAddSection(locale: Locale, index: number, type: \"Text\" | \"Sample\") {\n    if (pendingSubmit) return;\n    setModified(true);\n\n    setLocalizedContents(\n      update(localizedContents, {\n        [locale]: {\n          contentSections: {\n            $splice: [\n              [\n                index,\n                0,\n                {\n                  uuid: uuid(),\n                  sectionTitle: \"\",\n                  type,\n                  text: \"\",\n                  ...(type === \"Sample\" ? { sampleId: ensureFirstNotReferencedSampleId(locale) } : {})\n                }\n              ]\n            ]\n          }\n        }\n      })\n    );\n  }\n\n  function onMoveSection(locale: Locale, index: number, direction: \"UP\" | \"DOWN\") {\n    if (pendingSubmit) return;\n    setModified(true);\n\n    const section = localizedContents[locale].contentSections[index];\n    setLocalizedContents(\n      update(localizedContents, {\n        [locale]: {\n          contentSections: {\n            $splice: [\n              [index, 1],\n              [index + (direction === \"UP\" ? -1 : +1), 0, section]\n            ]\n          }\n        }\n      })\n    );\n  }\n\n  function onDeleteSection(locale: Locale, index: number) {\n    if (pendingSubmit) return;\n    setModified(true);\n\n    setLocalizedContents(\n      update(localizedContents, {\n        [locale]: {\n          contentSections: {\n            $splice: [[index, 1]]\n          }\n        }\n      })\n    );\n  }\n\n  function onChangeTitle(locale: Locale, title: string) {\n    if (pendingSubmit) return;\n    setModified(true);\n\n    setLocalizedContents(\n      update(localizedContents, {\n        [locale]: {\n          title: {\n            $set: title\n          }\n        }\n      })\n    );\n  }\n\n  // change title / text\n  function onChangeSectionValue(locale: Locale, index: number, type: \"sectionTitle\" | \"text\", newValue: string) {\n    if (pendingSubmit) return;\n    setModified(true);\n\n    setLocalizedContents(\n      update(localizedContents, {\n        [locale]: {\n          contentSections: {\n            [index]: {\n              [type]: { $set: newValue }\n            }\n          }\n        }\n      })\n    );\n  }\n\n  function onChangeSectionType(locale: Locale, index: number, newType: \"Text\" | \"Sample\") {\n    if (pendingSubmit) return;\n    setModified(true);\n\n    setLocalizedContents(\n      update(localizedContents, {\n        [locale]: {\n          contentSections: {\n            [index]: {\n              type: { $set: newType },\n              sampleId: newType === \"Sample\" ? { $set: ensureFirstNotReferencedSampleId(locale) } : {},\n              $unset: newType === \"Text\" ? [\"sampleId\"] : []\n            }\n          }\n        }\n      })\n    );\n  }\n\n  function onChangeSectionSampleId(locale: Locale, index: number, newSampleId: number) {\n    if (pendingSubmit) return;\n    setModified(true);\n\n    if (newSampleId == null) {\n      // Add new sample\n      newSampleId = samples.length;\n      onAddSample();\n    }\n\n    setLocalizedContents(\n      update(localizedContents, {\n        [locale]: {\n          contentSections: {\n            [index]: {\n              sampleId: { $set: newSampleId }\n            }\n          }\n        }\n      })\n    );\n  }\n\n  function onChangeSampleData(sampleId: number, type: \"inputData\" | \"outputData\", newData: string) {\n    if (pendingSubmit) return;\n    setModified(true);\n\n    setSamples(\n      update(samples, {\n        [sampleId]: {\n          [type]: { $set: newData }\n        }\n      })\n    );\n  }\n\n  function updateSampleIdReference(callback: (sampleId: number) => number) {\n    const spec: any = {};\n    Object.keys(localizedContents).forEach((locale: Locale) => {\n      spec[locale] = {\n        contentSections: localizedContents[locale].contentSections.map(section => {\n          if (section.type !== \"Sample\") return {};\n          const newSampleId = callback(section.sampleId);\n\n          // Not modified\n          if (newSampleId === section.sampleId) return {};\n\n          // Deleted\n          if (newSampleId == null)\n            return {\n              $unset: [\"sampleId\"],\n              type: { $set: \"Text\" }\n            };\n\n          // Modified\n          return {\n            sampleId: {\n              $set: callback(section.sampleId)\n            }\n          };\n        })\n      };\n    });\n    setLocalizedContents(update(localizedContents, spec));\n  }\n\n  function onAddSampleAt(index: number) {\n    if (pendingSubmit) return;\n    setModified(true);\n\n    setSamples(\n      update(samples, {\n        $splice: [\n          [\n            index,\n            0,\n            {\n              uuid: uuid(),\n              inputData: \"\",\n              outputData: \"\"\n            }\n          ]\n        ]\n      })\n    );\n\n    updateSampleIdReference(id => {\n      if (id >= index) return id + 1;\n      return id;\n    });\n  }\n\n  function onMoveSample(sampleId: number, direction: \"UP\" | \"DOWN\") {\n    if (pendingSubmit) return;\n    setModified(true);\n\n    const swappingSampleId = sampleId + (direction === \"UP\" ? -1 : +1);\n\n    updateSampleIdReference(id => {\n      if (id === sampleId) return swappingSampleId;\n      if (id === swappingSampleId) return sampleId;\n      return id;\n    });\n\n    setSamples(\n      samples.map((sample, id) => {\n        if (id === sampleId) return samples[swappingSampleId];\n        if (id === swappingSampleId) return samples[sampleId];\n        return sample;\n      })\n    );\n  }\n\n  function onDeleteSample(sampleId: number) {\n    if (pendingSubmit) return;\n    setModified(true);\n\n    updateSampleIdReference(id => {\n      if (id === sampleId) return null;\n      if (id > sampleId) return id - 1;\n      return id;\n    });\n\n    setSamples(samples.filter((sample, id) => id !== sampleId));\n  }\n\n  const [samples, setSamples] = useState<Sample[]>(\n    props.new\n      ? [{ uuid: uuid(), inputData: \"\", outputData: \"\" }]\n      : props.problem.samples.map(sample => ({\n          uuid: uuid(),\n          ...sample\n        }))\n  );\n\n  const [activeLocale, setActiveLocale] = useState(() => {\n    const locale = props.requestedLocale || appState.locale;\n    return locale in localizedContents ? locale : (Object.keys(localizedContents)[0] as Locale);\n  });\n\n  const [tagIds, setTagIds] = useState(\n    !props.problem ? [] : props.problem.tagsOfLocale.map(problemTag => problemTag.id)\n  );\n\n  function searchTags(options: { text: string }[], query: string) {\n    query = query.toLowerCase();\n    const result = options\n      .filter(option => option.text.toLowerCase().indexOf(query) !== -1)\n      .sort((a, b) => (a.text < b.text ? -1 : a.text > b.text ? 1 : 0));\n    return [\n      ...result.filter(option => option.text.toLowerCase().startsWith(query)),\n      ...result.filter(option => !option.text.toLowerCase().startsWith(query))\n    ];\n  }\n\n  const [defaultLocale, setDefaultLocale] = useState(\n    props.new ? appState.locale : (props.problem.meta.locales[0] as Locale)\n  );\n\n  const haveSubmitPermission = props.new ? true : props.problem.permissionOfCurrentUser.includes(\"Modify\");\n\n  return (\n    <>\n      <Grid>\n        <Grid.Row className={style.row}>\n          <Grid.Column width={11}>\n            <Header as=\"h1\" className={style.headerContainer + \" withIcon\"}>\n              <Icon name=\"edit\" className={style.icon} />\n              {props.new ? `${_(\".header_new\")}` : `${_(\".header_edit\", { idString })}`}\n              {props.new && (\n                <Menu compact className={style.typeDropdown}>\n                  <Dropdown\n                    item\n                    value={newProblemType}\n                    options={Object.values(ProblemType).map(type => ({\n                      text: _(`problem.type.${type}`),\n                      value: type,\n                      key: type\n                    }))}\n                    onChange={(e, { value }) => setNewProblemType(value as ProblemType)}\n                  />\n                </Menu>\n              )}\n              <Popup\n                trigger={\n                  <Button\n                    className={style.backButton}\n                    disabled={pendingSubmit}\n                    content={_(\".back_to_problem\")}\n                    onClick={() => !modified && onBackToProblem()}\n                  />\n                }\n                // It's safe to redirect if not modified, don't confirm\n                disabled={!modified}\n                content={<Button negative content={_(\".confirm_back_to_problem\")} onClick={onBackToProblem} />}\n                on=\"click\"\n                position=\"bottom center\"\n              />\n              <Button primary disabled={!haveSubmitPermission} loading={pendingSubmit} onClick={onSubmit}>\n                {haveSubmitPermission ? _(\".submit\") : _(\".no_submit_permission\")}\n              </Button>\n            </Header>\n          </Grid.Column>\n          <Grid.Column width={5}>\n            <Header icon=\"sticky note outline\" className=\"withIcon\" as=\"h1\" content={_(\".header_samples\")} />\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row className={style.row}>\n          <Grid.Column width={11}>\n            <LocalizeTab\n              locales={Object.keys(localizedContents) as Locale[]}\n              activeLocale={activeLocale}\n              item={locale => (\n                <LocalizedContentEditor\n                  problemId={props.problem?.meta?.id}\n                  localizedContent={localizedContents[locale]}\n                  samples={samples}\n                  isOnly={Object.keys(localizedContents).length === 1}\n                  isDefault={defaultLocale === locale}\n                  onMakeDefault={() => setDefaultLocale(locale)}\n                  onAddDefaultSections={() => onAddDefaultSectionsToLocale(locale)}\n                  onDelete={() => onDeleteLocale(locale)}\n                  onChangeTitle={title => onChangeTitle(locale, title)}\n                  onChangeSectionValue={(index, type, newValue) => onChangeSectionValue(locale, index, type, newValue)}\n                  onChangeSectionType={(index, newType) => onChangeSectionType(locale, index, newType)}\n                  onChangeSectionSampleId={(index, newSampleId) => onChangeSectionSampleId(locale, index, newSampleId)}\n                  onChangeSampleData={onChangeSampleData}\n                  onAddSection={(index, type) => onAddSection(locale, index, type)}\n                  onDeleteSection={index => onDeleteSection(locale, index)}\n                  onMoveSection={(index, direction) => onMoveSection(locale, index, direction)}\n                />\n              )}\n              onAddLocale={onAddLocale}\n              onSetActiveLocale={setActiveLocale}\n            />\n          </Grid.Column>\n          <Grid.Column width={5}>\n            {samples.length === 0 ? (\n              <Dimmer.Dimmable dimmed={true} className={style.noSampleDimmer}>\n                <SampleEditor\n                  sampleId={null}\n                  sample={null}\n                  warningMessage={[]}\n                  isFirst={null}\n                  isLast={null}\n                  onChangeSampleData={null}\n                  onMoveSampleUp={null}\n                  onMoveSampleDown={null}\n                  onAddSampleBefore={null}\n                  onAddSampleAfter={null}\n                  onDeleteSample={null}\n                />\n                <Dimmer active={true}>\n                  <Button primary onClick={() => onAddSample()}>\n                    {_(\".sample_editor.add_sample_when_empty\")}\n                  </Button>\n                </Dimmer>\n              </Dimmer.Dimmable>\n            ) : (\n              samples.map((sample, sampleId) => (\n                <SampleEditor\n                  key={sample.uuid}\n                  sampleId={sampleId}\n                  sample={sample}\n                  warningMessage={Object.keys(localizedContents)\n                    .map((locale: Locale) => {\n                      const referenceCount = localizedContents[locale].contentSections.filter(\n                        section => section.type === \"Sample\" && section.sampleId === sampleId\n                      ).length;\n\n                      if (referenceCount === 1) return null;\n                      return { locale, referenceCount };\n                    })\n                    .filter(x => x)}\n                  isFirst={sampleId === 0}\n                  isLast={sampleId === samples.length - 1}\n                  onChangeSampleData={(type, newData) => onChangeSampleData(sampleId, type, newData)}\n                  onMoveSampleUp={() => onMoveSample(sampleId, \"UP\")}\n                  onMoveSampleDown={() => onMoveSample(sampleId, \"DOWN\")}\n                  onAddSampleBefore={() => onAddSampleAt(sampleId)}\n                  onAddSampleAfter={() => onAddSampleAt(sampleId + 1)}\n                  onDeleteSample={() => onDeleteSample(sampleId)}\n                />\n              ))\n            )}\n            <Header icon=\"tag\" className=\"withIcon\" as=\"h1\" content={_(\".header_tags\")} />\n            <Dropdown\n              search={searchTags}\n              fluid\n              multiple\n              value={tagIds}\n              placeholder={_(\".tags_placeholder\")}\n              selection\n              noResultsMessage={_(\".no_addable_tags\")}\n              onChange={(e, { value }: { value: number[] }) => {\n                if (value.length <= 20) {\n                  setModified(true);\n                  setTagIds(value);\n                }\n              }}\n              options={props.allProblemTags.map(problemTag => ({\n                key: problemTag.id,\n                value: problemTag.id,\n                text: problemTag.name\n              }))}\n            />\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </>\n  );\n};\n\nProblemEditPage = observer(ProblemEditPage);\n\nexport default {\n  new: defineRoute(async request => {\n    const allProblemTags = await fetchDataAllProblemTags();\n\n    return <ProblemEditPage key={uuid()} new={true} allProblemTags={allProblemTags} />;\n  }),\n  byId: defineRoute(async request => {\n    const id = parseInt(request.params[\"id\"]);\n    const requestedLocale: Locale = request.query[\"locale\"] in Locale && (request.query[\"locale\"] as Locale);\n    const [problem, allProblemTags] = await Promise.all([fetchData(\"id\", id), fetchDataAllProblemTags()]);\n\n    return (\n      <ProblemEditPage\n        key={uuid()}\n        idType=\"id\"\n        problem={problem}\n        allProblemTags={allProblemTags}\n        requestedLocale={requestedLocale}\n      />\n    );\n  }),\n  byDisplayId: defineRoute(async request => {\n    const displayId = parseInt(request.params[\"displayId\"]);\n    const requestedLocale: Locale = request.query[\"locale\"] in Locale && (request.query[\"locale\"] as Locale);\n    const [problem, allProblemTags] = await Promise.all([fetchData(\"displayId\", displayId), fetchDataAllProblemTags()]);\n\n    return (\n      <ProblemEditPage\n        key={uuid()}\n        idType=\"displayId\"\n        problem={problem}\n        allProblemTags={allProblemTags}\n        requestedLocale={requestedLocale}\n      />\n    );\n  })\n};\n"],"sourceRoot":""}