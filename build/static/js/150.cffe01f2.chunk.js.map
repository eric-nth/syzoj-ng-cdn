{"version":3,"sources":["markdown/LazyMarkdownContent.tsx","pages/home/home/HomePage.tsx"],"names":["load","MarkdownContent","lazy","Object","assign","props","loading","Placeholder","Array","placeholderLines","keys","map","i","Line","fallback","fetchData","a","api","homepage","getHomepage","locale","appState","requestError","response","RouteError","showRefresh","showBack","apiUrl","fetch","json","console","log","HomePage","_","useLocalizer","navigation","useNavigationChecked","useEffect","enterNewPage","useState","hitokotoError","setHitokotoError","hitokotoResult","setHitokotoResult","loadHitokoto","firstLoad","fetchHitokoto","hitokoto","then","result","getNotice","notice","Segment","className","style","segment","color","content","getAnnnouncements","Header","header","as","block","icon","attached","placeholder","annnouncements","length","Table","unstackable","table","basic","Row","HeaderCell","width","noWrap","Body","annnouncement","Cell","EmojiRenderer","href","getDiscussionUrl","getDiscussionDisplayTitle","title","formatDateTime","publishTime","id","Icon","name","getLatestProblems","inMainView","textAlign","latestUpdatedProblems","currentUser","meta","submission","status","noMarginRight","getProblemUrl","getProblemDisplayName","latestProblemsDate","TimeAgo","time","Date","publicTime","dateOnly","getHitokoto","customTitle","onClick","hitokotoFrom","from","getCountdown","countdown","items","entries","event","date","renderer","p","completed","timeIsDays","days","toString","hours","formatted","minutes","seconds","getProblemSearch","search","ProblemSearch","onResultSelect","navigate","onEnterPress","searchKeyword","pathname","query","keyword","getTopUsers","topUsers","compact","serverPreference","misc","sortUserByRating","user","UserLink","columnBio","renderMarkdownInUserBio","bio","dontUseContentFont","rating","acceptedProblemCount","getFriendLinks","friendLinks","links","List","bulleted","url","Item","target","rel","isNarrowScreen","useScreenWidthWithin","homepageUserListOnMainView","Grid","Column","observer","defineRoute","request","dataPromise","LazyMarkdownContent"],"mappings":"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","file":"static/js/150.cffe01f2.chunk.js","sourcesContent":["import React, { lazy, Suspense } from \"react\";\nimport { Placeholder } from \"semantic-ui-react\";\nimport type { MarkdownContentProps } from \"./MarkdownContent\";\n\nexport type { MarkdownContentPatcher, MarkdownContentProps } from \"./MarkdownContent\";\n\nconst load = () => import(\"./MarkdownContent\");\nconst MarkdownContent = lazy(load);\n\nexport interface LazyMarkdownContentProps extends MarkdownContentProps {\n  placeholderLines?: number;\n}\n\nconst LazyMarkdownContent: React.FC<LazyMarkdownContentProps> = props => {\n  const loading = (\n    <Placeholder>\n      {[...Array(props.placeholderLines || 4).keys()].map(i => (\n        <Placeholder.Line key={i} />\n      ))}\n    </Placeholder>\n  );\n  return (\n    <Suspense fallback={loading}>\n      <MarkdownContent {...props} />\n    </Suspense>\n  );\n};\n\nexport default Object.assign(LazyMarkdownContent, {\n  load\n});\n","import React, { useEffect, useState } from \"react\";\nimport { Grid, Header, Icon, List, Placeholder, Segment, Table } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\nimport Countdown from \"react-countdown\";\n\nimport style from \"./HomePage.module.less\";\n\nimport { appState } from \"@/appState\";\nimport { Link, useLocalizer, useNavigationChecked, useScreenWidthWithin } from \"@/utils/hooks\";\nimport { defineRoute, RouteError } from \"@/AppRouter\";\nimport api from \"@/api\";\nimport LazyMarkdownContent from \"@/markdown/LazyMarkdownContent\";\nimport { getDiscussionDisplayTitle, getDiscussionUrl } from \"@/pages/discussion/utils\";\nimport formatDateTime from \"@/utils/formatDateTime\";\nimport { EmojiRenderer } from \"@/components/EmojiRenderer\";\nimport { getProblemDisplayName, getProblemUrl } from \"@/pages/problem/utils\";\nimport TimeAgo from \"@/components/TimeAgo\";\nimport ProblemSearch from \"@/components/ProblemSearch\";\nimport UserLink from \"@/components/UserLink\";\nimport { StatusIcon } from \"@/components/StatusText\";\n\nasync function fetchData() {\n  const { requestError, response } = await api.homepage.getHomepage({\n    locale: appState.locale\n  });\n\n  if (requestError) throw new RouteError(requestError, { showRefresh: true, showBack: true });\n\n  return response;\n}\n\ninterface Hitokoto {\n  id: string;\n  hitokoto: string;\n  from: string;\n}\n\nasync function fetchHitokoto(apiUrl: string) {\n  try {\n    const response = await fetch(apiUrl);\n    return (await response.json()) as Hitokoto;\n  } catch (e) {\n    console.log(\"Error loading hitokoto:\", e);\n    return null;\n  }\n}\n\ntype HomePageProps = ApiTypes.GetHomepageResponseDto;\n\nlet HomePage: React.FC<HomePageProps> = props => {\n  const _ = useLocalizer(\"home\");\n  const navigation = useNavigationChecked();\n\n  useEffect(() => {\n    appState.enterNewPage(_(\".title\"), \"home\");\n  }, [appState.locale]);\n\n  const [hitokotoError, setHitokotoError] = useState(false);\n  const [hitokotoResult, setHitokotoResult] = useState<Hitokoto>(null);\n  useEffect(() => {\n    if (props.hitokoto) loadHitokoto(true);\n  }, []);\n\n  function loadHitokoto(firstLoad: boolean) {\n    // Already loading\n    if (!hitokotoResult && !firstLoad) return;\n\n    setHitokotoError(false);\n    setHitokotoResult(null);\n    fetchHitokoto(props.hitokoto.apiUrl).then(result => {\n      if (result) setHitokotoResult(result);\n      else setHitokotoError(true);\n    });\n  }\n\n  const getNotice = () =>\n    props.notice && (\n      <Segment className={style.segment} color=\"pink\">\n        <LazyMarkdownContent placeholderLines={7} content={props.notice} />\n      </Segment>\n    );\n\n  const getAnnnouncements = () => (\n    <>\n      <Header\n        className={style.header}\n        as=\"h4\"\n        block\n        icon=\"bullhorn\"\n        content={_(\".annnouncements.header\")}\n        attached=\"top\"\n      />\n      <Segment className={style.segment} attached=\"bottom\" placeholder={props.annnouncements.length === 0}>\n        {props.annnouncements.length > 0 ? (\n          <Table unstackable className={style.table} basic=\"very\">\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>{_(\".annnouncements.title\")}</Table.HeaderCell>\n                <Table.HeaderCell width={1} className={style.noWrap}>\n                  {_(\".annnouncements.date\")}\n                </Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {props.annnouncements.map(annnouncement => (\n                <Table.Row key={annnouncement.id}>\n                  <Table.Cell>\n                    <EmojiRenderer>\n                      <Link href={getDiscussionUrl(annnouncement)}>\n                        {getDiscussionDisplayTitle(annnouncement.title, _)}\n                      </Link>\n                    </EmojiRenderer>\n                  </Table.Cell>\n                  <Table.Cell width={1} className={style.noWrap}>\n                    {formatDateTime(annnouncement.publishTime, true)[1]}\n                  </Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        ) : (\n          <Header icon>\n            <Icon name=\"bullhorn\" />\n            {_(\".annnouncements.no_annnouncements\")}\n          </Header>\n        )}\n      </Segment>\n    </>\n  );\n\n  const getLatestProblems = (inMainView: boolean) => (\n    <>\n      <Header\n        className={style.header}\n        as=\"h4\"\n        block\n        icon=\"book\"\n        content={_(\".latest_problems.header\")}\n        attached=\"top\"\n      />\n      <Segment\n        className={style.segment}\n        textAlign=\"center\"\n        attached=\"bottom\"\n        placeholder={props.latestUpdatedProblems.length === 0}\n      >\n        {props.latestUpdatedProblems.length > 0 ? (\n          <Table unstackable className={style.table} basic=\"very\">\n            <Table.Header>\n              <Table.Row>\n                {appState.currentUser && (\n                  <Table.HeaderCell width={1} textAlign=\"center\" className={style.noWrap}>\n                    {_(\".latest_problems.status\")}\n                  </Table.HeaderCell>\n                )}\n                <Table.HeaderCell textAlign={inMainView ? \"left\" : \"center\"}>\n                  {_(\".latest_problems.problem\")}\n                </Table.HeaderCell>\n                <Table.HeaderCell width={1} textAlign=\"center\" className={style.noWrap}>\n                  {_(\".latest_problems.updated_time\")}\n                </Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {props.latestUpdatedProblems.map(({ meta, title, submission }) => (\n                <Table.Row key={meta.id}>\n                  {appState.currentUser && (\n                    <Table.Cell textAlign=\"center\">\n                      {submission && (\n                        <Link href={`/s/${submission.id}`}>\n                          <StatusIcon status={submission.status} noMarginRight />\n                        </Link>\n                      )}\n                    </Table.Cell>\n                  )}\n                  <Table.Cell textAlign={inMainView ? \"left\" : \"center\"}>\n                    <EmojiRenderer>\n                      <Link href={getProblemUrl(meta)}>{getProblemDisplayName(meta, title, _, \"all\")}</Link>\n                    </EmojiRenderer>\n                  </Table.Cell>\n                  <Table.Cell className={style.latestProblemsDate + \" \" + style.noWrap} textAlign=\"center\">\n                    <TimeAgo time={new Date(meta.publicTime)} dateOnly />\n                  </Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        ) : (\n          <Header icon>\n            <Icon name=\"file\" />\n            {_(\".latest_problems.no_problems\")}\n          </Header>\n        )}\n      </Segment>\n    </>\n  );\n\n  const getHitokoto = () =>\n    props.hitokoto && (\n      <>\n        <Header\n          className={style.header + \" \" + style.hitokoto}\n          as=\"h4\"\n          block\n          icon=\"comment alternate\"\n          content={\n            <>\n              {props.hitokoto?.customTitle || _(\".hitokoto.header\")}\n              <Icon onClick={() => loadHitokoto(false)} name=\"redo\" title={_(\".hitokoto.refresh\")} />\n            </>\n          }\n          attached=\"top\"\n        />\n        <Segment className={style.segment} textAlign=\"center\" attached=\"bottom\">\n          {hitokotoError ? (\n            _(\".hitokoto.error\")\n          ) : hitokotoResult ? (\n            <EmojiRenderer>\n              <div>\n                {hitokotoResult.hitokoto}\n                <div className={style.hitokotoFrom}>{hitokotoResult.from}</div>\n              </div>\n            </EmojiRenderer>\n          ) : (\n            <Placeholder>\n              <Placeholder.Line />\n              <Placeholder.Line />\n              <Placeholder.Line />\n              <Placeholder.Line />\n            </Placeholder>\n          )}\n        </Segment>\n      </>\n    );\n\n  const getCountdown = () =>\n    props.countdown &&\n    Object.keys(props.countdown.items).length > 0 && (\n      <>\n        <Header\n          className={style.header}\n          as=\"h4\"\n          block\n          icon=\"calendar alternate\"\n          content={_(\".countdown.header\")}\n          attached=\"top\"\n        />\n        <Segment className={style.segment} attached=\"bottom\">\n          {Object.entries(props.countdown.items).map(([event, time], i) => (\n            <div key={i} className={style.countdown}>\n              <EmojiRenderer>\n                <Countdown\n                  date={new Date(time as string)}\n                  renderer={p => {\n                    if (p.completed)\n                      return (\n                        <>\n                          {_(\".countdown.completed_before_event\")}\n                          <span className={style.event}>{event}</span>\n                          {_(\".countdown.completed_after_event\")}\n                        </>\n                      );\n                    else {\n                      let time: string;\n                      let timeIsDays = false;\n                      if (p.days > 0) {\n                        time = p.days.toString();\n                        timeIsDays = true;\n                      } else if (p.hours > 0) {\n                        time = `${p.formatted.hours}:${p.formatted.minutes}:${p.formatted.seconds}`;\n                      } else {\n                        time = `${p.formatted.minutes}:${p.formatted.seconds}`;\n                      }\n\n                      return _(\".countdown.display_time_first\") === \"1\" ? (\n                        <>\n                          {_(\".countdown.before_time\")}\n                          <span className={style.time}>{time}</span>\n                          {_(timeIsDays ? \".countdown.after_days_before_event\" : \".countdown.after_time_before_event\")}\n                          <span className={style.event}>{event}</span>\n                          {_(\".countdown.after_event\")}\n                        </>\n                      ) : (\n                        <>\n                          {_(\".countdown.before_event\")}\n                          <span className={style.event}>{event}</span>\n                          {_(\".countdown.after_event_before_time\")}\n                          <span className={style.time}>{time}</span>\n                          {_(timeIsDays ? \".countdown.after_days\" : \".countdown.after_time\")}\n                        </>\n                      );\n                    }\n                  }}\n                />\n              </EmojiRenderer>\n            </div>\n          ))}\n        </Segment>\n      </>\n    );\n\n  const getProblemSearch = () => (\n    <>\n      <Header className={style.header} as=\"h4\" block icon=\"search\" content={_(\".search_problem\")} attached=\"top\" />\n      <Segment className={style.segment + \" \" + style.search} attached=\"bottom\">\n        <ProblemSearch\n          className={style.search}\n          onResultSelect={({ meta }) => navigation.navigate(getProblemUrl(meta))}\n          onEnterPress={searchKeyword => navigation.navigate({ pathname: \"/p\", query: { keyword: searchKeyword } })}\n        />\n      </Segment>\n    </>\n  );\n\n  const getTopUsers = (inMainView: boolean) => (\n    <>\n      <Header className={style.header} as=\"h4\" block icon=\"user\" content={_(\".top_users.header\")} attached=\"top\" />\n      <Segment className={style.segment} textAlign=\"center\" attached=\"bottom\" placeholder={props.topUsers.length === 0}>\n        {props.topUsers.length > 0 ? (\n          <Table unstackable className={style.table} basic=\"very\" textAlign=\"center\" compact={!inMainView}>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell width={1} className={style.noWrap}>\n                  #\n                </Table.HeaderCell>\n                <Table.HeaderCell>{_(\".top_users.username\")}</Table.HeaderCell>\n                {inMainView ? (\n                  <Table.HeaderCell>{_(\".top_users.bio\")}</Table.HeaderCell>\n                ) : (\n                  <Table.HeaderCell width={1} className={style.noWrap}>\n                    {appState.serverPreference.misc.sortUserByRating\n                      ? _(\".top_users.rating\")\n                      : _(\".top_users.accepted_problem_count\")}\n                  </Table.HeaderCell>\n                )}\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {props.topUsers.map((user, i) => (\n                <Table.Row key={user.id}>\n                  <Table.Cell>{i + 1}</Table.Cell>\n                  <Table.Cell>\n                    <UserLink user={user} />\n                  </Table.Cell>\n                  {inMainView ? (\n                    <Table.Cell className={style.columnBio}>\n                      {appState.serverPreference.misc.renderMarkdownInUserBio ? (\n                        <LazyMarkdownContent content={user.bio} dontUseContentFont />\n                      ) : (\n                        <EmojiRenderer>\n                          <div>{user.bio}</div>\n                        </EmojiRenderer>\n                      )}\n                    </Table.Cell>\n                  ) : (\n                    <Table.Cell>\n                      {appState.serverPreference.misc.sortUserByRating ? user.rating : user.acceptedProblemCount}\n                    </Table.Cell>\n                  )}\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        ) : (\n          <Header icon>\n            <Icon name=\"user\" />\n            {_(\".top_users.no_users\")}\n          </Header>\n        )}\n      </Segment>\n    </>\n  );\n\n  const getFriendLinks = () =>\n    props.friendLinks &&\n    Object.keys(props.friendLinks.links).length > 0 && (\n      <>\n        <Header className={style.header} as=\"h4\" block icon=\"linkify\" content={_(\".friend_links\")} attached=\"top\" />\n        <Segment className={style.segment} attached=\"bottom\" placeholder={props.topUsers.length === 0}>\n          <List bulleted>\n            {Object.entries(props.friendLinks.links).map(([title, url], i) => (\n              <List.Item key={i}>\n                <EmojiRenderer>\n                  <a href={url as string} target=\"_blank\" rel=\"noreferrer noopener\">\n                    {title}\n                  </a>\n                </EmojiRenderer>\n              </List.Item>\n            ))}\n          </List>\n        </Segment>\n      </>\n    );\n\n  const isNarrowScreen = useScreenWidthWithin(0, 1024);\n\n  return (\n    <>\n      {isNarrowScreen ? (\n        <>\n          {getNotice()}\n          {getAnnnouncements()}\n          {getHitokoto()}\n          {getProblemSearch()}\n          {appState.serverPreference.misc.homepageUserListOnMainView ? getTopUsers(false) : getLatestProblems(true)}\n          {getCountdown()}\n          {appState.serverPreference.misc.homepageUserListOnMainView ? getLatestProblems(true) : getTopUsers(false)}\n          {getFriendLinks()}\n        </>\n      ) : (\n        <Grid>\n          <Grid.Column width={11}>\n            {getNotice()}\n            {getAnnnouncements()}\n            {appState.serverPreference.misc.homepageUserListOnMainView ? getTopUsers(true) : getLatestProblems(true)}\n          </Grid.Column>\n          <Grid.Column width={5}>\n            {getHitokoto()}\n            {getCountdown()}\n            {getProblemSearch()}\n            {appState.serverPreference.misc.homepageUserListOnMainView ? getLatestProblems(false) : getTopUsers(false)}\n            {getFriendLinks()}\n          </Grid.Column>\n        </Grid>\n      )}\n    </>\n  );\n};\n\nHomePage = observer(HomePage);\n\nexport default defineRoute(async request => {\n  const dataPromise: ReturnType<typeof fetchData> = fetchData();\n\n  // If user bio is need to be rendered, await the renderer to be loaded.\n  if (\n    appState.serverPreference.misc.renderMarkdownInUserBio &&\n    appState.serverPreference.misc.homepageUserListOnMainView\n  ) {\n    await LazyMarkdownContent.load();\n  }\n\n  return <HomePage {...await dataPromise} />;\n});\n"],"sourceRoot":""}