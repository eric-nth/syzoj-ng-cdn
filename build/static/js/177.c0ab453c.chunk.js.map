{"version":3,"sources":["../node_modules/autotrack/lib/plugins/url-change-tracker.js"],"names":["UrlChangeTracker","tracker","opts","trackUsage","plugins","URL_CHANGE_TRACKER","history","pushState","window","addEventListener","defaultOpts","shouldTrackUrlChange","this","trackReplaceState","fieldsObj","hitFilter","assign","path","getPath","pushStateOverride","bind","replaceStateOverride","handlePopState","MethodChain","add","originalMethod","handleUrlChange","historyDidUpdate","setTimeout","oldPath","newPath","call","set","page","title","document","send","createFieldsObj","transport","remove","removeEventListener","location","pathname","search","provide"],"mappings":"sLA2BMA,E,WAMJ,WAAYC,EAASC,GAInB,GAJyB,oBACzBC,YAAWF,EAASG,IAAQC,oBAGvBC,QAAQC,WAAcC,OAAOC,iBAAlC,CAGA,IAAMC,EAAc,CAClBC,qBAAsBC,KAAKD,qBAC3BE,mBAAmB,EACnBC,UAAW,GACXC,UAAW,MAGbH,KAAKV,KAA4Cc,YAAON,EAAaR,GAErEU,KAAKX,QAAUA,EAKfW,KAAKK,KAAOC,IAGZN,KAAKO,kBAAoBP,KAAKO,kBAAkBC,KAAKR,MACrDA,KAAKS,qBAAuBT,KAAKS,qBAAqBD,KAAKR,MAC3DA,KAAKU,eAAiBV,KAAKU,eAAeF,KAAKR,MAG/CW,IAAYC,IAAIlB,QAAS,YAAaM,KAAKO,mBAC3CI,IAAYC,IAAIlB,QAAS,eAAgBM,KAAKS,sBAC9Cb,OAAOC,iBAAiB,WAAYG,KAAKU,iB,8DASzBG,GAAgB,WAChC,OAAO,WACLA,EAAc,WAAd,aACA,EAAKC,iBAAgB,M,2CAUJD,GAAgB,WACnC,OAAO,WACLA,EAAc,WAAd,aACA,EAAKC,iBAAgB,M,uCASvBd,KAAKc,iBAAgB,K,sCAUPC,GAAkB,WAGhCC,YAAW,WACT,IAAMC,EAAU,EAAKZ,KACfa,EAAUZ,IAEhB,GAAIW,GAAWC,GACX,EAAK5B,KAAKS,qBAAqBoB,KAAK,EAAMD,EAASD,KACrD,EAAKZ,KAAOa,EACZ,EAAK7B,QAAQ+B,IAAI,CACfC,KAAMH,EACNI,MAAOC,SAASD,QAGdP,GAAoB,EAAKzB,KAAKW,mBAAmB,CAGnD,EAAKZ,QAAQmC,KAAK,WAAYC,YADR,CAACC,UAAW,UAE9B,EAAKpC,KAAKY,UAAW,EAAKb,QAAS,EAAKC,KAAKa,eAGpD,K,2CAUgBe,EAASD,GAC5B,SAAUC,IAAWD,K,+BAOrBN,IAAYgB,OAAOjC,QAAS,YAAaM,KAAKO,mBAC9CI,IAAYgB,OAAOjC,QAAS,eAAgBM,KAAKS,sBACjDb,OAAOgC,oBAAoB,WAAY5B,KAAKU,oB,KAWhD,SAASJ,IACP,OAAOuB,SAASC,SAAWD,SAASE,OAPtCC,YAAQ,mBAAoB5C","file":"static/js/177.c0ab453c.chunk.js","sourcesContent":["/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport MethodChain from '../method-chain';\nimport provide from '../provide';\nimport {plugins, trackUsage} from '../usage';\nimport {assign, createFieldsObj} from '../utilities';\n\n\n/**\n * Class for the `urlChangeTracker` analytics.js plugin.\n * @implements {UrlChangeTrackerPublicInterface}\n */\nclass UrlChangeTracker {\n  /**\n   * Adds handler for the history API methods\n   * @param {!Tracker} tracker Passed internally by analytics.js\n   * @param {?Object} opts Passed by the require command.\n   */\n  constructor(tracker, opts) {\n    trackUsage(tracker, plugins.URL_CHANGE_TRACKER);\n\n    // Feature detects to prevent errors in unsupporting browsers.\n    if (!history.pushState || !window.addEventListener) return;\n\n    /** @type {UrlChangeTrackerOpts} */\n    const defaultOpts = {\n      shouldTrackUrlChange: this.shouldTrackUrlChange,\n      trackReplaceState: false,\n      fieldsObj: {},\n      hitFilter: null,\n    };\n\n    this.opts = /** @type {UrlChangeTrackerOpts} */ (assign(defaultOpts, opts));\n\n    this.tracker = tracker;\n\n    // Sets the initial page field.\n    // Don't set this on the tracker yet so campaign data can be retreived\n    // from the location field.\n    this.path = getPath();\n\n    // Binds methods.\n    this.pushStateOverride = this.pushStateOverride.bind(this);\n    this.replaceStateOverride = this.replaceStateOverride.bind(this);\n    this.handlePopState = this.handlePopState.bind(this);\n\n    // Watches for history changes.\n    MethodChain.add(history, 'pushState', this.pushStateOverride);\n    MethodChain.add(history, 'replaceState', this.replaceStateOverride);\n    window.addEventListener('popstate', this.handlePopState);\n  }\n\n  /**\n   * Handles invocations of the native `history.pushState` and calls\n   * `handleUrlChange()` indicating that the history updated.\n   * @param {!Function} originalMethod A reference to the overridden method.\n   * @return {!Function}\n   */\n  pushStateOverride(originalMethod) {\n    return (...args) => {\n      originalMethod(...args);\n      this.handleUrlChange(true);\n    };\n  }\n\n  /**\n   * Handles invocations of the native `history.replaceState` and calls\n   * `handleUrlChange()` indicating that history was replaced.\n   * @param {!Function} originalMethod A reference to the overridden method.\n   * @return {!Function}\n   */\n  replaceStateOverride(originalMethod) {\n    return (...args) => {\n      originalMethod(...args);\n      this.handleUrlChange(false);\n    };\n  }\n\n  /**\n   * Handles responding to the popstate event and calls\n   * `handleUrlChange()` indicating that history was updated.\n   */\n  handlePopState() {\n    this.handleUrlChange(true);\n  }\n\n  /**\n   * Updates the page and title fields on the tracker and sends a pageview\n   * if a new history entry was created.\n   * @param {boolean} historyDidUpdate True if the history was changed via\n   *     `pushState()` or the `popstate` event. False if the history was just\n   *     modified via `replaceState()`.\n   */\n  handleUrlChange(historyDidUpdate) {\n    // Calls the update logic asychronously to help ensure that app logic\n    // responding to the URL change happens prior to this.\n    setTimeout(() => {\n      const oldPath = this.path;\n      const newPath = getPath();\n\n      if (oldPath != newPath &&\n          this.opts.shouldTrackUrlChange.call(this, newPath, oldPath)) {\n        this.path = newPath;\n        this.tracker.set({\n          page: newPath,\n          title: document.title,\n        });\n\n        if (historyDidUpdate || this.opts.trackReplaceState) {\n          /** @type {FieldsObj} */\n          const defaultFields = {transport: 'beacon'};\n          this.tracker.send('pageview', createFieldsObj(defaultFields,\n              this.opts.fieldsObj, this.tracker, this.opts.hitFilter));\n        }\n      }\n    }, 0);\n  }\n\n  /**\n   * Determines whether or not the tracker should send a hit with the new page\n   * data. This default implementation can be overrided in the config options.\n   * @param {string} newPath The path after the URL change.\n   * @param {string} oldPath The path prior to the URL change.\n   * @return {boolean} Whether or not the URL change should be tracked.\n   */\n  shouldTrackUrlChange(newPath, oldPath) {\n    return !!(newPath && oldPath);\n  }\n\n  /**\n   * Removes all event listeners and restores overridden methods.\n   */\n  remove() {\n    MethodChain.remove(history, 'pushState', this.pushStateOverride);\n    MethodChain.remove(history, 'replaceState', this.replaceStateOverride);\n    window.removeEventListener('popstate', this.handlePopState);\n  }\n}\n\n\nprovide('urlChangeTracker', UrlChangeTracker);\n\n\n/**\n * @return {string} The path value of the current URL.\n */\nfunction getPath() {\n  return location.pathname + location.search;\n}\n"],"sourceRoot":""}