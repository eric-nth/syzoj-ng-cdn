{"version":3,"sources":["pages/submission/submission/common/FormattableCodeBox.tsx"],"names":["FormattableCodeBox","React","forwardRef","props","ref","_","useLocalizer","defaultFormatted","appState","userPreference","codeFormatter","disableByDefault","options","CodeFormatter","languageFormattable","language","unformattedCode","code","refFormattedCode","useRef","useState","formatted","setFormatted","current","success","result","toast","error","className","title","style","formatCodeButton","content","onClick"],"mappings":"gOAmBMA,EAAqBC,IAAMC,YAAoD,SAACC,EAAOC,GAAS,IAAD,IAC7FC,EAAIC,YAAa,cAEjBC,IAAmB,UAACC,IAASC,eAAeC,qBAAzB,aAAC,EAAuCC,kBAC3DC,GAAU,UAAAJ,IAASC,eAAeC,qBAAxB,eAAuCE,UAAWC,IAE5DC,EAAsBD,IAAkCV,EAAMY,UAE9DC,EAAkBb,EAAMc,KACxBC,EAAmBC,iBAAe,MAT2D,EAWjEC,mBAASb,GAAoBO,GAXoC,mBAW5FO,EAX4F,KAWjFC,EAXiF,KAcnG,GAAID,IAAcH,EAAiBK,QAAS,CAAC,IAAD,EAChBV,IAAqBG,EAAiBb,EAAMY,SAAUH,GADtC,mBACnCY,EADmC,KAC1BC,EAD0B,KAErCD,EAGEN,EAAiBK,QAAUE,GAFhCC,IAAMC,MAAMtB,EAAE,oBAAqB,CAAEsB,MAAOF,KAC5CH,GAAa,IAIjB,OACE,cAAC,IAAD,CACEM,UAAWzB,EAAMyB,UACjBC,MAAO1B,EAAM0B,MACbd,SAAUZ,EAAMY,SAChBE,KAAMI,GAAyC,MAA5BH,EAAiBK,QAAkBL,EAAiBK,QAAUP,EACjFZ,IAAKA,EALP,SAOGU,GACC,cAAC,IAAD,CACEc,UAAWE,IAAMC,iBACjBC,QAA0C3B,EAAhCgB,EAAkC,sBAApB,gBACxBY,QAAS,kBAAMX,GAAcD,WAOxBrB","file":"static/js/108.96e5352e.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { Button } from \"semantic-ui-react\";\n\nimport style from \"./FormattableCodeBox.module.less\";\n\nimport { CodeLanguage } from \"@/interfaces/CodeLanguage\";\nimport { useLocalizer } from \"@/utils/hooks\";\nimport { appState } from \"@/appState\";\nimport * as CodeFormatter from \"@/utils/CodeFormatter\";\nimport toast from \"@/utils/toast\";\nimport { HighlightedCodeBox } from \"@/components/CodeBox\";\n\ninterface FormattableCodeBoxProps {\n  className?: string;\n  title?: React.ReactNode;\n  code: string;\n  language: CodeLanguage;\n}\n\nconst FormattableCodeBox = React.forwardRef<HTMLPreElement, FormattableCodeBoxProps>((props, ref) => {\n  const _ = useLocalizer(\"submission\");\n\n  const defaultFormatted = !appState.userPreference.codeFormatter?.disableByDefault;\n  const options = appState.userPreference.codeFormatter?.options || CodeFormatter.defaultOptions;\n\n  const languageFormattable = CodeFormatter.isLanguageSupported(props.language);\n\n  const unformattedCode = props.code;\n  const refFormattedCode = useRef<string>(null);\n\n  const [formatted, setFormatted] = useState(defaultFormatted && languageFormattable);\n\n  // Lazy\n  if (formatted && !refFormattedCode.current) {\n    const [success, result] = CodeFormatter.format(unformattedCode, props.language, options);\n    if (!success) {\n      toast.error(_(`.failed_to_format`, { error: result }));\n      setFormatted(false);\n    } else refFormattedCode.current = result;\n  }\n\n  return (\n    <HighlightedCodeBox\n      className={props.className}\n      title={props.title}\n      language={props.language}\n      code={formatted && refFormattedCode.current != null ? refFormattedCode.current : unformattedCode}\n      ref={ref}\n    >\n      {languageFormattable && (\n        <Button\n          className={style.formatCodeButton}\n          content={!formatted ? _(\".format_code\") : _(\".show_original_code\")}\n          onClick={() => setFormatted(!formatted)}\n        />\n      )}\n    </HighlightedCodeBox>\n  );\n});\n\nexport default FormattableCodeBox;\n"],"sourceRoot":""}