{"version":3,"sources":["pages/submission/submission/SubmissionPage.tsx"],"names":["fetchData","submissionId","a","api","submission","getSubmissionDetail","toString","locale","appState","requestError","response","RouteError","showRefresh","showBack","error","makeToBeLocalizedText","parseProgress","progress","resultMeta","status","pending","score","timeUsed","memoryUsed","progressType","SubmissionProgressType","Preparing","Compiling","Running","Finished","statusText","totalCount","finishedCount","Array","isArray","subtasks","subtask","testcases","testcase","running","waiting","testcaseHash","testcaseResult","time","memory","Math","max","round","SubmissionPage","props","_","useLocalizer","navigation","useNavigationChecked","useEffect","enterNewPage","meta","id","useState","setProgress","progressMeta","setProgressMeta","subscriptionKey","progressSubscriptionKey","messageRef","useRef","useSocket","socket","on","messageDelta","current","patch","message","progressDetail","console","log","undefined","displayMeta","refDefaultCopyCodeBox","onDownload","filename","problem","downloadProblemFiles","problemId","type","filenameList","toast","downloadFile","downloadInfo","downloadUrl","onKeyDown","event","ctrlKey","metaKey","key","sel","window","getSelection","rg","document","createRange","selectNodeContents","removeAllRanges","addRange","preventDefault","addEventListener","removeEventListener","isWideScreen","useScreenWidthWithin","Infinity","isMobile","isNarrowMobile","samples","samplesRunning","some","sample","samplesFinishedCount","filter","length","samplesDisplayInfo","subtaskDisplayInfo","x","s","toFixed","endsWith","slice","forEach","i","runningCount","firstNonAcceptedStatus","expandable","hideTimeMemory","ProblemTypeSubmissionView","config","getTestcasesAccordionPanels","isSample","getAdditionalSections","map","columnTitle","width","Column","className","style","testcaseColumnTitle","name","columnStatus","testcaseColumnStatus","columnScore","testcaseColumnScore","accordionTitleIcon","columnTime","testcaseColumnTime","title","testcaseInfo","timeLimit","columnMemory","testcaseColumnMemory","memoryLimit","formatFileSize","Title","accordionTitle","accordionTitleTwoRows","Row","accordionTitleFirstRow","accordionTitleSecondRow","Content","accordionContent","input","inputFile","fileNameWrapper","onClick","fileName","ansiMessage","output","outputFile","userOutput","userError","systemMessage","getSamplePanel","content","subtaskContent","subAccordion","panels","getSubtasksAccordionPanels","fullScore","answerInfo","useMemo","getAnswerInfo","onDownloadAnswer","getDownloadAnswerFilename","downloadSubmissionFile","url","operationPending","setOperationPending","onCancel","cancelSubmission","success","setCancelPopupOpen","onRejudge","rejudgeSubmission","refresh","setRejudgePopupOpen","onTogglePublic","setSubmissionPublic","isPublic","setTogglePublicPopupOpen","onDelete","deleteSubmission","navigate","setDeletePopupOpen","statusNodeRef","setStatusNodeRef","operationsPopupOpen","setOperationsPopupOpen","cancelPopupOpen","rejudgePopupOpen","togglePublicPopupOpen","deletePopupOpen","showRejudge","permissionRejudge","showCancel","permissionCancel","showTogglePublic","permissionSetPublic","showDelete","permissionDelete","statusPopup","statusNode","innerRef","e","tagName","operationsPopup","trigger","open","onOpen","onClose","disabled","hoverable","vertical","operations","Item","position","context","negative","loading","positive","textAlign","basic","unstackable","fixed","compact","Header","page","Body","getCompilationMessage","compile","getSystemMessage","getSubtasksView","accordion","observer","defineRoute","request","parseInt","params","queryResult","default","getHighlightLanguageList","lang","CodeFormatter","uuid"],"mappings":"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","file":"static/js/161.bcf35cfb.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect, useMemo } from \"react\";\nimport { Table, Icon, Accordion, Grid, SemanticWIDTHS, Button, Popup, Ref, Menu } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\nimport { v4 as uuid } from \"uuid\";\nimport { patch } from \"jsondiffpatch\";\n\nimport style from \"./SubmissionPage.module.less\";\n\nimport { appState } from \"@/appState\";\nimport api from \"@/api\";\nimport toast from \"@/utils/toast\";\nimport { useLocalizer, useSocket, useScreenWidthWithin, useNavigationChecked } from \"@/utils/hooks\";\nimport { SubmissionHeader, SubmissionItem, SubmissionItemExtraRows } from \"../componments/SubmissionItem\";\nimport StatusText from \"@/components/StatusText\";\nimport formatFileSize from \"@/utils/formatFileSize\";\nimport downloadFile from \"@/utils/downloadFile\";\nimport { SubmissionStatus } from \"@/interfaces/SubmissionStatus\";\nimport * as CodeFormatter from \"@/utils/CodeFormatter\";\nimport * as CodeHighlighter from \"@/utils/CodeHighlighter\";\nimport { OmittableAnsiCodeBox, OmittableString } from \"@/components/CodeBox\";\nimport { defineRoute, RouteError } from \"@/AppRouter\";\nimport { TestcaseResultCommon, ProblemTypeSubmissionView, GetAdditionalSectionsCallback } from \"./common/interface\";\nimport { SubmissionProgressMessageMetaOnly, SubmissionProgressType } from \"../common\";\nimport { makeToBeLocalizedText } from \"@/locales\";\nimport { EmojiRenderer } from \"@/components/EmojiRenderer\";\n\nasync function fetchData(submissionId: number) {\n  const { requestError, response } = await api.submission.getSubmissionDetail({\n    submissionId: submissionId.toString(),\n    locale: appState.locale\n  });\n\n  if (requestError) throw new RouteError(requestError, { showRefresh: true, showBack: true });\n  else if (response.error) throw new RouteError(makeToBeLocalizedText(`submission.error.${response.error}`));\n\n  type RemoveOptional<T> = {\n    [K in keyof T]-?: T[K];\n  };\n  return response as RemoveOptional<ApiTypes.GetSubmissionDetailResponseDto>;\n}\n\ninterface SubmissionProgressMessage extends SubmissionProgressMessageMetaOnly {\n  progressDetail?: SubmissionProgress;\n}\n\ninterface TestcaseProgressReference {\n  // If !waiting && !running && !testcaseHash, it's \"Skipped\"\n  waiting?: boolean;\n  running?: boolean;\n  testcaseHash?: string;\n}\n\nexport interface SubmissionProgress<TestcaseResult extends TestcaseResultCommon = TestcaseResultCommon> {\n  progressType: SubmissionProgressType;\n\n  // Only valid when finished\n  status?: SubmissionStatus;\n  score?: number;\n\n  compile?: {\n    compileTaskHash: string;\n    success: boolean;\n    message: OmittableString;\n  };\n\n  systemMessage?: OmittableString;\n\n  // testcaseHash\n  // ->\n  // result\n  testcaseResult?: Record<string, TestcaseResult>;\n  samples?: TestcaseProgressReference[];\n  subtasks?: {\n    score: number;\n    fullScore: number;\n    testcases: TestcaseProgressReference[];\n  }[];\n}\n\nexport interface SubmissionProgressMeta {\n  pending: boolean;\n  // e.g. \"Running\"\n  status: string;\n  // e.g. \"Running 3/10\"\n  statusText?: string;\n  score: number;\n  timeUsed: number;\n  memoryUsed: number;\n}\n\nfunction parseProgress<T extends TestcaseResultCommon>(\n  progress: SubmissionProgress<T>,\n  resultMeta?: ApiTypes.SubmissionBasicMetaDto\n): SubmissionProgressMeta {\n  if (!progress) {\n    if (resultMeta?.status === \"Canceled\")\n      return {\n        pending: false,\n        status: \"Canceled\",\n        score: 0,\n        timeUsed: 0,\n        memoryUsed: 0\n      };\n    else\n      return {\n        pending: true,\n        status: \"Waiting\",\n        score: 0,\n        timeUsed: 0,\n        memoryUsed: 0\n      };\n  }\n\n  let status = \"\",\n    pending = true;\n  switch (progress.progressType) {\n    case SubmissionProgressType.Preparing:\n      status = \"Preparing\";\n      break;\n    case SubmissionProgressType.Compiling:\n      status = \"Compiling\";\n      break;\n    case SubmissionProgressType.Running:\n      status = \"Running\";\n      break;\n    case SubmissionProgressType.Finished:\n      status = resultMeta.status;\n      pending = false;\n      break;\n  }\n\n  let statusText = null;\n  let score = 0;\n\n  if (progress.progressType === SubmissionProgressType.Finished) {\n    // If finished, use the score from result meta\n    score = resultMeta.score;\n  } else if (progress.progressType === SubmissionProgressType.Running) {\n    // If NOT finished, calculate score and append progress to the status text\n    let totalCount = 0;\n    let finishedCount = 0;\n    statusText = status;\n    if (Array.isArray(progress.subtasks)) {\n      for (const subtask of progress.subtasks) {\n        score += subtask.score;\n        for (const testcase of subtask.testcases) {\n          totalCount++;\n          if (!testcase.running && !testcase.waiting) finishedCount++;\n        }\n      }\n      statusText += ` ${finishedCount}/${totalCount}`;\n    }\n  }\n\n  let timeUsed = 0;\n  let memoryUsed = 0;\n  if (progress.progressType === SubmissionProgressType.Finished) {\n    // If finished, use the time/memory usage from result meta\n    timeUsed = resultMeta.timeUsed;\n    memoryUsed = resultMeta.memoryUsed;\n  } else if (Array.isArray(progress.subtasks)) {\n    // If NOT finished, calculate them\n    for (const subtask of progress.subtasks) {\n      for (const { testcaseHash } of subtask.testcases) {\n        if (!testcaseHash) continue;\n        if (progress.testcaseResult[testcaseHash].time != null) timeUsed += progress.testcaseResult[testcaseHash].time;\n        if (progress.testcaseResult[testcaseHash].memory != null)\n          memoryUsed = Math.max(memoryUsed, progress.testcaseResult[testcaseHash].memory);\n      }\n    }\n  }\n\n  return {\n    pending,\n    status,\n    statusText,\n    score: Math.round(score),\n    timeUsed,\n    memoryUsed\n  };\n}\n\ninterface SubmissionPageProps {\n  meta: ApiTypes.SubmissionMetaDto;\n  content: unknown;\n  progress: SubmissionProgress;\n  progressSubscriptionKey?: string;\n  permissionRejudge: boolean;\n  permissionCancel: boolean;\n  permissionSetPublic: boolean;\n  permissionDelete: boolean;\n  ProblemTypeSubmissionView: ProblemTypeSubmissionView;\n}\n\nlet SubmissionPage: React.FC<SubmissionPageProps> = props => {\n  const _ = useLocalizer(\"submission\");\n  const navigation = useNavigationChecked();\n\n  useEffect(() => {\n    appState.enterNewPage(`${_(\".title\")} #${props.meta.id}`, \"submissions\");\n  }, [appState.locale, props.meta]);\n\n  // The meta only provides fields not changing with progress\n  // score, status, time, memory are in the full info\n  // score and status are in this meta, but we still use them in full info\n  const meta: Pick<\n    ApiTypes.SubmissionMetaDto,\n    \"id\" | \"problem\" | \"isPublic\" | \"codeLanguage\" | \"answerSize\" | \"submitTime\" | \"problemTitle\" | \"submitter\"\n  > = props.meta;\n\n  const [progress, setProgress] = useState(props.progress);\n  const [progressMeta, setProgressMeta] = useState(parseProgress(props.progress, props.meta));\n\n  // Subscribe to submission progress with the key\n  const subscriptionKey = props.progressSubscriptionKey;\n  // Save the previous message, since we receive message delta each time\n  const messageRef = useRef<SubmissionProgressMessage>();\n  useSocket(\n    \"submission-progress\",\n    {\n      subscriptionKey: subscriptionKey\n    },\n    socket => {\n      socket.on(\"message\", (submissionId: number, messageDelta: any) => {\n        messageRef.current = patch(messageRef.current, messageDelta);\n        const message = messageRef.current;\n\n        setProgress(message.progressDetail);\n        setProgressMeta(parseProgress(message.progressDetail, message.progressMeta?.resultMeta));\n      });\n    },\n    () => {\n      // Server maintains the \"previous\" messages for each connection,\n      // so clear the local \"previous\" messages after reconnection\n      console.log(\"connected\");\n      messageRef.current = undefined;\n    },\n    !!subscriptionKey\n  );\n\n  // displayMeta contains fields parsed from the progress\n  const displayMeta: ApiTypes.SubmissionMetaDto = {\n    ...meta,\n    timeUsed: progressMeta.timeUsed,\n    memoryUsed: progressMeta.memoryUsed,\n    status: progressMeta.status as any,\n    score: progressMeta.score\n  };\n\n  const refDefaultCopyCodeBox = useRef<HTMLPreElement>(null);\n\n  // Ctrl-A to select all code\n  useEffect(() => {\n    const onKeyDown = (event: KeyboardEvent) => {\n      if (refDefaultCopyCodeBox.current && (event.ctrlKey || event.metaKey) && event.key === \"a\") {\n        var sel = window.getSelection();\n        var rg = document.createRange();\n        rg.selectNodeContents(refDefaultCopyCodeBox.current);\n        sel.removeAllRanges();\n        sel.addRange(rg);\n        event.preventDefault();\n      }\n    };\n    document.addEventListener(\"keydown\", onKeyDown);\n    return () => document.removeEventListener(\"keydown\", onKeyDown);\n  }, []);\n\n  async function onDownload(filename: string) {\n    const { requestError, response } = await api.problem.downloadProblemFiles({\n      problemId: meta.problem.id,\n      type: \"TestData\",\n      filenameList: [filename]\n    });\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) toast.error(_(`.error.${response.error}`));\n    else downloadFile(response.downloadInfo[0].downloadUrl);\n  }\n\n  const isWideScreen = useScreenWidthWithin(1024, Infinity);\n  const isMobile = useScreenWidthWithin(0, 768);\n  const isNarrowMobile = useScreenWidthWithin(0, 425);\n\n  const samples = progress?.samples || [];\n  const samplesRunning = samples.some(sample => sample.running);\n  const samplesFinishedCount = samples.filter(sample => !sample.running && !sample.waiting).length;\n  const samplesDisplayInfo = {\n    status: samplesFinishedCount < samples.length ? (samplesRunning ? \"Running\" : \"Waiting\") : null,\n    statusText: null\n  };\n  if (samplesDisplayInfo.status == null) {\n    // Samples finished\n    for (const sample of samples) {\n      if (!sample.testcaseHash) {\n        samplesDisplayInfo.status = \"Skipped\";\n        break;\n      } else if (progress.testcaseResult[sample.testcaseHash].status !== \"Accepted\") {\n        samplesDisplayInfo.status = progress.testcaseResult[sample.testcaseHash].status;\n        break;\n      }\n    }\n\n    if (samplesDisplayInfo.status == null) samplesDisplayInfo.status = \"Accepted\";\n  } else {\n    samplesDisplayInfo.statusText = samplesDisplayInfo.status + \" \" + samplesFinishedCount + \"/\" + samples.length;\n  }\n\n  const subtasks = progress?.subtasks || [];\n  const subtaskDisplayInfo: {\n    status: string;\n    statusText?: string;\n    expandable: boolean;\n  }[] = new Array(subtasks.length);\n  subtasks.forEach((subtask, i) => {\n    let finishedCount = 0,\n      runningCount = 0,\n      firstNonAcceptedStatus = \"\";\n    for (const testcase of subtask.testcases) {\n      if (!testcase.waiting && !testcase.running) {\n        finishedCount++;\n        if (testcase.testcaseHash) {\n          const testcaseResult = progress.testcaseResult[testcase.testcaseHash];\n          if (!firstNonAcceptedStatus && testcaseResult.status !== \"Accepted\")\n            firstNonAcceptedStatus = testcaseResult.status;\n        } else {\n          // Skipped\n          if (!firstNonAcceptedStatus) firstNonAcceptedStatus = \"Skipped\";\n        }\n      } else if (testcase.running) runningCount++;\n    }\n\n    if (finishedCount === subtask.testcases.length) {\n      subtaskDisplayInfo[i] = {\n        status: firstNonAcceptedStatus || \"Accepted\",\n        expandable: firstNonAcceptedStatus !== \"Skipped\"\n      };\n    } else {\n      if (finishedCount === 0 && runningCount === 0)\n        subtaskDisplayInfo[i] = {\n          status: \"Waiting\",\n          expandable: false\n        };\n      else\n        subtaskDisplayInfo[i] = {\n          status: \"Running\",\n          expandable: true\n        };\n      subtaskDisplayInfo[i].statusText =\n        subtaskDisplayInfo[i].status + \" \" + finishedCount + \"/\" + subtask.testcases.length;\n    }\n  });\n\n  function round(x?: number) {\n    x = x || 0;\n    const s = x.toFixed(1);\n    return s.endsWith(\".0\") ? s.slice(0, -2) : s;\n  }\n\n  const hideTimeMemory = props.ProblemTypeSubmissionView?.config?.hideTimeMemory;\n\n  const getTestcasesAccordionPanels = (\n    testcases: TestcaseProgressReference[],\n    isSample: boolean,\n    getAdditionalSections: GetAdditionalSectionsCallback\n  ) =>\n    testcases.map((testcase, i) => {\n      const testcaseResult = testcase.testcaseHash && progress.testcaseResult[testcase.testcaseHash];\n      let status: string, expandable: boolean;\n      if (testcase.waiting) {\n        status = \"Waiting\";\n        expandable = false;\n      } else if (testcase.running) {\n        status = \"Running\";\n        expandable = false;\n      } else if (!testcaseResult) {\n        status = \"Skipped\";\n        expandable = false;\n      } else {\n        status = testcaseResult.status;\n        expandable = true;\n      }\n\n      return {\n        key: i,\n        // If a testcase is unexpandable, make it unable to be \"active\"\n        [!expandable ? \"active\" : \"\"]: false,\n        title: (() => {\n          const columnTitle = (width: SemanticWIDTHS) => (\n            <Grid.Column className={style.testcaseColumnTitle} width={width}>\n              <Icon name=\"dropdown\" />\n              {isSample ? _(\".sample_testcase\") : _(\".testcase.title\")} #{i + 1}\n            </Grid.Column>\n          );\n\n          const columnStatus = (width: SemanticWIDTHS) => (\n            <Grid.Column className={style.testcaseColumnStatus} width={width}>\n              <StatusText status={status} />\n            </Grid.Column>\n          );\n\n          const columnScore = (width: SemanticWIDTHS) =>\n            testcaseResult && (\n              <Grid.Column className={style.testcaseColumnScore} width={width}>\n                <Icon className={style.accordionTitleIcon} name=\"clipboard check\" />\n                {round(testcaseResult.score)} pts\n              </Grid.Column>\n            );\n\n          const columnTime = (width: SemanticWIDTHS) =>\n            !hideTimeMemory &&\n            testcaseResult && (\n              <Grid.Column className={style.testcaseColumnTime} width={width}>\n                <span\n                  title={\n                    testcaseResult.time == null\n                      ? null\n                      : Math.round(testcaseResult.time || 0) + \" ms / \" + testcaseResult.testcaseInfo.timeLimit + \" ms\"\n                  }\n                >\n                  <Icon className={style.accordionTitleIcon} name=\"clock\" />\n                  {Math.round(testcaseResult.time || 0) + \" ms\"}\n                </span>\n              </Grid.Column>\n            );\n\n          const columnMemory = (width: SemanticWIDTHS) =>\n            !hideTimeMemory &&\n            testcaseResult && (\n              <Grid.Column className={style.testcaseColumnMemory} width={width}>\n                <span\n                  title={\n                    testcaseResult.memory == null\n                      ? null\n                      : (testcaseResult.memory || 0) + \" K / \" + testcaseResult.testcaseInfo.memoryLimit * 1024 + \" K\"\n                  }\n                >\n                  <Icon className={style.accordionTitleIcon} name=\"microchip\" />\n                  {formatFileSize((testcaseResult.memory || 0) * 1024, 1)}\n                </span>\n              </Grid.Column>\n            );\n\n          return isMobile ? (\n            <Accordion.Title className={style.accordionTitle + \" \" + style.accordionTitleTwoRows}>\n              <Grid>\n                <Grid.Row className={style.accordionTitleFirstRow}>\n                  {columnTitle(6)}\n                  {columnStatus(10)}\n                </Grid.Row>\n                {testcase && (\n                  <Grid.Row className={style.accordionTitleSecondRow}>\n                    {columnScore(6)}\n                    {columnTime(5)}\n                    {columnMemory(5)}\n                  </Grid.Row>\n                )}\n              </Grid>\n            </Accordion.Title>\n          ) : (\n            <Accordion.Title className={style.accordionTitle}>\n              <Grid>\n                {columnTitle(3)}\n                {columnStatus(4)}\n                {testcase && (\n                  <>\n                    {columnScore(3)}\n                    {columnTime(3)}\n                    {columnMemory(3)}\n                  </>\n                )}\n              </Grid>\n            </Accordion.Title>\n          );\n        })(),\n        content: !testcaseResult ? null : (\n          <Accordion.Content className={style.accordionContent}>\n            {testcaseResult.input && (\n              <OmittableAnsiCodeBox\n                title={\n                  <>\n                    <strong>{_(\".testcase.input\")}</strong>\n                    {testcaseResult.testcaseInfo.inputFile && (\n                      <span\n                        className={\"monospace \" + style.fileNameWrapper}\n                        onClick={() => onDownload(testcaseResult.testcaseInfo.inputFile)}\n                      >\n                        <EmojiRenderer>\n                          <span className={style.fileName}>{testcaseResult.testcaseInfo.inputFile}</span>\n                        </EmojiRenderer>\n                        <Icon name=\"download\" />\n                      </span>\n                    )}\n                  </>\n                }\n                ansiMessage={testcaseResult.input}\n              />\n            )}\n            {testcaseResult.output && (\n              <OmittableAnsiCodeBox\n                title={\n                  <>\n                    <strong>{_(\".testcase.output\")}</strong>\n                    {testcaseResult.testcaseInfo.outputFile && (\n                      <span\n                        className={\"monospace \" + style.fileNameWrapper}\n                        onClick={() => onDownload(testcaseResult.testcaseInfo.outputFile)}\n                      >\n                        <EmojiRenderer>\n                          <span className={style.fileName}>{testcaseResult.testcaseInfo.outputFile}</span>\n                        </EmojiRenderer>\n                        <Icon name=\"download\" />\n                      </span>\n                    )}\n                  </>\n                }\n                ansiMessage={testcaseResult.output}\n              />\n            )}\n            <OmittableAnsiCodeBox title={_(\".testcase.user_output\")} ansiMessage={testcaseResult.userOutput} />\n            <OmittableAnsiCodeBox title={_(\".testcase.user_error\")} ansiMessage={testcaseResult.userError} />\n            {getAdditionalSections(testcaseResult)}\n            <OmittableAnsiCodeBox title={_(\".testcase.system_message\")} ansiMessage={testcaseResult.systemMessage} />\n          </Accordion.Content>\n        )\n      };\n    });\n\n  const getSamplePanel = (getAdditionalSections: GetAdditionalSectionsCallback) => ({\n    key: \"samples\",\n    title: (() => {\n      const columnTitle = (width: SemanticWIDTHS) => (\n        <Grid.Column width={width}>\n          <Icon name=\"dropdown\" />\n          {_(\".sample\")}\n        </Grid.Column>\n      );\n\n      const columnStatus = (width: SemanticWIDTHS) => (\n        <Grid.Column width={width}>\n          <StatusText status={samplesDisplayInfo.status} statusText={samplesDisplayInfo.statusText} />\n        </Grid.Column>\n      );\n\n      if (isWideScreen) {\n        return (\n          <Accordion.Title className={style.accordionTitle}>\n            <Grid>\n              {columnTitle(3)}\n              {columnStatus(4)}\n            </Grid>\n          </Accordion.Title>\n        );\n      } else if (!isMobile) {\n        return (\n          <Accordion.Title className={style.accordionTitle}>\n            <Grid>\n              {columnTitle(4)}\n              {columnStatus(5)}\n            </Grid>\n          </Accordion.Title>\n        );\n      } else if (!isNarrowMobile) {\n        return (\n          <Accordion.Title className={style.accordionTitle}>\n            <Grid>\n              {columnTitle(4)}\n              {columnStatus(7)}\n            </Grid>\n          </Accordion.Title>\n        );\n      } else {\n        return (\n          <Accordion.Title className={style.accordionTitle}>\n            <Grid>\n              {columnTitle(6)}\n              {columnStatus(10)}\n            </Grid>\n          </Accordion.Title>\n        );\n      }\n    })(),\n    content: (\n      <Accordion.Content className={style.accordionContent + \" \" + style.subtaskContent}>\n        <Accordion\n          className={\"styled fluid \" + style.subAccordion}\n          panels={getTestcasesAccordionPanels(samples, true, getAdditionalSections)}\n        />\n      </Accordion.Content>\n    )\n  });\n\n  const getSubtasksAccordionPanels = (getAdditionalSections: GetAdditionalSectionsCallback) =>\n    subtasks.map((subtask, i) => ({\n      key: i,\n      // If a subtask is unexpandable, make it unable to be \"active\"\n      [!subtaskDisplayInfo[i].expandable ? \"active\" : \"\"]: false,\n      title: (() => {\n        const columnTitle = (width: SemanticWIDTHS) => (\n          <Grid.Column width={width}>\n            <Icon name=\"dropdown\" />\n            {_(\".subtask.title\")} #{i + 1}\n          </Grid.Column>\n        );\n\n        const columnStatus = (width: SemanticWIDTHS) => (\n          <Grid.Column width={width}>\n            <StatusText status={subtaskDisplayInfo[i].status} statusText={subtaskDisplayInfo[i].statusText} />\n          </Grid.Column>\n        );\n\n        const columnScore = (width: SemanticWIDTHS) => (\n          <Grid.Column width={width}>\n            <Icon className={style.accordionTitleIcon} name=\"clipboard check\" />\n            {round(subtask.score)}/{round(subtask.fullScore)} pts\n          </Grid.Column>\n        );\n\n        if (isWideScreen) {\n          return (\n            <Accordion.Title className={style.accordionTitle}>\n              <Grid>\n                {columnTitle(3)}\n                {columnStatus(4)}\n                {columnScore(3)}\n              </Grid>\n            </Accordion.Title>\n          );\n        } else if (!isMobile) {\n          return (\n            <Accordion.Title className={style.accordionTitle}>\n              <Grid>\n                {columnTitle(4)}\n                {columnStatus(5)}\n                {columnScore(4)}\n              </Grid>\n            </Accordion.Title>\n          );\n        } else if (!isNarrowMobile) {\n          return (\n            <Accordion.Title className={style.accordionTitle}>\n              <Grid>\n                {columnTitle(4)}\n                {columnStatus(7)}\n                {columnScore(5)}\n              </Grid>\n            </Accordion.Title>\n          );\n        } else {\n          return (\n            <Accordion.Title className={style.accordionTitle + \" \" + style.accordionTitleTwoRows}>\n              <Grid>\n                <Grid.Row className={style.accordionTitleFirstRow}>\n                  {columnTitle(6)}\n                  {columnStatus(10)}\n                </Grid.Row>\n                <Grid.Row className={style.accordionTitleSecondRow}>{columnScore(5)}</Grid.Row>\n              </Grid>\n            </Accordion.Title>\n          );\n        }\n      })(),\n      content: (\n        <Accordion.Content className={style.accordionContent + \" \" + style.subtaskContent}>\n          <Accordion\n            className={\"styled fluid \" + style.subAccordion}\n            panels={getTestcasesAccordionPanels(subtask.testcases, false, getAdditionalSections)}\n          />\n        </Accordion.Content>\n      )\n    }));\n\n  const getSubtasksView = (getAdditionalSections: GetAdditionalSectionsCallback) =>\n    subtasks.length > 0 &&\n    (subtasks.length === 1 ? (\n      <Accordion\n        className={\"styled fluid \" + style.accordion}\n        panels={\n          samples && samples.length > 0\n            ? [\n                getSamplePanel(getAdditionalSections),\n                ...getTestcasesAccordionPanels(subtasks[0].testcases, false, getAdditionalSections)\n              ]\n            : getTestcasesAccordionPanels(subtasks[0].testcases, false, getAdditionalSections)\n        }\n      />\n    ) : (\n      <Accordion\n        className={\"styled fluid \" + style.accordion}\n        panels={\n          samples && samples.length > 0\n            ? [getSamplePanel(getAdditionalSections), ...getSubtasksAccordionPanels(getAdditionalSections)]\n            : getSubtasksAccordionPanels(getAdditionalSections)\n        }\n      />\n    ));\n\n  const answerInfo = useMemo(\n    () =>\n      props.ProblemTypeSubmissionView.getAnswerInfo && props.ProblemTypeSubmissionView.getAnswerInfo(props.content, _),\n    [props.content]\n  );\n  const onDownloadAnswer =\n    props.ProblemTypeSubmissionView?.getDownloadAnswerFilename &&\n    (async () => {\n      const { requestError, response } = await api.submission.downloadSubmissionFile({\n        submissionId: props.meta.id,\n        filename: props.ProblemTypeSubmissionView.getDownloadAnswerFilename(props.meta)\n      });\n\n      if (requestError) toast.error(requestError(_));\n      else if (response.error) toast.error(_(`.errors.${response.error}`));\n      else downloadFile(response.url);\n    });\n\n  const [operationPending, setOperationPending] = useState(false);\n\n  async function onCancel() {\n    if (operationPending) return;\n    setOperationPending(true);\n\n    const { requestError, response } = await api.submission.cancelSubmission({\n      submissionId: meta.id\n    });\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) toast.error(_(`.error.${response.error}`));\n    else {\n      toast.success(_(\".success_cancel\"));\n    }\n\n    setCancelPopupOpen(false);\n    setOperationPending(false);\n  }\n\n  async function onRejudge() {\n    if (operationPending) return;\n    setOperationPending(true);\n\n    const { requestError, response } = await api.submission.rejudgeSubmission({\n      submissionId: meta.id\n    });\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) toast.error(_(`.error.${response.error}`));\n    else {\n      toast.success(_(\".success_rejudge\"));\n      navigation.refresh();\n    }\n\n    setRejudgePopupOpen(false);\n    setOperationPending(false);\n  }\n\n  async function onTogglePublic() {\n    if (operationPending) return;\n    setOperationPending(true);\n\n    const { requestError, response } = await api.submission.setSubmissionPublic({\n      submissionId: meta.id,\n      isPublic: !meta.isPublic\n    });\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) toast.error(_(`.error.${response.error}`));\n    else {\n      toast.success(_(meta.isPublic ? \".success_set_non_public\" : \".success_set_public\"));\n      navigation.refresh();\n    }\n\n    setTogglePublicPopupOpen(false);\n    setOperationPending(false);\n  }\n\n  async function onDelete() {\n    if (operationPending) return;\n    setOperationPending(true);\n\n    const { requestError, response } = await api.submission.deleteSubmission({\n      submissionId: meta.id\n    });\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) toast.error(_(`.error.${response.error}`));\n    else {\n      toast.success(_(\".success_delete\"));\n      navigation.navigate(\"/s\");\n    }\n\n    setDeletePopupOpen(false);\n    setOperationPending(false);\n  }\n\n  const [statusNodeRef, setStatusNodeRef] = useState<HTMLElement>();\n\n  const [operationsPopupOpen, setOperationsPopupOpen] = useState(false);\n  const [cancelPopupOpen, setCancelPopupOpen] = useState(false);\n  const [rejudgePopupOpen, setRejudgePopupOpen] = useState(false);\n  const [togglePublicPopupOpen, setTogglePublicPopupOpen] = useState(false);\n  const [deletePopupOpen, setDeletePopupOpen] = useState(false);\n\n  const showRejudge = props.permissionRejudge;\n  const showCancel = props.permissionCancel && progressMeta.pending;\n  const showTogglePublic = props.permissionSetPublic;\n  const showDelete = props.permissionDelete;\n\n  const statusPopup = (statusNode: JSX.Element) =>\n    !showRejudge && !showCancel ? (\n      statusNode\n    ) : (\n      <>\n        <Ref innerRef={e => e && e.tagName === \"TD\" && setStatusNodeRef(e)}>\n          <Popup\n            className={style.operationsPopup}\n            trigger={statusNode}\n            open={operationsPopupOpen}\n            onOpen={() => !cancelPopupOpen && !rejudgePopupOpen && setOperationsPopupOpen(true)}\n            onClose={() => setOperationsPopupOpen(false)}\n            disabled={operationPending}\n            hoverable\n            content={\n              <Menu vertical className={style.operations}>\n                {showCancel && (\n                  <Menu.Item\n                    content={\n                      <>\n                        <Icon name=\"ban\" />\n                        {_(\".cancel\")}\n                      </>\n                    }\n                    onClick={() => (setOperationsPopupOpen(false), setCancelPopupOpen(true))}\n                  />\n                )}\n                {showRejudge && (\n                  <Menu.Item\n                    content={\n                      <>\n                        <Icon name=\"refresh\" />\n                        {_(\".rejudge\")}\n                      </>\n                    }\n                    onClick={() => (setOperationsPopupOpen(false), setRejudgePopupOpen(true))}\n                  />\n                )}\n                {showTogglePublic && (\n                  <Menu.Item\n                    content={\n                      <>\n                        <Icon name={meta.isPublic ? \"eye slash\" : \"eye\"} />\n                        {_(meta.isPublic ? \".set_non_public\" : \".set_public\")}\n                      </>\n                    }\n                    onClick={() => (setOperationsPopupOpen(false), setTogglePublicPopupOpen(true))}\n                  />\n                )}\n                {showDelete && (\n                  <Menu.Item\n                    content={\n                      <>\n                        <Icon name=\"delete\" />\n                        {_(\".delete\")}\n                      </>\n                    }\n                    onClick={() => (setOperationsPopupOpen(false), setDeletePopupOpen(true))}\n                  />\n                )}\n              </Menu>\n            }\n            position=\"bottom left\"\n            on=\"hover\"\n          />\n        </Ref>\n        {showCancel && (\n          <Popup\n            open={cancelPopupOpen}\n            onClose={() => setCancelPopupOpen(false)}\n            context={statusNodeRef}\n            content={<Button negative content={_(\".confirm_cancel\")} loading={operationPending} onClick={onCancel} />}\n            position=\"bottom left\"\n          />\n        )}\n        {showRejudge && (\n          <Popup\n            open={rejudgePopupOpen}\n            onClose={() => setRejudgePopupOpen(false)}\n            context={statusNodeRef}\n            content={<Button negative content={_(\".confirm_rejudge\")} loading={operationPending} onClick={onRejudge} />}\n            position=\"bottom left\"\n          />\n        )}\n        {showTogglePublic && (\n          <Popup\n            open={togglePublicPopupOpen}\n            onClose={() => setTogglePublicPopupOpen(false)}\n            context={statusNodeRef}\n            content={\n              <Button\n                positive={!meta.isPublic}\n                content={_(meta.isPublic ? \".confirm_set_non_public\" : \".confirm_set_public\")}\n                loading={operationPending}\n                onClick={onTogglePublic}\n              />\n            }\n            position=\"bottom left\"\n          />\n        )}\n        {showDelete && (\n          <Popup\n            open={deletePopupOpen}\n            onClose={() => setDeletePopupOpen(false)}\n            context={statusNodeRef}\n            content={<Button negative content={_(\".confirm_delete\")} loading={operationPending} onClick={onDelete} />}\n            position=\"bottom left\"\n          />\n        )}\n      </>\n    );\n\n  return (\n    <>\n      {!isMobile && (\n        <Table textAlign=\"center\" basic=\"very\" unstackable fixed={isWideScreen} compact={isWideScreen ? false : \"very\"}>\n          <Table.Header>\n            <SubmissionHeader\n              page=\"submission\"\n              config={{\n                hideTimeMemory\n              }}\n            />\n          </Table.Header>\n          <Table.Body>\n            <SubmissionItem\n              submission={displayMeta}\n              statusText={progressMeta.statusText}\n              answerInfo={answerInfo}\n              onDownloadAnswer={onDownloadAnswer}\n              page=\"submission\"\n              statusPopup={statusPopup}\n              config={{\n                hideTimeMemory\n              }}\n            />\n          </Table.Body>\n        </Table>\n      )}\n      {!isWideScreen && (\n        <SubmissionItemExtraRows\n          submission={displayMeta}\n          answerInfo={answerInfo}\n          onDownloadAnswer={onDownloadAnswer}\n          isMobile={isMobile}\n          statusPopup={statusPopup}\n          config={{\n            hideTimeMemory\n          }}\n        />\n      )}\n      <props.ProblemTypeSubmissionView\n        progress={progress}\n        progressMeta={progressMeta}\n        content={props.content}\n        getCompilationMessage={() =>\n          progress?.compile?.message && (\n            <OmittableAnsiCodeBox title={_(\".compilation_message\")} ansiMessage={progress.compile.message} />\n          )\n        }\n        getSystemMessage={() =>\n          progress?.systemMessage && (\n            <OmittableAnsiCodeBox title={_(\".system_message\")} ansiMessage={progress.systemMessage} />\n          )\n        }\n        getSubtasksView={getSubtasksView}\n        refDefaultCopyCodeBox={refDefaultCopyCodeBox}\n      />\n    </>\n  );\n};\n\nSubmissionPage = observer(SubmissionPage);\n\nexport default defineRoute(async request => {\n  const queryResult = await fetchData(parseInt(request.params.id) || 0);\n\n  const ProblemTypeSubmissionView: ProblemTypeSubmissionView = (\n    await (() => {\n      switch (queryResult.meta.problem.type) {\n        case \"Traditional\":\n          return import(\"./types/TraditionalProblemSubmissionView\");\n        case \"Interaction\":\n          return import(\"./types/InteractionProblemSubmissionView\");\n        case \"SubmitAnswer\":\n          return import(\"./types/SubmitAnswerProblemSubmissionView\");\n      }\n    })()\n  ).default;\n\n  // Load highlight\n  const highlightLanguageList =\n    (ProblemTypeSubmissionView.getHighlightLanguageList &&\n      ProblemTypeSubmissionView.getHighlightLanguageList(queryResult.content)) ||\n    [];\n\n  if (highlightLanguageList.some(lang => CodeFormatter.isLanguageSupported(lang))) {\n    await CodeFormatter.ready;\n  }\n\n  return (\n    <SubmissionPage key={uuid()} {...(queryResult as any)} ProblemTypeSubmissionView={ProblemTypeSubmissionView} />\n  );\n});\n"],"sourceRoot":""}