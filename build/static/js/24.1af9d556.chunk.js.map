{"version":3,"sources":["markdown/mathjax.ts","markdown/sanitize.ts","markdown/MarkdownContent.tsx","markdown/markdown.ts"],"names":["mathjax","handlers","register","SafeHandler","HTMLHandler","browserAdaptor","mathDocument","document","InputJax","TeX","packages","OutputJax","SVG","updateDocument","xssWhiteList","require","whiteList","originalAttrValue","name","value","escapeAttrValue","audio","video","input","Object","keys","forEach","tag","push","parseUrlIfSameOrigin","href","url","URL","location","origin","e","MarkdownContent","props","html","useMemo","text","onPatchRenderer","highlightPlaceholders","mathPlaceholders","generatePlaceholder","id","addMathPlaceholder","code","display","placeholder","uuid","renderer","MarkdownIt","breaks","linkify","typographer","highlight","language","use","MarkdownItMath","inlineOpen","inlineClose","blockOpen","blockClose","inlineRenderer","blockRenderer","MarkdownItMergeCells","MarkdownItMentions","parseURL","username","MarkdownItTaskLists","enabled","render","wrapperElement","querySelector","renderMarkdown","content","patcher","markdownResult","findPlaceholderElement","wrapper","createElement","innerHTML","noSanitize","onTagAttr","FilterXSS","stripIgnoreTag","isWhiteAttr","result","toLowerCase","startsWith","process","sanitize","onXssFileterAttr","item","outerHTML","element","parentNode","replaceChild","math","convert","console","log","className","setAttribute","message","innerText","String","style","fontWeight","border","padding","appendChild","renderMath","twemoji","parse","getTwemojiOptions","Array","from","getElementsByTagName","a","relList","add","target","getElementsByClassName","li","tagName","firstElementChild","type","checked","semanticCheckbox","taskListCheckbox","div","append","childNodes","firstChild","segment","codeBoxStyle","classList","pre","contains","patchStyles","navigation","useNavigationChecked","useState","setWrapperElement","useEffect","cleanCallbacks","addEventListener","onLinkClick","removeEventListener","onPatchResult","fn","targetElement","includes","preventDefault","navigate","pathname","search","hash","markdownContent","dontUseContentFont","noOverflowCutFix","dangerouslySetInnerHTML","__html","ref","React","memo"],"mappings":"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","file":"static/js/24.1af9d556.chunk.js","sourcesContent":["import { mathjax } from \"mathjax-full/js/mathjax\";\nimport { TeX } from \"mathjax-full/js/input/tex\";\nimport { SVG } from \"mathjax-full/js/output/svg\";\nimport { browserAdaptor } from \"mathjax-full/js/adaptors/browserAdaptor\";\nimport { HTMLHandler } from \"mathjax-full/js/handlers/html/HTMLHandler\";\nimport { SafeHandler } from \"mathjax-full/js/ui/safe/SafeHandler\";\n\n// Load TeX packages\nimport \"mathjax-full/js/input/tex/ams/AmsConfiguration.js\";\nimport \"mathjax-full/js/input/tex/boldsymbol/BoldsymbolConfiguration.js\";\nimport \"mathjax-full/js/input/tex/colorv2/ColorV2Configuration.js\";\nimport \"mathjax-full/js/input/tex/html/HtmlConfiguration.js\";\nimport \"mathjax-full/js/input/tex/noundefined/NoUndefinedConfiguration.js\";\nimport \"mathjax-full/js/input/tex/physics/PhysicsConfiguration.js\";\n\nmathjax.handlers.register(SafeHandler(new HTMLHandler(browserAdaptor())));\n\nconst mathDocument = mathjax.document(document, {\n  InputJax: new TeX({\n    packages: {\n      \"[+]\": [\"ams\", \"boldsymbol\", \"colorv2\", \"html\", \"noundefined\", \"physics\"]\n    }\n  }),\n  OutputJax: new SVG()\n});\n\n// Add CSS styles\nmathDocument.updateDocument();\n\nexport function renderMath(math: string, display: boolean) {\n  try {\n    return mathDocument.convert(math, {\n      display\n    });\n  } catch (e) {\n    console.log(e);\n\n    const wrapper = document.createElement(\"mjx-container\");\n    wrapper.className = \"MathJax\";\n    wrapper.setAttribute(\"jax\", \"SVG\");\n    if (display) wrapper.setAttribute(\"display\", \"true\");\n\n    const message = document.createElement(\"span\");\n    message.innerText = `Failed to render math, ${String(e)}`;\n    message.style.fontWeight = \"bold\";\n    message.style.display = \"inline-block\";\n    message.style.border = \"2px solid var(--theme-foreground)\";\n    message.style.padding = \"0 4px\";\n\n    wrapper.appendChild(message);\n    return wrapper;\n  }\n}\n","import { FilterXSS, escapeAttrValue } from \"xss\";\n\n// Get the default white list\nconst xssWhiteList = require(\"xss/lib/default\").whiteList;\n\n// Disallow <audio> and <video> tags\ndelete xssWhiteList.audio;\ndelete xssWhiteList.video;\n\nxssWhiteList.input = [\"type\", \"disabled\", \"checked\"];\n\n// Allow \"style\" and \"class\" attributes\nObject.keys(xssWhiteList).forEach(tag => {\n  xssWhiteList[tag].push(\"style\", \"class\");\n});\n\n// The \"data-id\" arrtibute is used for highlight and math rendering\nxssWhiteList[\"span\"].push(\"data-id\");\n\nfunction originalAttrValue(name: string, value: string) {\n  return name + '=\"' + escapeAttrValue(value) + '\"';\n}\n\nexport function sanitize(\n  html: string,\n  onTagAttr?: (\n    tagName: string,\n    attrName: string,\n    value: string,\n    escapeAttrValue: (value: string) => string\n  ) => boolean | string | void\n) {\n  const xss = new FilterXSS({\n    whiteList: xssWhiteList,\n    stripIgnoreTag: true,\n    onTagAttr: (tag, name, value, isWhiteAttr) => {\n      if (onTagAttr) {\n        const result = onTagAttr(tag, name, value, escapeAttrValue);\n        if (typeof result === \"string\") return result;\n        else if (result === true) return originalAttrValue(name, value);\n      }\n\n      // Allow data URIs for <img>\n      if (tag.toLowerCase() === \"img\" && name.toLowerCase() === \"src\" && value.startsWith(\"data:image/\"))\n        return originalAttrValue(name, value);\n    }\n  });\n\n  const filteredHtml = xss.process(html);\n  if (!filteredHtml) return \"\";\n\n  return filteredHtml;\n}\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport MarkdownIt from \"markdown-it\";\nimport twemoji from \"twemoji\";\n\nimport style from \"./MarkdownContent.module.less\";\n\nimport { renderMarkdown } from \"./markdown\";\nimport { renderMath } from \"./mathjax\";\nimport { sanitize } from \"./sanitize\";\nimport { useNavigationChecked } from \"@/utils/hooks\";\nimport { highlight } from \"@/utils/CodeHighlighter\";\nimport { getTwemojiOptions } from \"@/components/EmojiRenderer\";\nimport { codeBoxStyle } from \"@/components/CodeBox\";\n\nexport interface MarkdownContentPatcher {\n  onPatchRenderer?: (renderer: MarkdownIt) => void;\n  onPatchResult?: (element: HTMLDivElement) => (() => void) | void;\n  onXssFileterAttr?: (\n    tagName: string,\n    attrName: string,\n    value: string,\n    escapeAttrValue: (value: string) => string\n  ) => string | boolean | void;\n}\n\nexport interface MarkdownContentProps {\n  className?: string;\n  content: string;\n  noSanitize?: boolean;\n  patcher?: MarkdownContentPatcher;\n  dontUseContentFont?: boolean;\n  noOverflowCutFix?: boolean;\n}\n\n// Patch rendered-markdown's styles for semantic-ui\nfunction patchStyles(wrapper: HTMLDivElement) {\n  // Wrap <pre> tags with segments\n  Array.from(wrapper.getElementsByTagName(\"pre\")).forEach(element => {\n    // Wrap\n    const segment = document.createElement(\"div\");\n    segment.className = \"ui existing segment \" + codeBoxStyle.segment;\n    element.parentNode.replaceChild(segment, element);\n    segment.appendChild(element);\n\n    // Add default styles for <pre>\n    element.classList.add(codeBoxStyle.pre);\n  });\n\n  // Add default class names for <table>\n  Array.from(wrapper.getElementsByTagName(\"table\")).forEach(element => {\n    if (!element.classList.contains(\"ui\")) {\n      element.classList.add(\"ui\", \"structured\", \"celled\", \"table\");\n    }\n  });\n}\n\nfunction parseUrlIfSameOrigin(href: string) {\n  // `new URL` may throw an exception\n  try {\n    const url = new URL(href, document.location.href);\n    // Check internal links\n    if (url.origin === document.location.origin) {\n      return url;\n    }\n  } catch (e) {}\n  return null;\n}\n\nconst MarkdownContent: React.FC<MarkdownContentProps> = props => {\n  const html = useMemo(() => {\n    const [markdownResult, highlightPlaceholders, mathPlaceholders, findPlaceholderElement] = renderMarkdown(\n      props.content,\n      props.patcher?.onPatchRenderer\n    );\n\n    const wrapper = document.createElement(\"div\");\n    wrapper.innerHTML = props.noSanitize ? markdownResult : sanitize(markdownResult, props.patcher?.onXssFileterAttr);\n\n    // Render highlights\n    highlightPlaceholders.forEach(item => {\n      const element = findPlaceholderElement(wrapper, item.id);\n      element.outerHTML = highlight(item.code, item.language);\n    });\n\n    // Render maths\n    mathPlaceholders.forEach(item => {\n      const element = findPlaceholderElement(wrapper, item.id);\n      element.parentNode.replaceChild(renderMath(item.code, item.display), element);\n    });\n\n    // Render emojis\n    twemoji.parse(wrapper, getTwemojiOptions(true));\n\n    // Patch <a> tags for security reason\n    Array.from(wrapper.getElementsByTagName(\"a\")).forEach(a => {\n      a.relList.add(\"noreferrer\", \"noreferrer\");\n      if (!parseUrlIfSameOrigin(a.href)) a.target = \"_blank\";\n    });\n\n    Array.from(wrapper.getElementsByClassName(\"task-list-item\")).forEach(li => {\n      if (li.tagName !== \"LI\") return;\n\n      const input = li.firstElementChild as HTMLInputElement;\n      if (\n        !input ||\n        input.tagName !== \"INPUT\" ||\n        input.type.toLowerCase() !== \"checkbox\" ||\n        input.className !== \"task-list-item-checkbox\"\n      )\n        return;\n\n      const checked = input.checked;\n\n      const semanticCheckbox = document.createElement(\"div\");\n      semanticCheckbox.className = \"ui checkbox \" + style.taskListCheckbox + (checked ? \" checked\" : \"\");\n      input.className = \"hidden\";\n      semanticCheckbox.appendChild(input);\n\n      const div = document.createElement(\"div\");\n      if (div.append) div.append(...li.childNodes);\n      else while (li.firstChild) div.appendChild(li.firstChild);\n      semanticCheckbox.appendChild(document.createElement(\"label\"));\n      semanticCheckbox.appendChild(div);\n\n      li.appendChild(semanticCheckbox);\n    });\n\n    patchStyles(wrapper);\n\n    return wrapper.innerHTML;\n  }, [props.content, props.noSanitize, props.patcher]);\n\n  const navigation = useNavigationChecked();\n  const [wrapperElement, setWrapperElement] = useState<HTMLDivElement>();\n  useEffect(() => {\n    if (!wrapperElement) return;\n\n    const cleanCallbacks: ((() => void) | void)[] = [];\n\n    // Fix internal links with dynamic generated `<a>` will NOT trigger react-navi's navigation\n    async function onLinkClick(e: MouseEvent) {\n      const targetElement = e.target as HTMLElement;\n      if (targetElement.tagName === \"A\") {\n        const a = targetElement as HTMLAnchorElement;\n        if (![\"\", \"_self\"].includes(a.target.toLowerCase())) return;\n\n        const url = parseUrlIfSameOrigin(a.href);\n        if (url) {\n          e.preventDefault();\n          navigation.navigate(url.pathname + url.search + url.hash);\n        }\n      }\n    }\n\n    wrapperElement.addEventListener(\"click\", onLinkClick);\n    cleanCallbacks.push(() => wrapperElement.removeEventListener(\"click\", onLinkClick));\n\n    // Call patcher\n    const onPatchResult = props.patcher?.onPatchResult;\n    if (onPatchResult && wrapperElement) cleanCallbacks.push(onPatchResult(wrapperElement));\n\n    return () => cleanCallbacks.forEach(fn => fn && fn());\n  }, [props.patcher, wrapperElement]);\n\n  return (\n    <div\n      className={\n        style.markdownContent +\n        (props.className ? \" \" + props.className : \"\") +\n        (!props.dontUseContentFont ? \" content-font\" : \"\") +\n        (props.noOverflowCutFix ? \" \" + style.noOverflowCutFix : \"\")\n      }\n      dangerouslySetInnerHTML={{ __html: html }}\n      ref={setWrapperElement}\n    />\n  );\n};\n\nexport default React.memo(MarkdownContent);\n","import MarkdownIt from \"markdown-it\";\nimport { v4 as uuid } from \"uuid\";\n\nimport MarkdownItMath from \"markdown-it-math-loose\";\nimport MarkdownItMergeCells from \"markdown-it-merge-cells/src\";\nimport MarkdownItMentions from \"markdown-it-mentions\";\nimport MarkdownItTaskLists from \"@hackmd/markdown-it-task-lists\";\n\nexport interface MarkdownHighlightPlaceholder {\n  id: string;\n  code: string;\n  language: string;\n}\n\nexport interface MarkdownMathPlaceholder {\n  id: string;\n  code: string;\n  display: boolean;\n}\n\n// [result, highlightPlaceholders, mathPlaceholders, findPlaceholderElement]\nexport function renderMarkdown(\n  text: string,\n  onPatchRenderer?: (renderer: MarkdownIt) => void\n): [\n  string,\n  MarkdownHighlightPlaceholder[],\n  MarkdownMathPlaceholder[],\n  (wrapperElement: HTMLElement, id: string) => HTMLSpanElement\n] {\n  // Use a <span> placeholder for highlights and maths\n  // They're replaced after HTML sanitation\n\n  const highlightPlaceholders: MarkdownHighlightPlaceholder[] = [];\n  const mathPlaceholders: MarkdownMathPlaceholder[] = [];\n\n  function generatePlaceholder(id: string) {\n    return `<span data-id=${id}></span>`;\n  }\n\n  function findPlaceholderElement(wrapperElement: HTMLElement, id: string): HTMLSpanElement {\n    return wrapperElement.querySelector(`[data-id=\"${id}\"]`);\n  }\n\n  function addHighlightPlaceholder(code: string, language: string) {\n    const placeholder: MarkdownHighlightPlaceholder = {\n      id: uuid(),\n      code,\n      language\n    };\n\n    highlightPlaceholders.push(placeholder);\n\n    return generatePlaceholder(placeholder.id);\n  }\n\n  function addMathPlaceholder(code: string, display: boolean) {\n    const placeholder: MarkdownMathPlaceholder = {\n      id: uuid(),\n      code,\n      display\n    };\n\n    mathPlaceholders.push(placeholder);\n\n    return generatePlaceholder(placeholder.id);\n  }\n\n  // Initialize renderer\n  const renderer = new MarkdownIt({\n    html: true,\n    breaks: false,\n    linkify: true,\n    typographer: false,\n    highlight: addHighlightPlaceholder\n  });\n\n  renderer.use(MarkdownItMath, {\n    inlineOpen: \"$\",\n    inlineClose: \"$\",\n    blockOpen: \"$$\",\n    blockClose: \"$$\",\n    inlineRenderer: (code: string) => addMathPlaceholder(code, false),\n    blockRenderer: (code: string) => addMathPlaceholder(code, true)\n  });\n  renderer.use(MarkdownItMergeCells);\n  renderer.use(MarkdownItMentions, {\n    parseURL: (username: string) => `/u/${username}`\n  });\n  renderer.use(MarkdownItTaskLists, {\n    enabled: true\n  });\n\n  if (onPatchRenderer) onPatchRenderer(renderer);\n\n  return [renderer.render(text), highlightPlaceholders, mathPlaceholders, findPlaceholderElement];\n}\n"],"sourceRoot":""}