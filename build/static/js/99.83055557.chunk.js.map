{"version":3,"sources":["components/ProblemSearch.tsx"],"names":["SEARCH_PROBLEM_PREVIEW_LIST_LENGTH","appState","serverPreference","pagination","searchProblemsPreview","observer","props","_","useLocalizer","className","placeholder","noResultsMessage","onGetResultKey","result","meta","id","onSearch","input","a","startsWith","substr","api","problem","queryProblemSet","Object","assign","locale","queryParameters","keyword","keywordMatchesId","titleOnly","skipCount","takeCount","requestError","response","toast","error","onRenderResult","getProblemDisplayName","title","onResultSelect","onEnterPress"],"mappings":"oOAsBMA,EAAqCC,IAASC,iBAAiBC,WAAWC,sBA0CjEC,iBAxCmC,SAAAC,GAChD,IAAMC,EAAIC,YAAa,6BAEvB,OACE,cAAC,IAAD,CACEC,UAAWH,EAAMG,UACjBC,YAAaJ,EAAMI,aAAeH,EAAE,gBACpCI,iBAAkBJ,EAAE,cACpBK,eAAgB,SAAAC,GAAM,OAAIA,EAAOC,KAAKC,IACtCC,SAAQ,uCAAE,WAAMC,GAAN,mBAAAC,EAAA,yDACcD,EAAME,WAAW,OACpBF,EAAQA,EAAMG,OAAO,IACnCH,EAHG,yCAGW,IAHX,uBAKiCI,IAAIC,QAAQC,gBACnDC,OAAOC,OAAO,CAAEC,OAAQzB,IAASyB,QAAUpB,EAAMqB,gBAAiB,CAChEC,QAASX,EACTY,kBAAkB,EAClBC,WAAW,EACXC,UAAW,EACXC,UAAWhC,KAXP,mBAKAiC,EALA,EAKAA,aAAcC,EALd,EAKcA,UAUlBD,EAfI,iBAeUE,IAAMC,MAAMH,EAAa1B,IAfnC,iDAgBI2B,EAASrB,QAhBb,iCAkBD,IAlBC,4CAAF,sDAoBRwB,eAAgB,SAAAxB,GAAM,OACpB,cAAC,IAAD,UACE,qBAAKJ,UAAU,QAAf,SAAwB6B,YAAsBzB,EAAOC,KAAMD,EAAO0B,MAAOhC,QAG7EiC,eAAgBlC,EAAMkC,eACtBC,aAAcnC,EAAMmC","file":"static/js/99.83055557.chunk.js","sourcesContent":["import React from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport api from \"@/api\";\nimport { useLocalizer } from \"@/utils/hooks\";\nimport toast from \"@/utils/toast\";\nimport PreviewSearch from \"./PreviewSearch\";\nimport { getProblemDisplayName } from \"@/pages/problem/utils\";\nimport { appState } from \"@/appState\";\nimport { EmojiRenderer } from \"./EmojiRenderer\";\n\ninterface ProblemSearchProps {\n  className?: string;\n  placeholder?: string;\n  queryParameters?: Omit<\n    ApiTypes.QueryProblemSetRequestDto,\n    \"locale\" | \"keyword\" | \"titleOnly\" | \"skipCount\" | \"takeCount\"\n  >;\n  onResultSelect: (problem: ApiTypes.QueryProblemSetResponseItemDto) => void;\n  onEnterPress?: (searchKeyword: string) => void;\n}\n\nconst SEARCH_PROBLEM_PREVIEW_LIST_LENGTH = appState.serverPreference.pagination.searchProblemsPreview;\n\nlet ProblemSearch: React.FC<ProblemSearchProps> = props => {\n  const _ = useLocalizer(\"components.problem_search\");\n\n  return (\n    <PreviewSearch\n      className={props.className}\n      placeholder={props.placeholder || _(\".placeholder\")}\n      noResultsMessage={_(\".no_result\")}\n      onGetResultKey={result => result.meta.id}\n      onSearch={async input => {\n        const wildcardStart = input.startsWith(\"*\");\n        if (wildcardStart) input = input.substr(1);\n        if (!input) return [];\n\n        const { requestError, response } = await api.problem.queryProblemSet(\n          Object.assign({ locale: appState.locale }, props.queryParameters, {\n            keyword: input,\n            keywordMatchesId: true,\n            titleOnly: true,\n            skipCount: 0,\n            takeCount: SEARCH_PROBLEM_PREVIEW_LIST_LENGTH\n          })\n        );\n\n        if (requestError) toast.error(requestError(_));\n        else return response.result;\n\n        return [];\n      }}\n      onRenderResult={result => (\n        <EmojiRenderer>\n          <div className=\"title\">{getProblemDisplayName(result.meta, result.title, _)}</div>\n        </EmojiRenderer>\n      )}\n      onResultSelect={props.onResultSelect}\n      onEnterPress={props.onEnterPress}\n    />\n  );\n};\n\nexport default observer(ProblemSearch);\n"],"sourceRoot":""}