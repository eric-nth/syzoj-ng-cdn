{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js","../../src/stub/symbol.ts","../../src/utils.ts","../../src/lib/helpers/miscellaneous.ts","../../src/lib/helpers/webidl.ts","../../src/lib/simple-queue.ts","../../src/lib/readable-stream/generic-reader.ts","../../src/lib/abstract-ops/internal-methods.ts","../../src/stub/number-isfinite.ts","../../src/stub/math-trunc.ts","../../src/lib/validators/basic.ts","../../src/lib/validators/readable-stream.ts","../../src/lib/readable-stream/default-reader.ts","../../src/target/es5/stub/async-iterator-prototype.ts","../../src/lib/readable-stream/async-iterator.ts","../../src/stub/number-isnan.ts","../../src/lib/abstract-ops/miscellaneous.ts","../../src/lib/abstract-ops/queue-with-sizes.ts","../../src/lib/abstract-ops/ecmascript.ts","../../src/lib/readable-stream/byte-stream-controller.ts","../../src/lib/readable-stream/byob-reader.ts","../../src/lib/abstract-ops/queuing-strategy.ts","../../src/lib/validators/queuing-strategy.ts","../../src/lib/validators/underlying-sink.ts","../../src/lib/validators/writable-stream.ts","../../src/lib/writable-stream.ts","../../src/stub/native.ts","../../src/stub/dom-exception.ts","../../src/lib/readable-stream/pipe.ts","../../src/lib/readable-stream/default-controller.ts","../../src/lib/validators/underlying-source.ts","../../src/lib/validators/reader-options.ts","../../src/lib/validators/iterator-options.ts","../../src/lib/validators/pipe-options.ts","../../src/lib/abort-signal.ts","../../src/lib/validators/readable-writable-pair.ts","../../src/lib/readable-stream.ts","../../src/lib/readable-stream/tee.ts","../../src/lib/validators/queuing-strategy-init.ts","../../src/lib/byte-length-queuing-strategy.ts","../../src/lib/count-queuing-strategy.ts","../../src/lib/validators/transformer.ts","../../src/lib/transform-stream.ts","../node_modules/streamsaver/StreamSaver.js","../node_modules/p-all/index.js","../node_modules/p-map/index.js","../node_modules/aggregate-error/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/typeof.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/isNativeFunction.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/construct.js","../node_modules/indent-string/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty.js","../node_modules/clean-stack/index.js","../node_modules/streamsaver/examples/zip-stream.js","../node_modules/use-debounce/esm/useDebounce.js","../node_modules/lodash-es/_createRound.js","../node_modules/lodash-es/round.js","../node_modules/lodash-es/_baseClamp.js","../node_modules/lodash-es/clamp.js","../node_modules/semantic-ui-react/dist/es/modules/Progress/Progress.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/setPrototypeOf.js"],"names":["module","exports","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","self","ReferenceError","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","Reflect","construct","sham","Proxy","Date","toString","call","e","SymbolPolyfill","Symbol","iterator","description","noop","globals","window","global","typeIsObject","x","rethrowAssertionErrorRejection","originalPromise","Promise","originalPromiseThen","then","originalPromiseResolve","resolve","bind","originalPromiseReject","reject","newPromise","executor","promiseResolvedWith","value","promiseRejectedWith","reason","PerformPromiseThen","promise","onFulfilled","onRejected","uponPromise","undefined","uponFulfillment","uponRejection","transformPromiseWith","fulfillmentHandler","rejectionHandler","setPromiseIsHandledToTrue","queueMicrotask","globalQueueMicrotask","resolvedPromise","fn","reflectCall","F","V","args","Function","apply","promiseCall","SimpleQueue","_cursor","_size","this","_front","_elements","_next","_back","element","oldBack","newBack","QUEUE_MAX_ARRAY_SIZE","push","oldFront","newFront","oldCursor","newCursor","elements","callback","node","front","cursor","ReadableStreamReaderGenericInitialize","reader","stream","_ownerReadableStream","_reader","_state","defaultReaderClosedPromiseInitialize","defaultReaderClosedPromiseResolve","defaultReaderClosedPromiseInitializeAsResolved","defaultReaderClosedPromiseInitializeAsRejected","_storedError","ReadableStreamReaderGenericCancel","ReadableStreamCancel","ReadableStreamReaderGenericRelease","defaultReaderClosedPromiseReject","defaultReaderClosedPromiseResetToRejected","readerLockException","name","_closedPromise","_closedPromise_resolve","_closedPromise_reject","AbortSteps","ErrorSteps","CancelSteps","PullSteps","NumberIsFinite","Number","isFinite","MathTrunc","Math","trunc","v","ceil","floor","assertDictionary","obj","context","assertFunction","assertObject","isObject","assertRequiredArgument","position","assertRequiredField","field","convertUnrestrictedDouble","censorNegativeZero","convertUnsignedLongLongWithEnforceRange","upperBound","MAX_SAFE_INTEGER","integerPart","assertReadableStream","IsReadableStream","AcquireReadableStreamDefaultReader","ReadableStreamDefaultReader","ReadableStreamAddReadRequest","readRequest","_readRequests","ReadableStreamFulfillReadRequest","chunk","done","shift","_closeSteps","_chunkSteps","ReadableStreamGetNumReadRequests","ReadableStreamHasDefaultReader","IsReadableStreamDefaultReader","AsyncIteratorPrototype","IsReadableStreamLocked","defaultReaderBrandCheckException","resolvePromise","rejectPromise","ReadableStreamDefaultReaderRead","_errorSteps","hasOwnProperty","_disturbed","_readableStreamController","defineProperties","cancel","read","releaseLock","closed","toStringTag","asyncIterator","ReadableStreamAsyncIteratorImpl","preventCancel","_ongoingPromise","_isFinished","_preventCancel","nextSteps","_nextSteps","returnSteps","_returnSteps","result","ReadableStreamAsyncIteratorPrototype","next","IsReadableStreamAsyncIterator","_asyncIteratorImpl","streamAsyncIteratorBrandCheckException","return","AcquireReadableStreamAsyncIterator","impl","create","NumberIsNaN","isNaN","IsFiniteNonNegativeNumber","IsNonNegativeNumber","Infinity","DequeueValue","container","pair","_queue","_queueTotalSize","size","EnqueueValueWithSize","RangeError","ResetQueue","CreateArrayFromList","slice","ReadableStreamBYOBRequest","bytesWritten","IsReadableStreamBYOBRequest","byobRequestBrandCheckException","_associatedReadableByteStreamController","_view","buffer","controller","ReadableByteStreamControllerRespondInternal","ReadableByteStreamControllerRespond","view","ArrayBuffer","isView","byteLength","firstDescriptor","_pendingPullIntos","peek","byteOffset","bytesFilled","ReadableByteStreamControllerRespondWithNewView","respond","respondWithNewView","ReadableByteStreamController","IsReadableByteStreamController","byteStreamControllerBrandCheckException","_closeRequested","state","_controlledReadableByteStream","ReadableByteStreamControllerError","ReadableByteStreamControllerClearAlgorithms","ReadableStreamClose","ReadableByteStreamControllerClose","transferredBuffer","ReadableByteStreamControllerEnqueueChunkToQueue","Uint8Array","ReadableStreamHasBYOBReader","ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue","ReadableByteStreamControllerCallPullIfNeeded","ReadableByteStreamControllerEnqueue","_cancelAlgorithm","entry","ReadableByteStreamControllerHandleQueueDrain","autoAllocateChunkSize","_autoAllocateChunkSize","bufferE","pullIntoDescriptor","elementSize","viewConstructor","readerType","_byobRequest","byobRequest","request","SetUpReadableStreamBYOBRequest","ReadableByteStreamControllerGetDesiredSize","_started","ReadableStreamGetNumReadIntoRequests","ReadableByteStreamControllerShouldCallPull","_pulling","_pullAgain","_pullAlgorithm","ReadableByteStreamControllerCommitPullIntoDescriptor","filledView","ReadableByteStreamControllerConvertPullIntoDescriptor","readIntoRequest","_readIntoRequests","ReadableStreamFulfillReadIntoRequest","ReadableByteStreamControllerFillPullIntoDescriptorFromQueue","currentAlignedBytes","maxBytesToCopy","min","maxBytesFilled","maxAlignedBytes","totalBytesToCopyRemaining","ready","dest","destOffset","src","srcOffset","n","queue","headOfQueue","bytesToCopy","destStart","set","ReadableByteStreamControllerFillHeadPullIntoDescriptor","ReadableByteStreamControllerInvalidateBYOBRequest","ReadableByteStreamControllerShiftPendingPullInto","ReadableByteStreamControllerRespondInClosedState","remainderSize","end","remainder","ReadableByteStreamControllerRespondInReadableState","ReadableByteStreamControllerClearPendingPullIntos","ReadableStreamError","_strategyHWM","SetUpReadableByteStreamControllerFromUnderlyingSource","underlyingByteSource","highWaterMark","startAlgorithm","pullAlgorithm","cancelAlgorithm","start","pull","r","SetUpReadableByteStreamController","AcquireReadableStreamBYOBReader","ReadableStreamBYOBReader","ReadableStreamAddReadIntoRequest","IsReadableStreamBYOBReader","close","enqueue","error","desiredSize","byobReaderBrandCheckException","constructor","DataView","BYTES_PER_ELEMENT","ctor","emptyView","ReadableByteStreamControllerPullInto","ReadableStreamBYOBReaderRead","ExtractHighWaterMark","strategy","defaultHWM","ExtractSizeAlgorithm","convertQueuingStrategy","init","convertQueuingStrategySize","convertUnderlyingSink","original","abort","type","write","convertUnderlyingSinkAbortCallback","convertUnderlyingSinkCloseCallback","convertUnderlyingSinkStartCallback","convertUnderlyingSinkWriteCallback","assertWritableStream","IsWritableStream","WritableStream","rawUnderlyingSink","rawStrategy","underlyingSink","InitializeWritableStream","sizeAlgorithm","SetUpWritableStreamDefaultControllerFromUnderlyingSink","IsWritableStreamLocked","WritableStreamAbort","streamBrandCheckException","WritableStreamCloseQueuedOrInFlight","WritableStreamClose","AcquireWritableStreamDefaultWriter","WritableStreamDefaultWriter","_writer","_writableStreamController","_writeRequests","_inFlightWriteRequest","_closeRequest","_inFlightCloseRequest","_pendingAbortRequest","_backpressure","_promise","wasAlreadyErroring","_resolve","_reject","_reason","_wasAlreadyErroring","WritableStreamStartErroring","closeRequest","writer","defaultWriterReadyPromiseResolve","closeSentinel","WritableStreamDefaultControllerAdvanceQueueIfNeeded","WritableStreamDealWithRejection","WritableStreamFinishErroring","WritableStreamDefaultWriterEnsureReadyPromiseRejected","WritableStreamHasOperationMarkedInFlight","storedError","forEach","writeRequest","abortRequest","WritableStreamRejectCloseAndClosedPromiseIfNeeded","defaultWriterClosedPromiseReject","WritableStreamUpdateBackpressure","backpressure","defaultWriterReadyPromiseInitialize","defaultWriterReadyPromiseReset","getWriter","locked","_ownerWritableStream","defaultWriterReadyPromiseInitializeAsResolved","defaultWriterClosedPromiseInitialize","defaultWriterReadyPromiseInitializeAsRejected","defaultWriterClosedPromiseResolve","defaultWriterClosedPromiseInitializeAsRejected","IsWritableStreamDefaultWriter","defaultWriterLockException","WritableStreamDefaultWriterAbort","defaultWriterBrandCheckException","WritableStreamDefaultWriterClose","WritableStreamDefaultWriterRelease","WritableStreamDefaultWriterWrite","WritableStreamDefaultControllerGetDesiredSize","WritableStreamDefaultWriterGetDesiredSize","_readyPromise","WritableStreamDefaultWriterEnsureClosedPromiseRejected","_closedPromiseState","defaultWriterClosedPromiseResetToRejected","_readyPromiseState","defaultWriterReadyPromiseReject","defaultWriterReadyPromiseResetToRejected","releasedError","chunkSize","_strategySizeAlgorithm","chunkSizeE","WritableStreamDefaultControllerErrorIfNeeded","WritableStreamDefaultControllerGetChunkSize","WritableStreamAddWriteRequest","enqueueE","_controlledWritableStream","WritableStreamDefaultControllerGetBackpressure","WritableStreamDefaultControllerWrite","WritableStreamDefaultController","IsWritableStreamDefaultController","WritableStreamDefaultControllerError","_abortAlgorithm","WritableStreamDefaultControllerClearAlgorithms","SetUpWritableStreamDefaultController","writeAlgorithm","closeAlgorithm","abortAlgorithm","_writeAlgorithm","_closeAlgorithm","WritableStreamMarkCloseRequestInFlight","sinkClosePromise","WritableStreamFinishInFlightClose","WritableStreamFinishInFlightCloseWithError","WritableStreamDefaultControllerProcessClose","WritableStreamMarkFirstWriteRequestInFlight","WritableStreamFinishInFlightWrite","WritableStreamFinishInFlightWriteWithError","WritableStreamDefaultControllerProcessWrite","_readyPromise_resolve","_readyPromise_reject","NativeDOMException","DOMException","isDOMExceptionConstructor","message","Error","captureStackTrace","createDOMExceptionPolyfill","ReadableStreamPipeTo","source","preventClose","preventAbort","signal","shuttingDown","currentWrite","action","actions","shutdownWithAction","all","map","aborted","addEventListener","isOrBecomesErrored","shutdown","WritableStreamDefaultWriterCloseWithErrorPropagation","destClosed","waitForWritesToFinish","oldCurrentWrite","originalIsError","originalError","doTheRest","finalize","newError","isError","removeEventListener","resolveLoop","rejectLoop","resolveRead","rejectRead","ReadableStreamDefaultController","IsReadableStreamDefaultController","defaultControllerBrandCheckException","ReadableStreamDefaultControllerCanCloseOrEnqueue","ReadableStreamDefaultControllerClose","ReadableStreamDefaultControllerEnqueue","ReadableStreamDefaultControllerError","ReadableStreamDefaultControllerClearAlgorithms","_controlledReadableStream","ReadableStreamDefaultControllerCallPullIfNeeded","ReadableStreamDefaultControllerGetDesiredSize","ReadableStreamDefaultControllerShouldCallPull","SetUpReadableStreamDefaultController","SetUpReadableStreamDefaultControllerFromUnderlyingSource","underlyingSource","convertUnderlyingDefaultOrByteSource","convertUnderlyingSourceCancelCallback","convertUnderlyingSourcePullCallback","convertUnderlyingSourceStartCallback","convertReadableStreamType","convertReaderOptions","options","mode","convertReadableStreamReaderMode","convertIteratorOptions","Boolean","convertPipeOptions","isAbortSignal","assertAbortSignal","convertReadableWritablePair","readable","ReadableStream","rawUnderlyingSource","InitializeReadableStream","rawOptions","rawTransform","transform","destination","branches","cloneForBranch2","reason1","reason2","branch1","branch2","resolveCancelPromise","reading","canceled1","canceled2","cancelPromise","value1","value2","CreateReadableStream","compositeReason","cancelResult","ReadableStreamTee","convertQueuingStrategyInit","getReader","pipeThrough","pipeTo","tee","values","byteLengthSizeFunction","ByteLengthQueuingStrategy","_byteLengthQueuingStrategyHighWaterMark","IsByteLengthQueuingStrategy","byteLengthBrandCheckException","countSizeFunction","CountQueuingStrategy","_countQueuingStrategyHighWaterMark","IsCountQueuingStrategy","countBrandCheckException","convertTransformer","flush","readableType","writableType","convertTransformerFlushCallback","convertTransformerStartCallback","convertTransformerTransformCallback","TransformStream","rawTransformer","rawWritableStrategy","rawReadableStrategy","writableStrategy","readableStrategy","transformer","startPromise_resolve","readableHighWaterMark","readableSizeAlgorithm","writableHighWaterMark","writableSizeAlgorithm","startPromise","InitializeTransformStream","SetUpTransformStreamDefaultControllerFromTransformer","_transformStreamController","IsTransformStream","_readable","_writable","CreateWritableStream","_backpressureChangePromise","TransformStreamDefaultControllerPerformTransform","TransformStreamDefaultSinkWriteAlgorithm","flushPromise","_flushAlgorithm","TransformStreamDefaultControllerClearAlgorithms","TransformStreamError","TransformStreamDefaultSinkCloseAlgorithm","TransformStreamDefaultSinkAbortAlgorithm","TransformStreamSetBackpressure","TransformStreamDefaultSourcePullAlgorithm","TransformStreamErrorWritableAndUnblockWrite","_backpressureChangePromise_resolve","TransformStreamDefaultController","IsTransformStreamDefaultController","TransformStreamDefaultControllerEnqueue","TransformStreamDefaultControllerError","_controlledTransformStream","TransformStreamDefaultControllerTerminate","transformAlgorithm","transformResultE","flushAlgorithm","_transformAlgorithm","SetUpTransformStreamDefaultController","readableController","ReadableStreamDefaultControllerHasBackpressure","terminate","HTMLElement","console","warn","mitmTransporter","supportsTransferable","test","ponyfill","WebStreamsPolyfill","isSecureContext","useBlobFallback","safari","WebKitPoint","downloadStrategy","document","documentElement","style","streamSaver","createWriteStream","supported","version","full","major","minor","dot","mitm","makeIframe","iframe","createElement","hidden","loaded","isIframe","postMessage","contentWindow","once","body","appendChild","makePopup","delegate","createDocumentFragment","popup","frame","open","isPopup","remove","dispatchEvent","onReady","evt","Event","Response","navigator","err","loadTransporter","filename","opts","pathname","downloadUrl","channel","ts","MessageChannel","encodeURIComponent","replace","escape","response","transferringReadable","random","headers","port2","location","href","readableStream","port1","onmessage","data","download","chunks","blob","Blob","link","URL","createObjectURL","click","mc","definition","pMap","require","iterable","AggregateError","mapper","concurrency","stopOnError","isSafeInteger","errors","isRejected","isIterableDone","resolvingCount","currentIndex","nextItem","index","indentString","cleanStack","Array","isArray","assign","stack","String","join","_errors","unsupportedIterableToArray","allowArrayLike","it","s","_e","f","normalCompletion","didErr","step","_e2","subClass","superClass","isNativeReflectConstruct","possibleConstructorReturn","Derived","hasNativeReflectConstruct","Super","NewTarget","arguments","_typeof","assertThisInitialized","isNativeFunction","_wrapNativeSuper","Class","_cache","Map","has","get","Wrapper","indexOf","_construct","Parent","a","string","count","indent","includeEmptyLines","regex","repeat","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","getOwnPropertyDescriptors","os","extractPathRegex","pathRegex","homeDir","homedir","pretty","split","line","pathMatches","match","includes","trim","m","p1","Crc32","crc","table","offset","len","j","t","getDataHelper","uint8","array","ZIP","ctrl","activeZipObject","files","filenames","encoder","TextEncoder","activeZipIndex","processNextChunk","closeZip","zipWriter","fileLike","date","lastModified","now","directory","endsWith","nameBuf","encode","zipObject","level","comment","compressedLength","uncompressedLength","writeHeader","header","setUint16","setUint32","getHours","getMinutes","getSeconds","getFullYear","getMonth","getDate","writeFooter","footer","indexFilename","file","setUint8","zipObj","outputData","append","c","valueEquality","left","right","useDebounce","delay","eq","equalityFn","_a","useState","dispatch","debounced","useDebouncedCallback","useCallback","previousValue","useRef","useEffect","current","pending","nativeIsFinite","root","nativeMin","createRound","round","methodName","func","number","precision","toNumber","toInteger","baseClamp","lower","upper","clamp","Progress","_Component","_this","_len","_key","concat","calculatePercent","_this$props","percent","total","_isUndefined","computeValueText","_this$props2","progress","getPercent","_this$props3","_clamp","_round","isAutoSuccess","_this$props4","autoSuccess","renderLabel","_this$props5","children","content","label","childrenUtils","isNil","createHTMLDivision","autoGenerateKey","defaultProps","className","React","renderProgress","_this$props6","_inheritsLoose","render","_this$props7","active","attached","color","disabled","indicating","inverted","success","warning","classes","cx","useKeyOnly","useValueAndKey","rest","getUnhandledProps","ElementType","getElementType","_extends","width","Component","handledProps","propTypes","_setPrototypeOf","p"],"mappings":"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","file":"static/js/44.66bcaad8.chunk.js","sourcesContent":["function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nmodule.exports = _isNativeReflectConstruct;","/// <reference lib=\"es2015.symbol\" />\n\nconst SymbolPolyfill: (description?: string) => symbol =\n  typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ?\n    Symbol :\n    description => `Symbol(${description})` as any as symbol;\n\nexport default SymbolPolyfill;\n","/// <reference lib=\"dom\" />\n\nexport function noop() {\n  // do nothing\n}\n\nfunction getGlobals() {\n  if (typeof self !== 'undefined') {\n    return self;\n  } else if (typeof window !== 'undefined') {\n    return window;\n  } else if (typeof global !== 'undefined') {\n    return global;\n  }\n  return undefined;\n}\n\nexport const globals = getGlobals();\n","import { noop } from '../../utils';\nimport { AssertionError } from '../../stub/assert';\n\nexport function typeIsObject(x: any): x is object {\n  return (typeof x === 'object' && x !== null) || typeof x === 'function';\n}\n\nexport const rethrowAssertionErrorRejection: (e: any) => void =\n  DEBUG ? e => {\n    // Used throughout the reference implementation, as `.catch(rethrowAssertionErrorRejection)`, to ensure any errors\n    // get shown. There are places in the spec where we do promise transformations and purposefully ignore or don't\n    // expect any errors, but assertion errors are always problematic.\n    if (e && e instanceof AssertionError) {\n      setTimeout(() => {\n        throw e;\n      }, 0);\n    }\n  } : noop;\n","import { globals } from '../../utils';\nimport { rethrowAssertionErrorRejection } from './miscellaneous';\nimport assert from '../../stub/assert';\n\nconst originalPromise = Promise;\nconst originalPromiseThen = Promise.prototype.then;\nconst originalPromiseResolve = Promise.resolve.bind(originalPromise);\nconst originalPromiseReject = Promise.reject.bind(originalPromise);\n\nexport function newPromise<T>(executor: (\n  resolve: (value?: T | PromiseLike<T>) => void,\n  reject: (reason?: any) => void\n) => void): Promise<T> {\n  return new originalPromise(executor);\n}\n\nexport function promiseResolvedWith<T>(value: T | PromiseLike<T>): Promise<T> {\n  return originalPromiseResolve(value);\n}\n\nexport function promiseRejectedWith<T = never>(reason: any): Promise<T> {\n  return originalPromiseReject(reason);\n}\n\nexport function PerformPromiseThen<T, TResult1 = T, TResult2 = never>(\n  promise: Promise<T>,\n  onFulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>,\n  onRejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\n  // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\n  // approximation.\n  return originalPromiseThen.call(promise, onFulfilled, onRejected) as Promise<TResult1 | TResult2>;\n}\n\nexport function uponPromise<T>(\n  promise: Promise<T>,\n  onFulfilled?: (value: T) => void | PromiseLike<void>,\n  onRejected?: (reason: any) => void | PromiseLike<void>): void {\n  PerformPromiseThen(\n    PerformPromiseThen(promise, onFulfilled, onRejected),\n    undefined,\n    rethrowAssertionErrorRejection\n  );\n}\n\nexport function uponFulfillment<T>(promise: Promise<T>, onFulfilled: (value: T) => void | PromiseLike<void>): void {\n  uponPromise(promise, onFulfilled);\n}\n\nexport function uponRejection(promise: Promise<unknown>, onRejected: (reason: any) => void | PromiseLike<void>): void {\n  uponPromise(promise, undefined, onRejected);\n}\n\nexport function transformPromiseWith<T, TResult1 = T, TResult2 = never>(\n  promise: Promise<T>,\n  fulfillmentHandler?: (value: T) => TResult1 | PromiseLike<TResult1>,\n  rejectionHandler?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\n  return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n}\n\nexport function setPromiseIsHandledToTrue(promise: Promise<unknown>): void {\n  PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\n}\n\nexport const queueMicrotask: (fn: () => void) => void = (() => {\n  const globalQueueMicrotask = globals && globals.queueMicrotask;\n  if (typeof globalQueueMicrotask === 'function') {\n    return globalQueueMicrotask;\n  }\n\n  const resolvedPromise = promiseResolvedWith(undefined);\n  return (fn: () => void) => PerformPromiseThen(resolvedPromise, fn);\n})();\n\nexport function reflectCall<T, A extends any[], R>(F: (this: T, ...args: A) => R, V: T, args: A): R {\n  if (typeof F !== 'function') {\n    throw new TypeError('Argument is not a function');\n  }\n  return Function.prototype.apply.call(F, V, args);\n}\n\nexport function promiseCall<T, A extends any[], R>(F: (this: T, ...args: A) => R | PromiseLike<R>,\n                                                   V: T,\n                                                   args: A): Promise<R> {\n  assert(typeof F === 'function');\n  assert(V !== undefined);\n  assert(Array.isArray(args));\n  try {\n    return promiseResolvedWith(reflectCall(F, V, args));\n  } catch (value) {\n    return promiseRejectedWith(value);\n  }\n}\n","import assert from '../stub/assert';\n\n// Original from Chromium\n// https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js\n\nconst QUEUE_MAX_ARRAY_SIZE = 16384;\n\ninterface Node<T> {\n  _elements: T[];\n  _next: Node<T> | undefined;\n}\n\n/**\n * Simple queue structure.\n *\n * Avoids scalability issues with using a packed array directly by using\n * multiple arrays in a linked list and keeping the array size bounded.\n */\nexport class SimpleQueue<T> {\n  private _front: Node<T>;\n  private _back: Node<T>;\n  private _cursor = 0;\n  private _size = 0;\n\n  constructor() {\n    // _front and _back are always defined.\n    this._front = {\n      _elements: [],\n      _next: undefined\n    };\n    this._back = this._front;\n    // The cursor is used to avoid calling Array.shift().\n    // It contains the index of the front element of the array inside the\n    // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).\n    this._cursor = 0;\n    // When there is only one node, size === elements.length - cursor.\n    this._size = 0;\n  }\n\n  get length(): number {\n    return this._size;\n  }\n\n  // For exception safety, this method is structured in order:\n  // 1. Read state\n  // 2. Calculate required state mutations\n  // 3. Perform state mutations\n  push(element: T): void {\n    const oldBack = this._back;\n    let newBack = oldBack;\n    assert(oldBack._next === undefined);\n    if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n      newBack = {\n        _elements: [],\n        _next: undefined\n      };\n    }\n\n    // push() is the mutation most likely to throw an exception, so it\n    // goes first.\n    oldBack._elements.push(element);\n    if (newBack !== oldBack) {\n      this._back = newBack;\n      oldBack._next = newBack;\n    }\n    ++this._size;\n  }\n\n  // Like push(), shift() follows the read -> calculate -> mutate pattern for\n  // exception safety.\n  shift(): T {\n    assert(this._size > 0); // must not be called on an empty queue\n\n    const oldFront = this._front;\n    let newFront = oldFront;\n    const oldCursor = this._cursor;\n    let newCursor = oldCursor + 1;\n\n    const elements = oldFront._elements;\n    const element = elements[oldCursor];\n\n    if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n      assert(elements.length === QUEUE_MAX_ARRAY_SIZE);\n      assert(oldFront._next !== undefined);\n      newFront = oldFront._next!;\n      newCursor = 0;\n    }\n\n    // No mutations before this point.\n    --this._size;\n    this._cursor = newCursor;\n    if (oldFront !== newFront) {\n      this._front = newFront;\n    }\n\n    // Permit shifted element to be garbage collected.\n    elements[oldCursor] = undefined!;\n\n    return element;\n  }\n\n  // The tricky thing about forEach() is that it can be called\n  // re-entrantly. The queue may be mutated inside the callback. It is easy to\n  // see that push() within the callback has no negative effects since the end\n  // of the queue is checked for on every iteration. If shift() is called\n  // repeatedly within the callback then the next iteration may return an\n  // element that has been removed. In this case the callback will be called\n  // with undefined values until we either \"catch up\" with elements that still\n  // exist or reach the back of the queue.\n  forEach(callback: (element: T) => void): void {\n    let i = this._cursor;\n    let node = this._front;\n    let elements = node._elements;\n    while (i !== elements.length || node._next !== undefined) {\n      if (i === elements.length) {\n        assert(node._next !== undefined);\n        assert(i === QUEUE_MAX_ARRAY_SIZE);\n        node = node._next!;\n        elements = node._elements;\n        i = 0;\n        if (elements.length === 0) {\n          break;\n        }\n      }\n      callback(elements[i]);\n      ++i;\n    }\n  }\n\n  // Return the element that would be returned if shift() was called now,\n  // without modifying the queue.\n  peek() {\n    assert(this._size > 0); // must not be called on an empty queue\n\n    const front = this._front;\n    const cursor = this._cursor;\n    return front._elements[cursor];\n  }\n}\n","import assert from '../../stub/assert';\nimport { ReadableStream, ReadableStreamCancel, ReadableStreamReader } from '../readable-stream';\nimport { newPromise, setPromiseIsHandledToTrue } from '../helpers/webidl';\n\nexport function ReadableStreamReaderGenericInitialize<R>(reader: ReadableStreamReader<R>, stream: ReadableStream<R>) {\n  reader._ownerReadableStream = stream;\n  stream._reader = reader;\n\n  if (stream._state === 'readable') {\n    defaultReaderClosedPromiseInitialize(reader);\n  } else if (stream._state === 'closed') {\n    defaultReaderClosedPromiseInitializeAsResolved(reader);\n  } else {\n    assert(stream._state === 'errored');\n\n    defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n  }\n}\n\n// A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n// check.\n\nexport function ReadableStreamReaderGenericCancel(reader: ReadableStreamReader<any>, reason: any): Promise<void> {\n  const stream = reader._ownerReadableStream;\n  assert(stream !== undefined);\n  return ReadableStreamCancel(stream, reason);\n}\n\nexport function ReadableStreamReaderGenericRelease(reader: ReadableStreamReader<any>) {\n  assert(reader._ownerReadableStream !== undefined);\n  assert(reader._ownerReadableStream._reader === reader);\n\n  if (reader._ownerReadableStream._state === 'readable') {\n    defaultReaderClosedPromiseReject(\n      reader,\n      new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n  } else {\n    defaultReaderClosedPromiseResetToRejected(\n      reader,\n      new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n  }\n\n  reader._ownerReadableStream._reader = undefined;\n  reader._ownerReadableStream = undefined!;\n}\n\n// Helper functions for the readers.\n\nexport function readerLockException(name: string): TypeError {\n  return new TypeError('Cannot ' + name + ' a stream using a released reader');\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nexport function defaultReaderClosedPromiseInitialize(reader: ReadableStreamReader<any>) {\n  reader._closedPromise = newPromise((resolve, reject) => {\n    reader._closedPromise_resolve = resolve;\n    reader._closedPromise_reject = reject;\n  });\n}\n\nexport function defaultReaderClosedPromiseInitializeAsRejected(reader: ReadableStreamReader<any>, reason: any) {\n  defaultReaderClosedPromiseInitialize(reader);\n  defaultReaderClosedPromiseReject(reader, reason);\n}\n\nexport function defaultReaderClosedPromiseInitializeAsResolved(reader: ReadableStreamReader<any>) {\n  defaultReaderClosedPromiseInitialize(reader);\n  defaultReaderClosedPromiseResolve(reader);\n}\n\nexport function defaultReaderClosedPromiseReject(reader: ReadableStreamReader<any>, reason: any) {\n  if (reader._closedPromise_reject === undefined) {\n    return;\n  }\n\n  setPromiseIsHandledToTrue(reader._closedPromise);\n  reader._closedPromise_reject(reason);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n\nexport function defaultReaderClosedPromiseResetToRejected(reader: ReadableStreamReader<any>, reason: any) {\n  assert(reader._closedPromise_resolve === undefined);\n  assert(reader._closedPromise_reject === undefined);\n\n  defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n}\n\nexport function defaultReaderClosedPromiseResolve(reader: ReadableStreamReader<any>) {\n  if (reader._closedPromise_resolve === undefined) {\n    return;\n  }\n\n  reader._closedPromise_resolve(undefined);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n}\n","export const AbortSteps = Symbol('[[AbortSteps]]');\nexport const ErrorSteps = Symbol('[[ErrorSteps]]');\nexport const CancelSteps = Symbol('[[CancelSteps]]');\nexport const PullSteps = Symbol('[[PullSteps]]');\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill\nconst NumberIsFinite: typeof Number.isFinite = Number.isFinite || function (x) {\n  return typeof x === 'number' && isFinite(x);\n};\n\nexport default NumberIsFinite;\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill\nconst MathTrunc: typeof Math.trunc = Math.trunc || function (v) {\n  return v < 0 ? Math.ceil(v) : Math.floor(v);\n};\n\nexport default MathTrunc;\n","import NumberIsFinite from '../../stub/number-isfinite';\nimport MathTrunc from '../../stub/math-trunc';\n\n// https://heycam.github.io/webidl/#idl-dictionaries\nexport function isDictionary(x: any): x is object | null {\n  return typeof x === 'object' || typeof x === 'function';\n}\n\nexport function assertDictionary(obj: unknown,\n                                 context: string): asserts obj is object | null | undefined {\n  if (obj !== undefined && !isDictionary(obj)) {\n    throw new TypeError(`${context} is not an object.`);\n  }\n}\n\nexport type AnyFunction = (...args: any[]) => any;\n\n// https://heycam.github.io/webidl/#idl-callback-functions\nexport function assertFunction(x: unknown, context: string): asserts x is AnyFunction {\n  if (typeof x !== 'function') {\n    throw new TypeError(`${context} is not a function.`);\n  }\n}\n\n// https://heycam.github.io/webidl/#idl-object\nexport function isObject(x: any): x is object {\n  return (typeof x === 'object' && x !== null) || typeof x === 'function';\n}\n\nexport function assertObject(x: unknown,\n                             context: string): asserts x is object {\n  if (!isObject(x)) {\n    throw new TypeError(`${context} is not an object.`);\n  }\n}\n\nexport function assertRequiredArgument<T extends any>(x: T | undefined,\n                                                      position: number,\n                                                      context: string): asserts x is T {\n  if (x === undefined) {\n    throw new TypeError(`Parameter ${position} is required in '${context}'.`);\n  }\n}\n\nexport function assertRequiredField<T extends any>(x: T | undefined,\n                                                   field: string,\n                                                   context: string): asserts x is T {\n  if (x === undefined) {\n    throw new TypeError(`${field} is required in '${context}'.`);\n  }\n}\n\n// https://heycam.github.io/webidl/#idl-unrestricted-double\nexport function convertUnrestrictedDouble(value: unknown): number {\n  return Number(value);\n}\n\nfunction censorNegativeZero(x: number): number {\n  return x === 0 ? 0 : x;\n}\n\nfunction integerPart(x: number): number {\n  return censorNegativeZero(MathTrunc(x));\n}\n\n// https://heycam.github.io/webidl/#idl-unsigned-long-long\nexport function convertUnsignedLongLongWithEnforceRange(value: unknown, context: string): number {\n  const lowerBound = 0;\n  const upperBound = Number.MAX_SAFE_INTEGER;\n\n  let x = Number(value);\n  x = censorNegativeZero(x);\n\n  if (!NumberIsFinite(x)) {\n    throw new TypeError(`${context} is not a finite number`);\n  }\n\n  x = integerPart(x);\n\n  if (x < lowerBound || x > upperBound) {\n    throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);\n  }\n\n  if (!NumberIsFinite(x) || x === 0) {\n    return 0;\n  }\n\n  // TODO Use BigInt if supported?\n  // let xBigInt = BigInt(integerPart(x));\n  // xBigInt = BigInt.asUintN(64, xBigInt);\n  // return Number(xBigInt);\n\n  return x;\n}\n","import { IsReadableStream, ReadableStream } from '../readable-stream';\n\nexport function assertReadableStream(x: unknown, context: string): asserts x is ReadableStream {\n  if (!IsReadableStream(x)) {\n    throw new TypeError(`${context} is not a ReadableStream.`);\n  }\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericInitialize,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport { IsReadableStreamLocked, ReadableStream } from '../readable-stream';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { PullSteps } from '../abstract-ops/internal-methods';\nimport { newPromise, promiseRejectedWith } from '../helpers/webidl';\nimport { assertRequiredArgument } from '../validators/basic';\nimport { assertReadableStream } from '../validators/readable-stream';\n\n/**\n * A result returned by {@link ReadableStreamDefaultReader.read}.\n *\n * @public\n */\nexport type ReadableStreamDefaultReadResult<T> = {\n  done: false;\n  value: T;\n} | {\n  done: true;\n  value: undefined;\n}\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamDefaultReader<R>(stream: ReadableStream): ReadableStreamDefaultReader<R> {\n  return new ReadableStreamDefaultReader(stream);\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamAddReadRequest<R>(stream: ReadableStream<R>,\n                                                readRequest: ReadRequest<R>): void {\n  assert(IsReadableStreamDefaultReader(stream._reader));\n  assert(stream._state === 'readable');\n\n  (stream._reader! as ReadableStreamDefaultReader<R>)._readRequests.push(readRequest);\n}\n\nexport function ReadableStreamFulfillReadRequest<R>(stream: ReadableStream<R>, chunk: R | undefined, done: boolean) {\n  const reader = stream._reader as ReadableStreamDefaultReader<R>;\n\n  assert(reader._readRequests.length > 0);\n\n  const readRequest = reader._readRequests.shift()!;\n  if (done) {\n    readRequest._closeSteps();\n  } else {\n    readRequest._chunkSteps(chunk!);\n  }\n}\n\nexport function ReadableStreamGetNumReadRequests<R>(stream: ReadableStream<R>): number {\n  return (stream._reader as ReadableStreamDefaultReader<R>)._readRequests.length;\n}\n\nexport function ReadableStreamHasDefaultReader(stream: ReadableStream): boolean {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (!IsReadableStreamDefaultReader(reader)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Readers\n\nexport interface ReadRequest<R> {\n  _chunkSteps(chunk: R): void;\n\n  _closeSteps(): void;\n\n  _errorSteps(e: any): void;\n}\n\n/**\n * A default reader vended by a {@link ReadableStream}.\n *\n * @public\n */\nexport class ReadableStreamDefaultReader<R = any> {\n  /** @internal */\n  _ownerReadableStream!: ReadableStream<R>;\n  /** @internal */\n  _closedPromise!: Promise<void>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readRequests: SimpleQueue<ReadRequest<R>>;\n\n  constructor(stream: ReadableStream<R>) {\n    assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');\n    assertReadableStream(stream, 'First parameter');\n\n    if (IsReadableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readRequests = new SimpleQueue();\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed,\n   * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<void> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  /**\n   * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.\n   *\n   * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n   */\n  read(): Promise<ReadableStreamDefaultReadResult<R>> {\n    if (!IsReadableStreamDefaultReader(this)) {\n      return promiseRejectedWith(defaultReaderBrandCheckException('read'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('read from'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamDefaultReadResult<R>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamDefaultReadResult<R>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n      _closeSteps: () => resolvePromise({ value: undefined, done: true }),\n      _errorSteps: e => rejectPromise(e)\n    };\n    ReadableStreamDefaultReaderRead(this, readRequest);\n    return promise;\n  }\n\n  /**\n   * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n   * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n   * from now on; otherwise, the reader will appear closed.\n   *\n   * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n   * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to\n   * do so will throw a `TypeError` and leave the reader locked to the stream.\n   */\n  releaseLock(): void {\n    if (!IsReadableStreamDefaultReader(this)) {\n      throw defaultReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    if (this._readRequests.length > 0) {\n      throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n    }\n\n    ReadableStreamReaderGenericRelease(this);\n  }\n}\n\nObject.defineProperties(ReadableStreamDefaultReader.prototype, {\n  cancel: { enumerable: true },\n  read: { enumerable: true },\n  releaseLock: { enumerable: true },\n  closed: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamDefaultReader.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamDefaultReader',\n    configurable: true\n  });\n}\n\n// Abstract operations for the readers.\n\nexport function IsReadableStreamDefaultReader<R = any>(x: any): x is ReadableStreamDefaultReader<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function ReadableStreamDefaultReaderRead<R>(reader: ReadableStreamDefaultReader<R>,\n                                                   readRequest: ReadRequest<R>): void {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    readRequest._closeSteps();\n  } else if (stream._state === 'errored') {\n    readRequest._errorSteps(stream._storedError);\n  } else {\n    assert(stream._state === 'readable');\n    stream._readableStreamController[PullSteps](readRequest as ReadRequest<any>);\n  }\n}\n\n// Helper functions for the ReadableStreamDefaultReader.\n\nfunction defaultReaderBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);\n}\n","/// <reference lib=\"es2018.asynciterable\" />\n\nexport let AsyncIteratorPrototype: AsyncIterable<any> | undefined;\n\nif (typeof Symbol.asyncIterator === 'symbol') {\n  // We're running inside a ES2018+ environment, but we're compiling to an older syntax.\n  // We cannot access %AsyncIteratorPrototype% without non-ES2018 syntax, but we can re-create it.\n  AsyncIteratorPrototype = {\n    // 25.1.3.1 %AsyncIteratorPrototype% [ @@asyncIterator ] ( )\n    // https://tc39.github.io/ecma262/#sec-asynciteratorprototype-asynciterator\n    [Symbol.asyncIterator]() {\n      return this as any;\n    }\n  };\n  Object.defineProperty(AsyncIteratorPrototype, Symbol.asyncIterator, { enumerable: false });\n}\n","/// <reference lib=\"es2018.asynciterable\" />\n\nimport { ReadableStream } from '../readable-stream';\nimport {\n  AcquireReadableStreamDefaultReader,\n  ReadableStreamDefaultReader,\n  ReadableStreamDefaultReaderRead,\n  ReadableStreamDefaultReadResult,\n  ReadRequest\n} from './default-reader';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport assert from '../../stub/assert';\nimport { AsyncIteratorPrototype } from '@@target/stub/async-iterator-prototype';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport {\n  newPromise,\n  promiseRejectedWith,\n  promiseResolvedWith,\n  queueMicrotask,\n  transformPromiseWith\n} from '../helpers/webidl';\n\n/**\n * An async iterator returned by {@link ReadableStream.values}.\n *\n * @public\n */\nexport interface ReadableStreamAsyncIterator<R> extends AsyncIterator<R> {\n  next(): Promise<IteratorResult<R>>;\n\n  return(value?: any): Promise<IteratorResult<any>>;\n}\n\nexport class ReadableStreamAsyncIteratorImpl<R> {\n  private readonly _reader: ReadableStreamDefaultReader<R>;\n  private readonly _preventCancel: boolean;\n  private _ongoingPromise: Promise<ReadableStreamDefaultReadResult<R>> | undefined = undefined;\n  private _isFinished = false;\n\n  constructor(reader: ReadableStreamDefaultReader<R>, preventCancel: boolean) {\n    this._reader = reader;\n    this._preventCancel = preventCancel;\n  }\n\n  next(): Promise<ReadableStreamDefaultReadResult<R>> {\n    const nextSteps = () => this._nextSteps();\n    this._ongoingPromise = this._ongoingPromise ?\n      transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) :\n      nextSteps();\n    return this._ongoingPromise;\n  }\n\n  return(value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    const returnSteps = () => this._returnSteps(value);\n    return this._ongoingPromise ?\n      transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) :\n      returnSteps();\n  }\n\n  private _nextSteps(): Promise<ReadableStreamDefaultReadResult<R>> {\n    if (this._isFinished) {\n      return Promise.resolve({ value: undefined, done: true });\n    }\n\n    const reader = this._reader;\n    if (reader._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('iterate'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamDefaultReadResult<R>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamDefaultReadResult<R>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: chunk => {\n        this._ongoingPromise = undefined;\n        // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.\n        // FIXME Is this a bug in the specification, or in the test?\n        queueMicrotask(() => resolvePromise({ value: chunk, done: false }));\n      },\n      _closeSteps: () => {\n        this._ongoingPromise = undefined;\n        this._isFinished = true;\n        ReadableStreamReaderGenericRelease(reader);\n        resolvePromise({ value: undefined, done: true });\n      },\n      _errorSteps: reason => {\n        this._ongoingPromise = undefined;\n        this._isFinished = true;\n        ReadableStreamReaderGenericRelease(reader);\n        rejectPromise(reason);\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n    return promise;\n  }\n\n  private _returnSteps(value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (this._isFinished) {\n      return Promise.resolve({ value, done: true });\n    }\n    this._isFinished = true;\n\n    const reader = this._reader;\n    if (reader._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('finish iterating'));\n    }\n\n    assert(reader._readRequests.length === 0);\n\n    if (!this._preventCancel) {\n      const result = ReadableStreamReaderGenericCancel(reader, value);\n      ReadableStreamReaderGenericRelease(reader);\n      return transformPromiseWith(result, () => ({ value, done: true }));\n    }\n\n    ReadableStreamReaderGenericRelease(reader);\n    return promiseResolvedWith({ value, done: true });\n  }\n}\n\ndeclare class ReadableStreamAsyncIteratorInstance<R> implements ReadableStreamAsyncIterator<R> {\n  /** @interal */\n  _asyncIteratorImpl: ReadableStreamAsyncIteratorImpl<R>;\n\n  next(): Promise<ReadableStreamDefaultReadResult<R>>;\n\n  return(value?: any): Promise<ReadableStreamDefaultReadResult<any>>;\n}\n\nconst ReadableStreamAsyncIteratorPrototype: ReadableStreamAsyncIteratorInstance<any> = {\n  next(this: ReadableStreamAsyncIteratorInstance<any>): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (!IsReadableStreamAsyncIterator(this)) {\n      return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));\n    }\n    return this._asyncIteratorImpl.next();\n  },\n\n  return(this: ReadableStreamAsyncIteratorInstance<any>, value: any): Promise<ReadableStreamDefaultReadResult<any>> {\n    if (!IsReadableStreamAsyncIterator(this)) {\n      return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));\n    }\n    return this._asyncIteratorImpl.return(value);\n  }\n} as any;\nif (AsyncIteratorPrototype !== undefined) {\n  Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n}\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamAsyncIterator<R>(stream: ReadableStream<R>,\n                                                      preventCancel: boolean): ReadableStreamAsyncIterator<R> {\n  const reader = AcquireReadableStreamDefaultReader<R>(stream);\n  const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n  const iterator: ReadableStreamAsyncIteratorInstance<R> = Object.create(ReadableStreamAsyncIteratorPrototype);\n  iterator._asyncIteratorImpl = impl;\n  return iterator;\n}\n\nfunction IsReadableStreamAsyncIterator<R = any>(x: any): x is ReadableStreamAsyncIterator<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {\n    return false;\n  }\n\n  return true;\n}\n\n// Helper functions for the ReadableStream.\n\nfunction streamAsyncIteratorBrandCheckException(name: string): TypeError {\n  return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);\n}\n","/// <reference lib=\"es2015.core\" />\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\nconst NumberIsNaN: typeof Number.isNaN = Number.isNaN || function (x) {\n  // eslint-disable-next-line no-self-compare\n  return x !== x;\n};\n\nexport default NumberIsNaN;\n","import NumberIsNaN from '../../stub/number-isnan';\n\nexport function IsFiniteNonNegativeNumber(v: number): boolean {\n  if (!IsNonNegativeNumber(v)) {\n    return false;\n  }\n\n  if (v === Infinity) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function IsNonNegativeNumber(v: number): boolean {\n  if (typeof v !== 'number') {\n    return false;\n  }\n\n  if (NumberIsNaN(v)) {\n    return false;\n  }\n\n  if (v < 0) {\n    return false;\n  }\n\n  return true;\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport { IsFiniteNonNegativeNumber } from './miscellaneous';\n\nexport interface QueueContainer<T> {\n  _queue: SimpleQueue<T>;\n  _queueTotalSize: number;\n}\n\nexport interface QueuePair<T> {\n  value: T;\n  size: number;\n}\n\nexport function DequeueValue<T>(container: QueueContainer<QueuePair<T>>): T {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue.shift()!;\n  container._queueTotalSize -= pair.size;\n  if (container._queueTotalSize < 0) {\n    container._queueTotalSize = 0;\n  }\n\n  return pair.value;\n}\n\nexport function EnqueueValueWithSize<T>(container: QueueContainer<QueuePair<T>>, value: T, size: number) {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  size = Number(size);\n  if (!IsFiniteNonNegativeNumber(size)) {\n    throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\n  }\n\n  container._queue.push({ value, size });\n  container._queueTotalSize += size;\n}\n\nexport function PeekQueueValue<T>(container: QueueContainer<QueuePair<T>>): T {\n  assert('_queue' in container && '_queueTotalSize' in container);\n  assert(container._queue.length > 0);\n\n  const pair = container._queue.peek();\n  return pair.value;\n}\n\nexport function ResetQueue<T>(container: QueueContainer<T>) {\n  assert('_queue' in container && '_queueTotalSize' in container);\n\n  container._queue = new SimpleQueue<T>();\n  container._queueTotalSize = 0;\n}\n","export function CreateArrayFromList<T extends any[]>(elements: T): T {\n  // We use arrays to represent lists, so this is basically a no-op.\n  // Do a slice though just in case we happen to depend on the unique-ness.\n  return elements.slice() as T;\n}\n\nexport function CopyDataBlockBytes(dest: ArrayBuffer,\n                                   destOffset: number,\n                                   src: ArrayBuffer,\n                                   srcOffset: number,\n                                   n: number) {\n  new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n}\n\n// Not implemented correctly\nexport function TransferArrayBuffer<T extends ArrayBufferLike>(O: T): T {\n  return O;\n}\n\n// Not implemented correctly\nexport function IsDetachedBuffer(O: ArrayBufferLike): boolean { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return false;\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport { ResetQueue } from '../abstract-ops/queue-with-sizes';\nimport {\n  ReadableStreamAddReadRequest,\n  ReadableStreamFulfillReadRequest,\n  ReadableStreamGetNumReadRequests,\n  ReadableStreamHasDefaultReader,\n  ReadRequest\n} from './default-reader';\nimport {\n  ReadableStreamAddReadIntoRequest,\n  ReadableStreamFulfillReadIntoRequest,\n  ReadableStreamGetNumReadIntoRequests,\n  ReadableStreamHasBYOBReader,\n  ReadIntoRequest\n} from './byob-reader';\nimport NumberIsInteger from '../../stub/number-isinteger';\nimport {\n  IsReadableStreamLocked,\n  ReadableByteStream,\n  ReadableStreamClose,\n  ReadableStreamError\n} from '../readable-stream';\nimport { ValidatedUnderlyingByteSource } from './underlying-source';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { CopyDataBlockBytes, IsDetachedBuffer, TransferArrayBuffer } from '../abstract-ops/ecmascript';\nimport { CancelSteps, PullSteps } from '../abstract-ops/internal-methods';\nimport { IsFiniteNonNegativeNumber } from '../abstract-ops/miscellaneous';\nimport { promiseResolvedWith, uponPromise } from '../helpers/webidl';\nimport { assertRequiredArgument, convertUnsignedLongLongWithEnforceRange } from '../validators/basic';\n\n/**\n * A pull-into request in a {@link ReadableByteStreamController}.\n *\n * @public\n */\nexport class ReadableStreamBYOBRequest {\n  /** @internal */\n  _associatedReadableByteStreamController!: ReadableByteStreamController;\n  /** @internal */\n  _view!: ArrayBufferView | null;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.\n   */\n  get view(): ArrayBufferView | null {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('view');\n    }\n\n    return this._view;\n  }\n\n  /**\n   * Indicates to the associated readable byte stream that `bytesWritten` bytes were written into\n   * {@link ReadableStreamBYOBRequest.view | view}, causing the result be surfaced to the consumer.\n   *\n   * After this method is called, {@link ReadableStreamBYOBRequest.view | view} will be transferred and no longer\n   * modifiable.\n   */\n  respond(bytesWritten: number): void;\n  respond(bytesWritten: number | undefined): void {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('respond');\n    }\n    assertRequiredArgument(bytesWritten, 1, 'respond');\n    bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    if (IsDetachedBuffer(this._view!.buffer)) {\n      throw new TypeError(`The BYOB request's buffer has been detached and so cannot be used as a response`);\n    }\n\n    assert(this._view!.byteLength > 0);\n    assert(this._view!.buffer.byteLength > 0);\n\n    ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n  }\n\n  /**\n   * Indicates to the associated readable byte stream that instead of writing into\n   * {@link ReadableStreamBYOBRequest.view | view}, the underlying byte source is providing a new `ArrayBufferView`,\n   * which will be given to the consumer of the readable byte stream.\n   *\n   * After this method is called, `view` will be transferred and no longer modifiable.\n   */\n  respondWithNewView(view: ArrayBufferView): void;\n  respondWithNewView(view: ArrayBufferView | undefined): void {\n    if (!IsReadableStreamBYOBRequest(this)) {\n      throw byobRequestBrandCheckException('respondWithNewView');\n    }\n    assertRequiredArgument(view, 1, 'respondWithNewView');\n\n    if (!ArrayBuffer.isView(view)) {\n      throw new TypeError('You can only respond with array buffer views');\n    }\n    if (view.byteLength === 0) {\n      throw new TypeError('chunk must have non-zero byteLength');\n    }\n    if (view.buffer.byteLength === 0) {\n      throw new TypeError(`chunk's buffer must have non-zero byteLength`);\n    }\n\n    if (this._associatedReadableByteStreamController === undefined) {\n      throw new TypeError('This BYOB request has been invalidated');\n    }\n\n    ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n  }\n}\n\nObject.defineProperties(ReadableStreamBYOBRequest.prototype, {\n  respond: { enumerable: true },\n  respondWithNewView: { enumerable: true },\n  view: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamBYOBRequest.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamBYOBRequest',\n    configurable: true\n  });\n}\n\ninterface ArrayBufferViewConstructor<T extends ArrayBufferView = ArrayBufferView> {\n  new(buffer: ArrayBufferLike, byteOffset: number, length?: number): T;\n\n  readonly prototype: T;\n  readonly BYTES_PER_ELEMENT: number;\n}\n\ninterface ByteQueueElement {\n  buffer: ArrayBufferLike;\n  byteOffset: number;\n  byteLength: number;\n}\n\ntype PullIntoDescriptor<T extends ArrayBufferView = ArrayBufferView> =\n  DefaultPullIntoDescriptor\n  | BYOBPullIntoDescriptor;\n\ninterface DefaultPullIntoDescriptor {\n  buffer: ArrayBufferLike;\n  byteOffset: number;\n  byteLength: number;\n  bytesFilled: number;\n  elementSize: number;\n  viewConstructor: ArrayBufferViewConstructor<Uint8Array>;\n  readerType: 'default';\n}\n\ninterface BYOBPullIntoDescriptor<T extends ArrayBufferView = ArrayBufferView> {\n  buffer: ArrayBufferLike;\n  byteOffset: number;\n  byteLength: number;\n  bytesFilled: number;\n  elementSize: number;\n  viewConstructor: ArrayBufferViewConstructor<T>;\n  readerType: 'byob';\n}\n\n/**\n * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.\n *\n * @public\n */\nexport class ReadableByteStreamController {\n  /** @internal */\n  _controlledReadableByteStream!: ReadableByteStream;\n  /** @internal */\n  _queue!: SimpleQueue<ByteQueueElement>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _closeRequested!: boolean;\n  /** @internal */\n  _pullAgain!: boolean;\n  /** @internal */\n  _pulling !: boolean;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _pullAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _cancelAlgorithm!: (reason: any) => Promise<void>;\n  /** @internal */\n  _autoAllocateChunkSize: number | undefined;\n  /** @internal */\n  _byobRequest: ReadableStreamBYOBRequest | null;\n  /** @internal */\n  _pendingPullIntos!: SimpleQueue<PullIntoDescriptor>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the current BYOB pull request, or `null` if there isn't one.\n   */\n  get byobRequest(): ReadableStreamBYOBRequest | null {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('byobRequest');\n    }\n\n    if (this._byobRequest === null && this._pendingPullIntos.length > 0) {\n      const firstDescriptor = this._pendingPullIntos.peek();\n      const view = new Uint8Array(firstDescriptor.buffer,\n                                  firstDescriptor.byteOffset + firstDescriptor.bytesFilled,\n                                  firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n\n      const byobRequest: ReadableStreamBYOBRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n      SetUpReadableStreamBYOBRequest(byobRequest, this, view);\n      this._byobRequest = byobRequest;\n    }\n\n    return this._byobRequest;\n  }\n\n  /**\n   * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n   * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.\n   */\n  get desiredSize(): number | null {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableByteStreamControllerGetDesiredSize(this);\n  }\n\n  /**\n   * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n   * the stream, but once those are read, the stream will become closed.\n   */\n  close(): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('close');\n    }\n\n    if (this._closeRequested) {\n      throw new TypeError('The stream has already been closed; do not close it again!');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);\n    }\n\n    ReadableByteStreamControllerClose(this);\n  }\n\n  /**\n   * Enqueues the given chunk chunk in the controlled readable stream.\n   * The chunk has to be an `ArrayBufferView` instance, or else a `TypeError` will be thrown.\n   */\n  enqueue(chunk: ArrayBufferView): void;\n  enqueue(chunk: ArrayBufferView | undefined): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('enqueue');\n    }\n\n    assertRequiredArgument(chunk, 1, 'enqueue');\n    if (!ArrayBuffer.isView(chunk)) {\n      throw new TypeError('chunk must be an array buffer view');\n    }\n    if (chunk.byteLength === 0) {\n      throw new TypeError('chunk must have non-zero byteLength');\n    }\n    if (chunk.buffer.byteLength === 0) {\n      throw new TypeError(`chunk's buffer must have non-zero byteLength`);\n    }\n\n    if (this._closeRequested) {\n      throw new TypeError('stream is closed or draining');\n    }\n\n    const state = this._controlledReadableByteStream._state;\n    if (state !== 'readable') {\n      throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);\n    }\n\n    ReadableByteStreamControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n   */\n  error(e: any = undefined): void {\n    if (!IsReadableByteStreamController(this)) {\n      throw byteStreamControllerBrandCheckException('error');\n    }\n\n    ReadableByteStreamControllerError(this, e);\n  }\n\n  /** @internal */\n  [CancelSteps](reason: any): Promise<void> {\n    if (this._pendingPullIntos.length > 0) {\n      const firstDescriptor = this._pendingPullIntos.peek();\n      firstDescriptor.bytesFilled = 0;\n    }\n\n    ResetQueue(this);\n\n    const result = this._cancelAlgorithm(reason);\n    ReadableByteStreamControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [PullSteps](readRequest: ReadRequest<Uint8Array>): void {\n    const stream = this._controlledReadableByteStream;\n    assert(ReadableStreamHasDefaultReader(stream));\n\n    if (this._queueTotalSize > 0) {\n      assert(ReadableStreamGetNumReadRequests(stream) === 0);\n\n      const entry = this._queue.shift()!;\n      this._queueTotalSize -= entry.byteLength;\n\n      ReadableByteStreamControllerHandleQueueDrain(this);\n\n      const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n\n      readRequest._chunkSteps(view);\n      return;\n    }\n\n    const autoAllocateChunkSize = this._autoAllocateChunkSize;\n    if (autoAllocateChunkSize !== undefined) {\n      let buffer: ArrayBuffer;\n      try {\n        buffer = new ArrayBuffer(autoAllocateChunkSize);\n      } catch (bufferE) {\n        readRequest._errorSteps(bufferE);\n        return;\n      }\n\n      const pullIntoDescriptor: DefaultPullIntoDescriptor = {\n        buffer,\n        byteOffset: 0,\n        byteLength: autoAllocateChunkSize,\n        bytesFilled: 0,\n        elementSize: 1,\n        viewConstructor: Uint8Array,\n        readerType: 'default'\n      };\n\n      this._pendingPullIntos.push(pullIntoDescriptor);\n    }\n\n    ReadableStreamAddReadRequest(stream, readRequest);\n    ReadableByteStreamControllerCallPullIfNeeded(this);\n  }\n}\n\nObject.defineProperties(ReadableByteStreamController.prototype, {\n  close: { enumerable: true },\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  byobRequest: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableByteStreamController.prototype, Symbol.toStringTag, {\n    value: 'ReadableByteStreamController',\n    configurable: true\n  });\n}\n\n// Abstract operations for the ReadableByteStreamController.\n\nexport function IsReadableByteStreamController(x: any): x is ReadableByteStreamController {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction IsReadableStreamBYOBRequest(x: any): x is ReadableStreamBYOBRequest {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction ReadableByteStreamControllerCallPullIfNeeded(controller: ReadableByteStreamController): void {\n  const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n  if (!shouldPull) {\n    return;\n  }\n\n  if (controller._pulling) {\n    controller._pullAgain = true;\n    return;\n  }\n\n  assert(!controller._pullAgain);\n\n  controller._pulling = true;\n\n  // TODO: Test controller argument\n  const pullPromise = controller._pullAlgorithm();\n  uponPromise(\n    pullPromise,\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n      }\n    },\n    e => {\n      ReadableByteStreamControllerError(controller, e);\n    }\n  );\n}\n\nfunction ReadableByteStreamControllerClearPendingPullIntos(controller: ReadableByteStreamController) {\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n  controller._pendingPullIntos = new SimpleQueue();\n}\n\nfunction ReadableByteStreamControllerCommitPullIntoDescriptor<T extends ArrayBufferView>(stream: ReadableByteStream,\n                                                                                         pullIntoDescriptor: PullIntoDescriptor<T>) {\n  assert(stream._state !== 'errored');\n\n  let done = false;\n  if (stream._state === 'closed') {\n    assert(pullIntoDescriptor.bytesFilled === 0);\n    done = true;\n  }\n\n  const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor<T>(pullIntoDescriptor);\n  if (pullIntoDescriptor.readerType === 'default') {\n    ReadableStreamFulfillReadRequest(stream, filledView as unknown as Uint8Array, done);\n  } else {\n    assert(pullIntoDescriptor.readerType === 'byob');\n    ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n  }\n}\n\nfunction ReadableByteStreamControllerConvertPullIntoDescriptor<T extends ArrayBufferView>(pullIntoDescriptor: PullIntoDescriptor<T>): T {\n  const bytesFilled = pullIntoDescriptor.bytesFilled;\n  const elementSize = pullIntoDescriptor.elementSize;\n\n  assert(bytesFilled <= pullIntoDescriptor.byteLength);\n  assert(bytesFilled % elementSize === 0);\n\n  return new pullIntoDescriptor.viewConstructor(\n    pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize) as T;\n}\n\nfunction ReadableByteStreamControllerEnqueueChunkToQueue(controller: ReadableByteStreamController,\n                                                         buffer: ArrayBufferLike,\n                                                         byteOffset: number,\n                                                         byteLength: number) {\n  controller._queue.push({ buffer, byteOffset, byteLength });\n  controller._queueTotalSize += byteLength;\n}\n\nfunction ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller: ReadableByteStreamController,\n                                                                     pullIntoDescriptor: PullIntoDescriptor) {\n  const elementSize = pullIntoDescriptor.elementSize;\n\n  const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n\n  const maxBytesToCopy = Math.min(controller._queueTotalSize,\n                                  pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n  const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n  const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n\n  let totalBytesToCopyRemaining = maxBytesToCopy;\n  let ready = false;\n  if (maxAlignedBytes > currentAlignedBytes) {\n    totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n    ready = true;\n  }\n\n  const queue = controller._queue;\n\n  while (totalBytesToCopyRemaining > 0) {\n    const headOfQueue = queue.peek();\n\n    const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n\n    const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n\n    if (headOfQueue.byteLength === bytesToCopy) {\n      queue.shift();\n    } else {\n      headOfQueue.byteOffset += bytesToCopy;\n      headOfQueue.byteLength -= bytesToCopy;\n    }\n    controller._queueTotalSize -= bytesToCopy;\n\n    ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n\n    totalBytesToCopyRemaining -= bytesToCopy;\n  }\n\n  if (!ready) {\n    assert(controller._queueTotalSize === 0);\n    assert(pullIntoDescriptor.bytesFilled > 0);\n    assert(pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize);\n  }\n\n  return ready;\n}\n\nfunction ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller: ReadableByteStreamController,\n                                                                size: number,\n                                                                pullIntoDescriptor: PullIntoDescriptor) {\n  assert(controller._pendingPullIntos.length === 0 || controller._pendingPullIntos.peek() === pullIntoDescriptor);\n\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n  pullIntoDescriptor.bytesFilled += size;\n}\n\nfunction ReadableByteStreamControllerHandleQueueDrain(controller: ReadableByteStreamController) {\n  assert(controller._controlledReadableByteStream._state === 'readable');\n\n  if (controller._queueTotalSize === 0 && controller._closeRequested) {\n    ReadableByteStreamControllerClearAlgorithms(controller);\n    ReadableStreamClose(controller._controlledReadableByteStream);\n  } else {\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n}\n\nfunction ReadableByteStreamControllerInvalidateBYOBRequest(controller: ReadableByteStreamController) {\n  if (controller._byobRequest === null) {\n    return;\n  }\n\n  controller._byobRequest._associatedReadableByteStreamController = undefined!;\n  controller._byobRequest._view = null!;\n  controller._byobRequest = null;\n}\n\nfunction ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller: ReadableByteStreamController) {\n  assert(!controller._closeRequested);\n\n  while (controller._pendingPullIntos.length > 0) {\n    if (controller._queueTotalSize === 0) {\n      return;\n    }\n\n    const pullIntoDescriptor = controller._pendingPullIntos.peek();\n\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n      ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n      ReadableByteStreamControllerCommitPullIntoDescriptor(\n        controller._controlledReadableByteStream,\n        pullIntoDescriptor\n      );\n    }\n  }\n}\n\nexport function ReadableByteStreamControllerPullInto<T extends ArrayBufferView>(\n  controller: ReadableByteStreamController,\n  view: T,\n  readIntoRequest: ReadIntoRequest<T>\n): void {\n  const stream = controller._controlledReadableByteStream;\n\n  let elementSize = 1;\n  if (view.constructor !== DataView) {\n    elementSize = (view.constructor as ArrayBufferViewConstructor<T>).BYTES_PER_ELEMENT;\n  }\n\n  const ctor = view.constructor as ArrayBufferViewConstructor<T>;\n\n  const buffer = TransferArrayBuffer(view.buffer);\n  const pullIntoDescriptor: BYOBPullIntoDescriptor<T> = {\n    buffer,\n    byteOffset: view.byteOffset,\n    byteLength: view.byteLength,\n    bytesFilled: 0,\n    elementSize,\n    viewConstructor: ctor,\n    readerType: 'byob'\n  };\n\n  if (controller._pendingPullIntos.length > 0) {\n    controller._pendingPullIntos.push(pullIntoDescriptor);\n\n    // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n    // - No change happens on desiredSize\n    // - The source has already been notified of that there's at least 1 pending read(view)\n\n    ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n    return;\n  }\n\n  if (stream._state === 'closed') {\n    const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n    readIntoRequest._closeSteps(emptyView);\n    return;\n  }\n\n  if (controller._queueTotalSize > 0) {\n    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n      const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor<T>(pullIntoDescriptor);\n\n      ReadableByteStreamControllerHandleQueueDrain(controller);\n\n      readIntoRequest._chunkSteps(filledView);\n      return;\n    }\n\n    if (controller._closeRequested) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      readIntoRequest._errorSteps(e);\n      return;\n    }\n  }\n\n  controller._pendingPullIntos.push(pullIntoDescriptor);\n\n  ReadableStreamAddReadIntoRequest<T>(stream, readIntoRequest);\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nfunction ReadableByteStreamControllerRespondInClosedState(controller: ReadableByteStreamController,\n                                                          firstDescriptor: PullIntoDescriptor) {\n  firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n\n  assert(firstDescriptor.bytesFilled === 0);\n\n  const stream = controller._controlledReadableByteStream;\n  if (ReadableStreamHasBYOBReader(stream)) {\n    while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n      const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n      ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n    }\n  }\n}\n\nfunction ReadableByteStreamControllerRespondInReadableState(controller: ReadableByteStreamController,\n                                                            bytesWritten: number,\n                                                            pullIntoDescriptor: PullIntoDescriptor) {\n  if (pullIntoDescriptor.bytesFilled + bytesWritten > pullIntoDescriptor.byteLength) {\n    throw new RangeError('bytesWritten out of range');\n  }\n\n  ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n\n  if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n    // TODO: Figure out whether we should detach the buffer or not here.\n    return;\n  }\n\n  ReadableByteStreamControllerShiftPendingPullInto(controller);\n\n  const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n  if (remainderSize > 0) {\n    const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n    const remainder = pullIntoDescriptor.buffer.slice(end - remainderSize, end);\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n  }\n\n  pullIntoDescriptor.buffer = TransferArrayBuffer(pullIntoDescriptor.buffer);\n  pullIntoDescriptor.bytesFilled -= remainderSize;\n  ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n\n  ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n}\n\nfunction ReadableByteStreamControllerRespondInternal(controller: ReadableByteStreamController, bytesWritten: number) {\n  const firstDescriptor = controller._pendingPullIntos.peek();\n\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'closed') {\n    if (bytesWritten !== 0) {\n      throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\n    }\n\n    ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor);\n  } else {\n    assert(state === 'readable');\n\n    ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n  }\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nfunction ReadableByteStreamControllerShiftPendingPullInto(controller: ReadableByteStreamController): PullIntoDescriptor {\n  const descriptor = controller._pendingPullIntos.shift()!;\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n  return descriptor;\n}\n\nfunction ReadableByteStreamControllerShouldCallPull(controller: ReadableByteStreamController): boolean {\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state !== 'readable') {\n    return false;\n  }\n\n  if (controller._closeRequested) {\n    return false;\n  }\n\n  if (!controller._started) {\n    return false;\n  }\n\n  if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n    return true;\n  }\n\n  const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n  assert(desiredSize !== null);\n  if (desiredSize! > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction ReadableByteStreamControllerClearAlgorithms(controller: ReadableByteStreamController) {\n  controller._pullAlgorithm = undefined!;\n  controller._cancelAlgorithm = undefined!;\n}\n\n// A client of ReadableByteStreamController may use these functions directly to bypass state check.\n\nfunction ReadableByteStreamControllerClose(controller: ReadableByteStreamController) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (controller._closeRequested || stream._state !== 'readable') {\n    return;\n  }\n\n  if (controller._queueTotalSize > 0) {\n    controller._closeRequested = true;\n\n    return;\n  }\n\n  if (controller._pendingPullIntos.length > 0) {\n    const firstPendingPullInto = controller._pendingPullIntos.peek();\n    if (firstPendingPullInto.bytesFilled > 0) {\n      const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n      ReadableByteStreamControllerError(controller, e);\n\n      throw e;\n    }\n  }\n\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamClose(stream);\n}\n\nfunction ReadableByteStreamControllerEnqueue(controller: ReadableByteStreamController, chunk: ArrayBufferView) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (controller._closeRequested || stream._state !== 'readable') {\n    return;\n  }\n\n  const buffer = chunk.buffer;\n  const byteOffset = chunk.byteOffset;\n  const byteLength = chunk.byteLength;\n  const transferredBuffer = TransferArrayBuffer(buffer);\n\n  if (ReadableStreamHasDefaultReader(stream)) {\n    if (ReadableStreamGetNumReadRequests(stream) === 0) {\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    } else {\n      assert(controller._queue.length === 0);\n\n      const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n      ReadableStreamFulfillReadRequest(stream, transferredView, false);\n    }\n  } else if (ReadableStreamHasBYOBReader(stream)) {\n    // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n  } else {\n    assert(!IsReadableStreamLocked(stream));\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n  }\n\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n}\n\nfunction ReadableByteStreamControllerError(controller: ReadableByteStreamController, e: any) {\n  const stream = controller._controlledReadableByteStream;\n\n  if (stream._state !== 'readable') {\n    return;\n  }\n\n  ReadableByteStreamControllerClearPendingPullIntos(controller);\n\n  ResetQueue(controller);\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n}\n\nfunction ReadableByteStreamControllerGetDesiredSize(controller: ReadableByteStreamController): number | null {\n  const state = controller._controlledReadableByteStream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nfunction ReadableByteStreamControllerRespond(controller: ReadableByteStreamController, bytesWritten: number) {\n  bytesWritten = Number(bytesWritten);\n  if (!IsFiniteNonNegativeNumber(bytesWritten)) {\n    throw new RangeError('bytesWritten must be a finite');\n  }\n\n  assert(controller._pendingPullIntos.length > 0);\n\n  ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n}\n\nfunction ReadableByteStreamControllerRespondWithNewView(controller: ReadableByteStreamController,\n                                                        view: ArrayBufferView) {\n  assert(controller._pendingPullIntos.length > 0);\n\n  const firstDescriptor = controller._pendingPullIntos.peek();\n\n  if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n    throw new RangeError('The region specified by view does not match byobRequest');\n  }\n  if (firstDescriptor.byteLength !== view.byteLength) {\n    throw new RangeError('The buffer of view has different capacity than byobRequest');\n  }\n\n  firstDescriptor.buffer = view.buffer;\n\n  ReadableByteStreamControllerRespondInternal(controller, view.byteLength);\n}\n\nexport function SetUpReadableByteStreamController(stream: ReadableByteStream,\n                                                  controller: ReadableByteStreamController,\n                                                  startAlgorithm: () => void | PromiseLike<void>,\n                                                  pullAlgorithm: () => Promise<void>,\n                                                  cancelAlgorithm: (reason: any) => Promise<void>,\n                                                  highWaterMark: number,\n                                                  autoAllocateChunkSize: number | undefined) {\n  assert(stream._readableStreamController === undefined);\n  if (autoAllocateChunkSize !== undefined) {\n    assert(NumberIsInteger(autoAllocateChunkSize));\n    assert(autoAllocateChunkSize > 0);\n  }\n\n  controller._controlledReadableByteStream = stream;\n\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  controller._byobRequest = null;\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._closeRequested = false;\n  controller._started = false;\n\n  controller._strategyHWM = highWaterMark;\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  controller._autoAllocateChunkSize = autoAllocateChunkSize;\n\n  controller._pendingPullIntos = new SimpleQueue();\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  uponPromise(\n    promiseResolvedWith(startResult),\n    () => {\n      controller._started = true;\n\n      assert(!controller._pulling);\n      assert(!controller._pullAgain);\n\n      ReadableByteStreamControllerCallPullIfNeeded(controller);\n    },\n    r => {\n      ReadableByteStreamControllerError(controller, r);\n    }\n  );\n}\n\nexport function SetUpReadableByteStreamControllerFromUnderlyingSource(\n  stream: ReadableByteStream,\n  underlyingByteSource: ValidatedUnderlyingByteSource,\n  highWaterMark: number\n) {\n  const controller: ReadableByteStreamController = Object.create(ReadableByteStreamController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let pullAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let cancelAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingByteSource.start !== undefined) {\n    startAlgorithm = () => underlyingByteSource.start!(controller);\n  }\n  if (underlyingByteSource.pull !== undefined) {\n    pullAlgorithm = () => underlyingByteSource.pull!(controller);\n  }\n  if (underlyingByteSource.cancel !== undefined) {\n    cancelAlgorithm = reason => underlyingByteSource.cancel!(reason);\n  }\n\n  const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n\n  SetUpReadableByteStreamController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize\n  );\n}\n\nfunction SetUpReadableStreamBYOBRequest(request: ReadableStreamBYOBRequest,\n                                        controller: ReadableByteStreamController,\n                                        view: ArrayBufferView) {\n  assert(IsReadableByteStreamController(controller));\n  assert(typeof view === 'object');\n  assert(ArrayBuffer.isView(view));\n  assert(!IsDetachedBuffer(view.buffer));\n  request._associatedReadableByteStreamController = controller;\n  request._view = view;\n}\n\n// Helper functions for the ReadableStreamBYOBRequest.\n\nfunction byobRequestBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);\n}\n\n// Helper functions for the ReadableByteStreamController.\n\nfunction byteStreamControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);\n}\n","import assert from '../../stub/assert';\nimport { SimpleQueue } from '../simple-queue';\nimport {\n  ReadableStreamReaderGenericCancel,\n  ReadableStreamReaderGenericInitialize,\n  ReadableStreamReaderGenericRelease,\n  readerLockException\n} from './generic-reader';\nimport { IsReadableStreamLocked, ReadableByteStream, ReadableStream } from '../readable-stream';\nimport {\n  IsReadableByteStreamController,\n  ReadableByteStreamController,\n  ReadableByteStreamControllerPullInto\n} from './byte-stream-controller';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { newPromise, promiseRejectedWith } from '../helpers/webidl';\nimport { assertRequiredArgument } from '../validators/basic';\nimport { assertReadableStream } from '../validators/readable-stream';\n\n/**\n * A result returned by {@link ReadableStreamBYOBReader.read}.\n *\n * @public\n */\nexport type ReadableStreamBYOBReadResult<T extends ArrayBufferView> = {\n  done: boolean;\n  value: T;\n};\n\n// Abstract operations for the ReadableStream.\n\nexport function AcquireReadableStreamBYOBReader(stream: ReadableStream<Uint8Array>): ReadableStreamBYOBReader {\n  return new ReadableStreamBYOBReader(stream);\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamAddReadIntoRequest<T extends ArrayBufferView>(stream: ReadableByteStream,\n                                                                            readIntoRequest: ReadIntoRequest<T>): void {\n  assert(IsReadableStreamBYOBReader(stream._reader));\n  assert(stream._state === 'readable' || stream._state === 'closed');\n\n  (stream._reader! as ReadableStreamBYOBReader)._readIntoRequests.push(readIntoRequest);\n}\n\nexport function ReadableStreamFulfillReadIntoRequest(stream: ReadableByteStream,\n                                                     chunk: ArrayBufferView,\n                                                     done: boolean) {\n  const reader = stream._reader as ReadableStreamBYOBReader;\n\n  assert(reader._readIntoRequests.length > 0);\n\n  const readIntoRequest = reader._readIntoRequests.shift()!;\n  if (done) {\n    readIntoRequest._closeSteps(chunk);\n  } else {\n    readIntoRequest._chunkSteps(chunk);\n  }\n}\n\nexport function ReadableStreamGetNumReadIntoRequests(stream: ReadableByteStream): number {\n  return (stream._reader as ReadableStreamBYOBReader)._readIntoRequests.length;\n}\n\nexport function ReadableStreamHasBYOBReader(stream: ReadableByteStream): boolean {\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return false;\n  }\n\n  if (!IsReadableStreamBYOBReader(reader)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Readers\n\nexport interface ReadIntoRequest<T extends ArrayBufferView> {\n  _chunkSteps(chunk: T): void;\n\n  _closeSteps(chunk: T): void;\n\n  _errorSteps(e: any): void;\n}\n\n/**\n * A BYOB reader vended by a {@link ReadableStream}.\n *\n * @public\n */\nexport class ReadableStreamBYOBReader {\n  /** @internal */\n  _ownerReadableStream!: ReadableByteStream;\n  /** @internal */\n  _closedPromise!: Promise<void>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readIntoRequests: SimpleQueue<ReadIntoRequest<any>>;\n\n  constructor(stream: ReadableByteStream) {\n    assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');\n    assertReadableStream(stream, 'First parameter');\n\n    if (IsReadableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n    }\n\n    if (!IsReadableByteStreamController(stream._readableStreamController)) {\n      throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' +\n        'source');\n    }\n\n    ReadableStreamReaderGenericInitialize(this, stream);\n\n    this._readIntoRequests = new SimpleQueue();\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n   * the reader's lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<void> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('cancel'));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('cancel'));\n    }\n\n    return ReadableStreamReaderGenericCancel(this, reason);\n  }\n\n  /**\n   * Attempts to reads bytes into view, and returns a promise resolved with the result.\n   *\n   * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n   */\n  read<T extends ArrayBufferView>(view: T): Promise<ReadableStreamBYOBReadResult<T>> {\n    if (!IsReadableStreamBYOBReader(this)) {\n      return promiseRejectedWith(byobReaderBrandCheckException('read'));\n    }\n\n    if (!ArrayBuffer.isView(view)) {\n      return promiseRejectedWith(new TypeError('view must be an array buffer view'));\n    }\n    if (view.byteLength === 0) {\n      return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));\n    }\n    if (view.buffer.byteLength === 0) {\n      return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return promiseRejectedWith(readerLockException('read from'));\n    }\n\n    let resolvePromise!: (result: ReadableStreamBYOBReadResult<T>) => void;\n    let rejectPromise!: (reason: any) => void;\n    const promise = newPromise<ReadableStreamBYOBReadResult<T>>((resolve, reject) => {\n      resolvePromise = resolve;\n      rejectPromise = reject;\n    });\n    const readIntoRequest: ReadIntoRequest<T> = {\n      _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n      _closeSteps: chunk => resolvePromise({ value: chunk, done: true }),\n      _errorSteps: e => rejectPromise(e)\n    };\n    ReadableStreamBYOBReaderRead(this, view, readIntoRequest);\n    return promise;\n  }\n\n  /**\n   * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n   * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n   * from now on; otherwise, the reader will appear closed.\n   *\n   * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n   * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to\n   * do so will throw a `TypeError` and leave the reader locked to the stream.\n   */\n  releaseLock(): void {\n    if (!IsReadableStreamBYOBReader(this)) {\n      throw byobReaderBrandCheckException('releaseLock');\n    }\n\n    if (this._ownerReadableStream === undefined) {\n      return;\n    }\n\n    if (this._readIntoRequests.length > 0) {\n      throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n    }\n\n    ReadableStreamReaderGenericRelease(this);\n  }\n}\n\nObject.defineProperties(ReadableStreamBYOBReader.prototype, {\n  cancel: { enumerable: true },\n  read: { enumerable: true },\n  releaseLock: { enumerable: true },\n  closed: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamBYOBReader.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamBYOBReader',\n    configurable: true\n  });\n}\n\n// Abstract operations for the readers.\n\nexport function IsReadableStreamBYOBReader(x: any): x is ReadableStreamBYOBReader {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction ReadableStreamBYOBReaderRead<T extends ArrayBufferView>(reader: ReadableStreamBYOBReader,\n                                                                 view: T,\n                                                                 readIntoRequest: ReadIntoRequest<T>): void {\n  const stream = reader._ownerReadableStream;\n\n  assert(stream !== undefined);\n\n  stream._disturbed = true;\n\n  if (stream._state === 'errored') {\n    readIntoRequest._errorSteps(stream._storedError);\n  } else {\n    ReadableByteStreamControllerPullInto(\n      stream._readableStreamController as ReadableByteStreamController,\n      view,\n      readIntoRequest\n    );\n  }\n}\n\n// Helper functions for the ReadableStreamBYOBReader.\n\nfunction byobReaderBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);\n}\n","import { QueuingStrategy, QueuingStrategySizeCallback } from '../queuing-strategy';\nimport NumberIsNaN from '../../stub/number-isnan';\n\nexport function ExtractHighWaterMark(strategy: QueuingStrategy, defaultHWM: number): number {\n  const { highWaterMark } = strategy;\n\n  if (highWaterMark === undefined) {\n    return defaultHWM;\n  }\n\n  if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n    throw new RangeError('Invalid highWaterMark');\n  }\n\n  return highWaterMark;\n}\n\nexport function ExtractSizeAlgorithm<T>(strategy: QueuingStrategy<T>): QueuingStrategySizeCallback<T> {\n  const { size } = strategy;\n\n  if (!size) {\n    return () => 1;\n  }\n\n  return size;\n}\n","import { QueuingStrategy, QueuingStrategySizeCallback } from '../queuing-strategy';\nimport { assertDictionary, assertFunction, convertUnrestrictedDouble } from './basic';\n\nexport function convertQueuingStrategy<T>(init: QueuingStrategy<T> | null | undefined,\n                                          context: string): QueuingStrategy<T> {\n  assertDictionary(init, context);\n  const highWaterMark = init?.highWaterMark;\n  const size = init?.size;\n  return {\n    highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\n    size: size === undefined ? undefined : convertQueuingStrategySize(size, `${context} has member 'size' that`)\n  };\n}\n\nfunction convertQueuingStrategySize<T>(fn: QueuingStrategySizeCallback<T>,\n                                       context: string): QueuingStrategySizeCallback<T> {\n  assertFunction(fn, context);\n  return chunk => convertUnrestrictedDouble(fn(chunk));\n}\n","import { assertDictionary, assertFunction } from './basic';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\nimport {\n  UnderlyingSink,\n  UnderlyingSinkAbortCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  ValidatedUnderlyingSink\n} from '../writable-stream/underlying-sink';\nimport { WritableStreamDefaultController } from '../writable-stream';\n\nexport function convertUnderlyingSink<W>(original: UnderlyingSink<W> | null,\n                                         context: string): ValidatedUnderlyingSink<W> {\n  assertDictionary(original, context);\n  const abort = original?.abort;\n  const close = original?.close;\n  const start = original?.start;\n  const type = original?.type;\n  const write = original?.write;\n  return {\n    abort: abort === undefined ?\n      undefined :\n      convertUnderlyingSinkAbortCallback(abort, original!, `${context} has member 'abort' that`),\n    close: close === undefined ?\n      undefined :\n      convertUnderlyingSinkCloseCallback(close, original!, `${context} has member 'close' that`),\n    start: start === undefined ?\n      undefined :\n      convertUnderlyingSinkStartCallback(start, original!, `${context} has member 'start' that`),\n    write: write === undefined ?\n      undefined :\n      convertUnderlyingSinkWriteCallback(write, original!, `${context} has member 'write' that`),\n    type\n  };\n}\n\nfunction convertUnderlyingSinkAbortCallback(\n  fn: UnderlyingSinkAbortCallback,\n  original: UnderlyingSink,\n  context: string\n): (reason: any) => Promise<void> {\n  assertFunction(fn, context);\n  return (reason: any) => promiseCall(fn, original, [reason]);\n}\n\nfunction convertUnderlyingSinkCloseCallback(\n  fn: UnderlyingSinkCloseCallback,\n  original: UnderlyingSink,\n  context: string\n): () => Promise<void> {\n  assertFunction(fn, context);\n  return () => promiseCall(fn, original, []);\n}\n\nfunction convertUnderlyingSinkStartCallback(\n  fn: UnderlyingSinkStartCallback,\n  original: UnderlyingSink,\n  context: string\n): UnderlyingSinkStartCallback {\n  assertFunction(fn, context);\n  return (controller: WritableStreamDefaultController) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertUnderlyingSinkWriteCallback<W>(\n  fn: UnderlyingSinkWriteCallback<W>,\n  original: UnderlyingSink<W>,\n  context: string\n): (chunk: W, controller: WritableStreamDefaultController) => Promise<void> {\n  assertFunction(fn, context);\n  return (chunk: W, controller: WritableStreamDefaultController) => promiseCall(fn, original, [chunk, controller]);\n}\n","import { IsWritableStream, WritableStream } from '../writable-stream';\n\nexport function assertWritableStream(x: unknown, context: string): asserts x is WritableStream {\n  if (!IsWritableStream(x)) {\n    throw new TypeError(`${context} is not a WritableStream.`);\n  }\n}\n","import assert from '../stub/assert';\nimport {\n  newPromise,\n  promiseRejectedWith,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  uponPromise\n} from './helpers/webidl';\nimport {\n  DequeueValue,\n  EnqueueValueWithSize,\n  PeekQueueValue,\n  QueuePair,\n  ResetQueue\n} from './abstract-ops/queue-with-sizes';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { SimpleQueue } from './simple-queue';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { AbortSteps, ErrorSteps } from './abstract-ops/internal-methods';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport {\n  UnderlyingSink,\n  UnderlyingSinkAbortCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  ValidatedUnderlyingSink\n} from './writable-stream/underlying-sink';\nimport { assertObject, assertRequiredArgument } from './validators/basic';\nimport { convertUnderlyingSink } from './validators/underlying-sink';\nimport { assertWritableStream } from './validators/writable-stream';\n\ntype WritableStreamState = 'writable' | 'closed' | 'erroring' | 'errored';\n\ninterface WriteOrCloseRequest {\n  _resolve: (value?: undefined) => void;\n  _reject: (reason: any) => void;\n}\n\ntype WriteRequest = WriteOrCloseRequest;\ntype CloseRequest = WriteOrCloseRequest;\n\ninterface PendingAbortRequest {\n  _promise: Promise<void>;\n  _resolve: () => void;\n  _reject: (reason: any) => void;\n  _reason: any;\n  _wasAlreadyErroring: boolean;\n}\n\n/**\n * A writable stream represents a destination for data, into which you can write.\n *\n * @public\n */\nclass WritableStream<W = any> {\n  /** @internal */\n  _state!: WritableStreamState;\n  /** @internal */\n  _storedError: any;\n  /** @internal */\n  _writer: WritableStreamDefaultWriter<W> | undefined;\n  /** @internal */\n  _writableStreamController!: WritableStreamDefaultController<W>;\n  /** @internal */\n  _writeRequests!: SimpleQueue<WriteRequest>;\n  /** @internal */\n  _inFlightWriteRequest: WriteRequest | undefined;\n  /** @internal */\n  _closeRequest: CloseRequest | undefined;\n  /** @internal */\n  _inFlightCloseRequest: CloseRequest | undefined;\n  /** @internal */\n  _pendingAbortRequest: PendingAbortRequest | undefined;\n  /** @internal */\n  _backpressure!: boolean;\n\n  constructor(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>);\n  constructor(rawUnderlyingSink: UnderlyingSink<W> | null | undefined = {},\n              rawStrategy: QueuingStrategy<W> | null | undefined = {}) {\n    if (rawUnderlyingSink === undefined) {\n      rawUnderlyingSink = null;\n    } else {\n      assertObject(rawUnderlyingSink, 'First parameter');\n    }\n\n    const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n    const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');\n\n    InitializeWritableStream(this);\n\n    const type = underlyingSink.type;\n    if (type !== undefined) {\n      throw new RangeError('Invalid type is specified');\n    }\n\n    const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n    const highWaterMark = ExtractHighWaterMark(strategy, 1);\n\n    SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n  }\n\n  /**\n   * Returns whether or not the writable stream is locked to a writer.\n   */\n  get locked(): boolean {\n    if (!IsWritableStream(this)) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsWritableStreamLocked(this);\n  }\n\n  /**\n   * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be\n   * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort\n   * mechanism of the underlying sink.\n   *\n   * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled\n   * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel\n   * the stream) if the stream is currently locked.\n   */\n  abort(reason: any = undefined): Promise<void> {\n    if (!IsWritableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('abort'));\n    }\n\n    if (IsWritableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));\n    }\n\n    return WritableStreamAbort(this, reason);\n  }\n\n  /**\n   * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its\n   * close behavior. During this time any further attempts to write will fail (without erroring the stream).\n   *\n   * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream\n   * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with\n   * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.\n   */\n  close() {\n    if (!IsWritableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('close'));\n    }\n\n    if (IsWritableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(this)) {\n      return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n    }\n\n    return WritableStreamClose(this);\n  }\n\n  /**\n   * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream\n   * is locked, no other writer can be acquired until this one is released.\n   *\n   * This functionality is especially useful for creating abstractions that desire the ability to write to a stream\n   * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at\n   * the same time, which would cause the resulting written data to be unpredictable and probably useless.\n   */\n  getWriter(): WritableStreamDefaultWriter<W> {\n    if (!IsWritableStream(this)) {\n      throw streamBrandCheckException('getWriter');\n    }\n\n    return AcquireWritableStreamDefaultWriter(this);\n  }\n}\n\nObject.defineProperties(WritableStream.prototype, {\n  abort: { enumerable: true },\n  close: { enumerable: true },\n  getWriter: { enumerable: true },\n  locked: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStream.prototype, Symbol.toStringTag, {\n    value: 'WritableStream',\n    configurable: true\n  });\n}\n\nexport {\n  AcquireWritableStreamDefaultWriter,\n  CreateWritableStream,\n  IsWritableStream,\n  IsWritableStreamLocked,\n  WritableStream,\n  WritableStreamAbort,\n  WritableStreamDefaultControllerErrorIfNeeded,\n  WritableStreamDefaultWriterCloseWithErrorPropagation,\n  WritableStreamDefaultWriterRelease,\n  WritableStreamDefaultWriterWrite,\n  WritableStreamCloseQueuedOrInFlight,\n  UnderlyingSink,\n  UnderlyingSinkStartCallback,\n  UnderlyingSinkWriteCallback,\n  UnderlyingSinkCloseCallback,\n  UnderlyingSinkAbortCallback\n};\n\n// Abstract operations for the WritableStream.\n\nfunction AcquireWritableStreamDefaultWriter<W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W> {\n  return new WritableStreamDefaultWriter(stream);\n}\n\n// Throws if and only if startAlgorithm throws.\nfunction CreateWritableStream<W>(startAlgorithm: () => void | PromiseLike<void>,\n                                 writeAlgorithm: (chunk: W) => Promise<void>,\n                                 closeAlgorithm: () => Promise<void>,\n                                 abortAlgorithm: (reason: any) => Promise<void>,\n                                 highWaterMark = 1,\n                                 sizeAlgorithm: QueuingStrategySizeCallback<W> = () => 1) {\n  assert(IsNonNegativeNumber(highWaterMark));\n\n  const stream: WritableStream<W> = Object.create(WritableStream.prototype);\n  InitializeWritableStream(stream);\n\n  const controller: WritableStreamDefaultController<W> = Object.create(WritableStreamDefaultController.prototype);\n\n  SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm,\n                                       abortAlgorithm, highWaterMark, sizeAlgorithm);\n  return stream;\n}\n\nfunction InitializeWritableStream<W>(stream: WritableStream<W>) {\n  stream._state = 'writable';\n\n  // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n  // 'erroring' or 'errored'. May be set to an undefined value.\n  stream._storedError = undefined;\n\n  stream._writer = undefined;\n\n  // Initialize to undefined first because the constructor of the controller checks this\n  // variable to validate the caller.\n  stream._writableStreamController = undefined!;\n\n  // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n  // producer without waiting for the queued writes to finish.\n  stream._writeRequests = new SimpleQueue();\n\n  // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n  // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n  stream._inFlightWriteRequest = undefined;\n\n  // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n  // has been detached.\n  stream._closeRequest = undefined;\n\n  // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n  // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n  stream._inFlightCloseRequest = undefined;\n\n  // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n  stream._pendingAbortRequest = undefined;\n\n  // The backpressure signal set by the controller.\n  stream._backpressure = false;\n}\n\nfunction IsWritableStream(x: unknown): x is WritableStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction IsWritableStreamLocked(stream: WritableStream): boolean {\n  assert(IsWritableStream(stream));\n\n  if (stream._writer === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamAbort(stream: WritableStream, reason: any): Promise<void> {\n  const state = stream._state;\n  if (state === 'closed' || state === 'errored') {\n    return promiseResolvedWith(undefined);\n  }\n  if (stream._pendingAbortRequest !== undefined) {\n    return stream._pendingAbortRequest._promise;\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  let wasAlreadyErroring = false;\n  if (state === 'erroring') {\n    wasAlreadyErroring = true;\n    // reason will not be used, so don't keep a reference to it.\n    reason = undefined;\n  }\n\n  const promise = newPromise<void>((resolve, reject) => {\n    stream._pendingAbortRequest = {\n      _promise: undefined!,\n      _resolve: resolve,\n      _reject: reject,\n      _reason: reason,\n      _wasAlreadyErroring: wasAlreadyErroring\n    };\n  });\n  stream._pendingAbortRequest!._promise = promise;\n\n  if (!wasAlreadyErroring) {\n    WritableStreamStartErroring(stream, reason);\n  }\n\n  return promise;\n}\n\nfunction WritableStreamClose(stream: WritableStream<any>): Promise<void> {\n  const state = stream._state;\n  if (state === 'closed' || state === 'errored') {\n    return promiseRejectedWith(new TypeError(\n      `The stream (in ${state} state) is not in the writable state and cannot be closed`));\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n  assert(!WritableStreamCloseQueuedOrInFlight(stream));\n\n  const promise = newPromise<void>((resolve, reject) => {\n    const closeRequest: CloseRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._closeRequest = closeRequest;\n  });\n\n  const writer = stream._writer;\n  if (writer !== undefined && stream._backpressure && state === 'writable') {\n    defaultWriterReadyPromiseResolve(writer);\n  }\n\n  WritableStreamDefaultControllerClose(stream._writableStreamController);\n\n  return promise;\n}\n\n// WritableStream API exposed for controllers.\n\nfunction WritableStreamAddWriteRequest(stream: WritableStream): Promise<void> {\n  assert(IsWritableStreamLocked(stream));\n  assert(stream._state === 'writable');\n\n  const promise = newPromise<void>((resolve, reject) => {\n    const writeRequest: WriteRequest = {\n      _resolve: resolve,\n      _reject: reject\n    };\n\n    stream._writeRequests.push(writeRequest);\n  });\n\n  return promise;\n}\n\nfunction WritableStreamDealWithRejection(stream: WritableStream, error: any) {\n  const state = stream._state;\n\n  if (state === 'writable') {\n    WritableStreamStartErroring(stream, error);\n    return;\n  }\n\n  assert(state === 'erroring');\n  WritableStreamFinishErroring(stream);\n}\n\nfunction WritableStreamStartErroring(stream: WritableStream, reason: any) {\n  assert(stream._storedError === undefined);\n  assert(stream._state === 'writable');\n\n  const controller = stream._writableStreamController;\n  assert(controller !== undefined);\n\n  stream._state = 'erroring';\n  stream._storedError = reason;\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n  }\n\n  if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n    WritableStreamFinishErroring(stream);\n  }\n}\n\nfunction WritableStreamFinishErroring(stream: WritableStream) {\n  assert(stream._state === 'erroring');\n  assert(!WritableStreamHasOperationMarkedInFlight(stream));\n  stream._state = 'errored';\n  stream._writableStreamController[ErrorSteps]();\n\n  const storedError = stream._storedError;\n  stream._writeRequests.forEach(writeRequest => {\n    writeRequest._reject(storedError);\n  });\n  stream._writeRequests = new SimpleQueue();\n\n  if (stream._pendingAbortRequest === undefined) {\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const abortRequest = stream._pendingAbortRequest;\n  stream._pendingAbortRequest = undefined;\n\n  if (abortRequest._wasAlreadyErroring) {\n    abortRequest._reject(storedError);\n    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    return;\n  }\n\n  const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n  uponPromise(\n    promise,\n    () => {\n      abortRequest._resolve();\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    },\n    (reason: any) => {\n      abortRequest._reject(reason);\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    });\n}\n\nfunction WritableStreamFinishInFlightWrite(stream: WritableStream) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest!._resolve(undefined);\n  stream._inFlightWriteRequest = undefined;\n}\n\nfunction WritableStreamFinishInFlightWriteWithError(stream: WritableStream, error: any) {\n  assert(stream._inFlightWriteRequest !== undefined);\n  stream._inFlightWriteRequest!._reject(error);\n  stream._inFlightWriteRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  WritableStreamDealWithRejection(stream, error);\n}\n\nfunction WritableStreamFinishInFlightClose(stream: WritableStream) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest!._resolve(undefined);\n  stream._inFlightCloseRequest = undefined;\n\n  const state = stream._state;\n\n  assert(state === 'writable' || state === 'erroring');\n\n  if (state === 'erroring') {\n    // The error was too late to do anything, so it is ignored.\n    stream._storedError = undefined;\n    if (stream._pendingAbortRequest !== undefined) {\n      stream._pendingAbortRequest._resolve();\n      stream._pendingAbortRequest = undefined;\n    }\n  }\n\n  stream._state = 'closed';\n\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseResolve(writer);\n  }\n\n  assert(stream._pendingAbortRequest === undefined);\n  assert(stream._storedError === undefined);\n}\n\nfunction WritableStreamFinishInFlightCloseWithError(stream: WritableStream, error: any) {\n  assert(stream._inFlightCloseRequest !== undefined);\n  stream._inFlightCloseRequest!._reject(error);\n  stream._inFlightCloseRequest = undefined;\n\n  assert(stream._state === 'writable' || stream._state === 'erroring');\n\n  // Never execute sink abort() after sink close().\n  if (stream._pendingAbortRequest !== undefined) {\n    stream._pendingAbortRequest._reject(error);\n    stream._pendingAbortRequest = undefined;\n  }\n  WritableStreamDealWithRejection(stream, error);\n}\n\n// TODO(ricea): Fix alphabetical order.\nfunction WritableStreamCloseQueuedOrInFlight(stream: WritableStream): boolean {\n  if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamHasOperationMarkedInFlight(stream: WritableStream): boolean {\n  if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction WritableStreamMarkCloseRequestInFlight(stream: WritableStream) {\n  assert(stream._inFlightCloseRequest === undefined);\n  assert(stream._closeRequest !== undefined);\n  stream._inFlightCloseRequest = stream._closeRequest;\n  stream._closeRequest = undefined;\n}\n\nfunction WritableStreamMarkFirstWriteRequestInFlight(stream: WritableStream) {\n  assert(stream._inFlightWriteRequest === undefined);\n  assert(stream._writeRequests.length !== 0);\n  stream._inFlightWriteRequest = stream._writeRequests.shift();\n}\n\nfunction WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream: WritableStream) {\n  assert(stream._state === 'errored');\n  if (stream._closeRequest !== undefined) {\n    assert(stream._inFlightCloseRequest === undefined);\n\n    stream._closeRequest._reject(stream._storedError);\n    stream._closeRequest = undefined;\n  }\n  const writer = stream._writer;\n  if (writer !== undefined) {\n    defaultWriterClosedPromiseReject(writer, stream._storedError);\n  }\n}\n\nfunction WritableStreamUpdateBackpressure(stream: WritableStream, backpressure: boolean) {\n  assert(stream._state === 'writable');\n  assert(!WritableStreamCloseQueuedOrInFlight(stream));\n\n  const writer = stream._writer;\n  if (writer !== undefined && backpressure !== stream._backpressure) {\n    if (backpressure) {\n      defaultWriterReadyPromiseReset(writer);\n    } else {\n      assert(!backpressure);\n\n      defaultWriterReadyPromiseResolve(writer);\n    }\n  }\n\n  stream._backpressure = backpressure;\n}\n\n/**\n * A default writer vended by a {@link WritableStream}.\n *\n * @public\n */\nexport class WritableStreamDefaultWriter<W = any> {\n  /** @internal */\n  _ownerWritableStream: WritableStream<W>;\n  /** @internal */\n  _closedPromise!: Promise<void>;\n  /** @internal */\n  _closedPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _closedPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _closedPromiseState!: 'pending' | 'resolved' | 'rejected';\n  /** @internal */\n  _readyPromise!: Promise<void>;\n  /** @internal */\n  _readyPromise_resolve?: (value?: undefined) => void;\n  /** @internal */\n  _readyPromise_reject?: (reason: any) => void;\n  /** @internal */\n  _readyPromiseState!: 'pending' | 'fulfilled' | 'rejected';\n\n  constructor(stream: WritableStream<W>) {\n    assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');\n    assertWritableStream(stream, 'First parameter');\n\n    if (IsWritableStreamLocked(stream)) {\n      throw new TypeError('This stream has already been locked for exclusive writing by another writer');\n    }\n\n    this._ownerWritableStream = stream;\n    stream._writer = this;\n\n    const state = stream._state;\n\n    if (state === 'writable') {\n      if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n        defaultWriterReadyPromiseInitialize(this);\n      } else {\n        defaultWriterReadyPromiseInitializeAsResolved(this);\n      }\n\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'erroring') {\n      defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n      defaultWriterClosedPromiseInitialize(this);\n    } else if (state === 'closed') {\n      defaultWriterReadyPromiseInitializeAsResolved(this);\n      defaultWriterClosedPromiseInitializeAsResolved(this);\n    } else {\n      assert(state === 'errored');\n\n      const storedError = stream._storedError;\n      defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n      defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n    }\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n   * the writer’s lock is released before the stream finishes closing.\n   */\n  get closed(): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('closed'));\n    }\n\n    return this._closedPromise;\n  }\n\n  /**\n   * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.\n   * A producer can use this information to determine the right amount of data to write.\n   *\n   * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort\n   * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when\n   * the writer’s lock is released.\n   */\n  get desiredSize(): number | null {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      throw defaultWriterBrandCheckException('desiredSize');\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      throw defaultWriterLockException('desiredSize');\n    }\n\n    return WritableStreamDefaultWriterGetDesiredSize(this);\n  }\n\n  /**\n   * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions\n   * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips\n   * back to zero or below, the getter will return a new promise that stays pending until the next transition.\n   *\n   * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become\n   * rejected.\n   */\n  get ready(): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('ready'));\n    }\n\n    return this._readyPromise;\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.\n   */\n  abort(reason: any = undefined): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('abort'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('abort'));\n    }\n\n    return WritableStreamDefaultWriterAbort(this, reason);\n  }\n\n  /**\n   * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.\n   */\n  close(): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('close'));\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('close'));\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(stream)) {\n      return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n    }\n\n    return WritableStreamDefaultWriterClose(this);\n  }\n\n  /**\n   * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.\n   * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from\n   * now on; otherwise, the writer will appear closed.\n   *\n   * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the\n   * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).\n   * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents\n   * other producers from writing in an interleaved manner.\n   */\n  releaseLock(): void {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      throw defaultWriterBrandCheckException('releaseLock');\n    }\n\n    const stream = this._ownerWritableStream;\n\n    if (stream === undefined) {\n      return;\n    }\n\n    assert(stream._writer !== undefined);\n\n    WritableStreamDefaultWriterRelease(this);\n  }\n\n  /**\n   * Writes the given chunk to the writable stream, by waiting until any previous writes have finished successfully,\n   * and then sending the chunk to the underlying sink's {@link UnderlyingSink.write | write()} method. It will return\n   * a promise that fulfills with undefined upon a successful write, or rejects if the write fails or stream becomes\n   * errored before the writing process is initiated.\n   *\n   * Note that what \"success\" means is up to the underlying sink; it might indicate simply that the chunk has been\n   * accepted, and not necessarily that it is safely saved to its ultimate destination.\n   */\n  write(chunk: W): Promise<void>;\n  write(chunk: W = undefined!): Promise<void> {\n    if (!IsWritableStreamDefaultWriter(this)) {\n      return promiseRejectedWith(defaultWriterBrandCheckException('write'));\n    }\n\n    if (this._ownerWritableStream === undefined) {\n      return promiseRejectedWith(defaultWriterLockException('write to'));\n    }\n\n    return WritableStreamDefaultWriterWrite(this, chunk);\n  }\n}\n\nObject.defineProperties(WritableStreamDefaultWriter.prototype, {\n  abort: { enumerable: true },\n  close: { enumerable: true },\n  releaseLock: { enumerable: true },\n  write: { enumerable: true },\n  closed: { enumerable: true },\n  desiredSize: { enumerable: true },\n  ready: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStreamDefaultWriter.prototype, Symbol.toStringTag, {\n    value: 'WritableStreamDefaultWriter',\n    configurable: true\n  });\n}\n\n// Abstract operations for the WritableStreamDefaultWriter.\n\nfunction IsWritableStreamDefaultWriter<W = any>(x: any): x is WritableStreamDefaultWriter<W> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\n    return false;\n  }\n\n  return true;\n}\n\n// A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultWriterAbort(writer: WritableStreamDefaultWriter, reason: any) {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  return WritableStreamAbort(stream, reason);\n}\n\nfunction WritableStreamDefaultWriterClose(writer: WritableStreamDefaultWriter): Promise<void> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  return WritableStreamClose(stream);\n}\n\nfunction WritableStreamDefaultWriterCloseWithErrorPropagation(writer: WritableStreamDefaultWriter): Promise<void> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const state = stream._state;\n  if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n    return promiseResolvedWith(undefined);\n  }\n\n  if (state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  assert(state === 'writable' || state === 'erroring');\n\n  return WritableStreamDefaultWriterClose(writer);\n}\n\nfunction WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer: WritableStreamDefaultWriter, error: any) {\n  if (writer._closedPromiseState === 'pending') {\n    defaultWriterClosedPromiseReject(writer, error);\n  } else {\n    defaultWriterClosedPromiseResetToRejected(writer, error);\n  }\n}\n\nfunction WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer: WritableStreamDefaultWriter, error: any) {\n  if (writer._readyPromiseState === 'pending') {\n    defaultWriterReadyPromiseReject(writer, error);\n  } else {\n    defaultWriterReadyPromiseResetToRejected(writer, error);\n  }\n}\n\nfunction WritableStreamDefaultWriterGetDesiredSize(writer: WritableStreamDefaultWriter): number | null {\n  const stream = writer._ownerWritableStream;\n  const state = stream._state;\n\n  if (state === 'errored' || state === 'erroring') {\n    return null;\n  }\n\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n}\n\nfunction WritableStreamDefaultWriterRelease(writer: WritableStreamDefaultWriter) {\n  const stream = writer._ownerWritableStream;\n  assert(stream !== undefined);\n  assert(stream._writer === writer);\n\n  const releasedError = new TypeError(\n    `Writer was released and can no longer be used to monitor the stream's closedness`);\n\n  WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n\n  // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n  // rejected until afterwards. This means that simply testing state will not work.\n  WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n\n  stream._writer = undefined;\n  writer._ownerWritableStream = undefined!;\n}\n\nfunction WritableStreamDefaultWriterWrite<W>(writer: WritableStreamDefaultWriter<W>, chunk: W): Promise<void> {\n  const stream = writer._ownerWritableStream;\n\n  assert(stream !== undefined);\n\n  const controller = stream._writableStreamController;\n\n  const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n\n  if (stream !== writer._ownerWritableStream) {\n    return promiseRejectedWith(defaultWriterLockException('write to'));\n  }\n\n  const state = stream._state;\n  if (state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n  if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n    return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));\n  }\n  if (state === 'erroring') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  assert(state === 'writable');\n\n  const promise = WritableStreamAddWriteRequest(stream);\n\n  WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n\n  return promise;\n}\n\nconst closeSentinel: unique symbol = {} as any;\n\ntype QueueRecord<W> = W | typeof closeSentinel;\n\n/**\n * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.\n *\n * @public\n */\nexport class WritableStreamDefaultController<W = any> {\n  /** @internal */\n  _controlledWritableStream!: WritableStream<W>;\n  /** @internal */\n  _queue!: SimpleQueue<QueuePair<QueueRecord<W>>>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _strategySizeAlgorithm!: QueuingStrategySizeCallback<W>;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _writeAlgorithm!: (chunk: W) => Promise<void>;\n  /** @internal */\n  _closeAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _abortAlgorithm!: (reason: any) => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.\n   *\n   * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying\n   * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the\n   * normal lifecycle of interactions with the underlying sink.\n   */\n  error(e: any = undefined): void {\n    if (!IsWritableStreamDefaultController(this)) {\n      throw new TypeError(\n        'WritableStreamDefaultController.prototype.error can only be used on a WritableStreamDefaultController');\n    }\n    const state = this._controlledWritableStream._state;\n    if (state !== 'writable') {\n      // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n      // just treat it as a no-op.\n      return;\n    }\n\n    WritableStreamDefaultControllerError(this, e);\n  }\n\n  /** @internal */\n  [AbortSteps](reason: any) {\n    const result = this._abortAlgorithm(reason);\n    WritableStreamDefaultControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [ErrorSteps]() {\n    ResetQueue(this);\n  }\n}\n\nObject.defineProperties(WritableStreamDefaultController.prototype, {\n  error: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'WritableStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Abstract operations implementing interface required by the WritableStream.\n\nfunction IsWritableStreamDefaultController(x: any): x is WritableStreamDefaultController<any> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction SetUpWritableStreamDefaultController<W>(stream: WritableStream<W>,\n                                                 controller: WritableStreamDefaultController<W>,\n                                                 startAlgorithm: () => void | PromiseLike<void>,\n                                                 writeAlgorithm: (chunk: W) => Promise<void>,\n                                                 closeAlgorithm: () => Promise<void>,\n                                                 abortAlgorithm: (reason: any) => Promise<void>,\n                                                 highWaterMark: number,\n                                                 sizeAlgorithm: QueuingStrategySizeCallback<W>) {\n  assert(IsWritableStream(stream));\n  assert(stream._writableStreamController === undefined);\n\n  controller._controlledWritableStream = stream;\n  stream._writableStreamController = controller;\n\n  // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n  controller._queue = undefined!;\n  controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._started = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._writeAlgorithm = writeAlgorithm;\n  controller._closeAlgorithm = closeAlgorithm;\n  controller._abortAlgorithm = abortAlgorithm;\n\n  const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n  WritableStreamUpdateBackpressure(stream, backpressure);\n\n  const startResult = startAlgorithm();\n  const startPromise = promiseResolvedWith(startResult);\n  uponPromise(\n    startPromise,\n    () => {\n      assert(stream._state === 'writable' || stream._state === 'erroring');\n      controller._started = true;\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    },\n    r => {\n      assert(stream._state === 'writable' || stream._state === 'erroring');\n      controller._started = true;\n      WritableStreamDealWithRejection(stream, r);\n    }\n  );\n}\n\nfunction SetUpWritableStreamDefaultControllerFromUnderlyingSink<W>(stream: WritableStream<W>,\n                                                                   underlyingSink: ValidatedUnderlyingSink<W>,\n                                                                   highWaterMark: number,\n                                                                   sizeAlgorithm: QueuingStrategySizeCallback<W>) {\n  const controller = Object.create(WritableStreamDefaultController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let writeAlgorithm: (chunk: W) => Promise<void> = () => promiseResolvedWith(undefined);\n  let closeAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let abortAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingSink.start !== undefined) {\n    startAlgorithm = () => underlyingSink.start!(controller);\n  }\n  if (underlyingSink.write !== undefined) {\n    writeAlgorithm = chunk => underlyingSink.write!(chunk, controller);\n  }\n  if (underlyingSink.close !== undefined) {\n    closeAlgorithm = () => underlyingSink.close!();\n  }\n  if (underlyingSink.abort !== undefined) {\n    abortAlgorithm = reason => underlyingSink.abort!(reason);\n  }\n\n  SetUpWritableStreamDefaultController(\n    stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm\n  );\n}\n\n// ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\nfunction WritableStreamDefaultControllerClearAlgorithms(controller: WritableStreamDefaultController<any>) {\n  controller._writeAlgorithm = undefined!;\n  controller._closeAlgorithm = undefined!;\n  controller._abortAlgorithm = undefined!;\n  controller._strategySizeAlgorithm = undefined!;\n}\n\nfunction WritableStreamDefaultControllerClose<W>(controller: WritableStreamDefaultController<W>) {\n  EnqueueValueWithSize(controller, closeSentinel, 0);\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\nfunction WritableStreamDefaultControllerGetChunkSize<W>(controller: WritableStreamDefaultController<W>,\n                                                        chunk: W): number {\n  try {\n    return controller._strategySizeAlgorithm(chunk);\n  } catch (chunkSizeE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n    return 1;\n  }\n}\n\nfunction WritableStreamDefaultControllerGetDesiredSize(controller: WritableStreamDefaultController<any>): number {\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\nfunction WritableStreamDefaultControllerWrite<W>(controller: WritableStreamDefaultController<W>,\n                                                 chunk: W,\n                                                 chunkSize: number) {\n  try {\n    EnqueueValueWithSize(controller, chunk, chunkSize);\n  } catch (enqueueE) {\n    WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n    return;\n  }\n\n  const stream = controller._controlledWritableStream;\n  if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {\n    const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n    WritableStreamUpdateBackpressure(stream, backpressure);\n  }\n\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n}\n\n// Abstract operations for the WritableStreamDefaultController.\n\nfunction WritableStreamDefaultControllerAdvanceQueueIfNeeded<W>(controller: WritableStreamDefaultController<W>) {\n  const stream = controller._controlledWritableStream;\n\n  if (!controller._started) {\n    return;\n  }\n\n  if (stream._inFlightWriteRequest !== undefined) {\n    return;\n  }\n\n  const state = stream._state;\n  assert(state !== 'closed' && state !== 'errored');\n  if (state === 'erroring') {\n    WritableStreamFinishErroring(stream);\n    return;\n  }\n\n  if (controller._queue.length === 0) {\n    return;\n  }\n\n  const value = PeekQueueValue(controller);\n  if (value === closeSentinel) {\n    WritableStreamDefaultControllerProcessClose(controller);\n  } else {\n    WritableStreamDefaultControllerProcessWrite(controller, value);\n  }\n}\n\nfunction WritableStreamDefaultControllerErrorIfNeeded(controller: WritableStreamDefaultController<any>, error: any) {\n  if (controller._controlledWritableStream._state === 'writable') {\n    WritableStreamDefaultControllerError(controller, error);\n  }\n}\n\nfunction WritableStreamDefaultControllerProcessClose(controller: WritableStreamDefaultController<any>) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkCloseRequestInFlight(stream);\n\n  DequeueValue(controller);\n  assert(controller._queue.length === 0);\n\n  const sinkClosePromise = controller._closeAlgorithm();\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  uponPromise(\n    sinkClosePromise,\n    () => {\n      WritableStreamFinishInFlightClose(stream);\n    },\n    reason => {\n      WritableStreamFinishInFlightCloseWithError(stream, reason);\n    }\n  );\n}\n\nfunction WritableStreamDefaultControllerProcessWrite<W>(controller: WritableStreamDefaultController<W>, chunk: W) {\n  const stream = controller._controlledWritableStream;\n\n  WritableStreamMarkFirstWriteRequestInFlight(stream);\n\n  const sinkWritePromise = controller._writeAlgorithm(chunk);\n  uponPromise(\n    sinkWritePromise,\n    () => {\n      WritableStreamFinishInFlightWrite(stream);\n\n      const state = stream._state;\n      assert(state === 'writable' || state === 'erroring');\n\n      DequeueValue(controller);\n\n      if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {\n        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n        WritableStreamUpdateBackpressure(stream, backpressure);\n      }\n\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    },\n    reason => {\n      if (stream._state === 'writable') {\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n      }\n      WritableStreamFinishInFlightWriteWithError(stream, reason);\n    }\n  );\n}\n\nfunction WritableStreamDefaultControllerGetBackpressure(controller: WritableStreamDefaultController<any>): boolean {\n  const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n  return desiredSize <= 0;\n}\n\n// A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n\nfunction WritableStreamDefaultControllerError(controller: WritableStreamDefaultController<any>, error: any) {\n  const stream = controller._controlledWritableStream;\n\n  assert(stream._state === 'writable');\n\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  WritableStreamStartErroring(stream, error);\n}\n\n// Helper functions for the WritableStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);\n}\n\n// Helper functions for the WritableStreamDefaultWriter.\n\nfunction defaultWriterBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);\n}\n\nfunction defaultWriterLockException(name: string): TypeError {\n  return new TypeError('Cannot ' + name + ' a stream using a released writer');\n}\n\nfunction defaultWriterClosedPromiseInitialize(writer: WritableStreamDefaultWriter) {\n  writer._closedPromise = newPromise((resolve, reject) => {\n    writer._closedPromise_resolve = resolve;\n    writer._closedPromise_reject = reject;\n    writer._closedPromiseState = 'pending';\n  });\n}\n\nfunction defaultWriterClosedPromiseInitializeAsRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  defaultWriterClosedPromiseInitialize(writer);\n  defaultWriterClosedPromiseReject(writer, reason);\n}\n\nfunction defaultWriterClosedPromiseInitializeAsResolved(writer: WritableStreamDefaultWriter) {\n  defaultWriterClosedPromiseInitialize(writer);\n  defaultWriterClosedPromiseResolve(writer);\n}\n\nfunction defaultWriterClosedPromiseReject(writer: WritableStreamDefaultWriter, reason: any) {\n  if (writer._closedPromise_reject === undefined) {\n    return;\n  }\n  assert(writer._closedPromiseState === 'pending');\n\n  setPromiseIsHandledToTrue(writer._closedPromise);\n  writer._closedPromise_reject(reason);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'rejected';\n}\n\nfunction defaultWriterClosedPromiseResetToRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  assert(writer._closedPromise_resolve === undefined);\n  assert(writer._closedPromise_reject === undefined);\n  assert(writer._closedPromiseState !== 'pending');\n\n  defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n}\n\nfunction defaultWriterClosedPromiseResolve(writer: WritableStreamDefaultWriter) {\n  if (writer._closedPromise_resolve === undefined) {\n    return;\n  }\n  assert(writer._closedPromiseState === 'pending');\n\n  writer._closedPromise_resolve(undefined);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'resolved';\n}\n\nfunction defaultWriterReadyPromiseInitialize(writer: WritableStreamDefaultWriter) {\n  writer._readyPromise = newPromise((resolve, reject) => {\n    writer._readyPromise_resolve = resolve;\n    writer._readyPromise_reject = reject;\n  });\n  writer._readyPromiseState = 'pending';\n}\n\nfunction defaultWriterReadyPromiseInitializeAsRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  defaultWriterReadyPromiseInitialize(writer);\n  defaultWriterReadyPromiseReject(writer, reason);\n}\n\nfunction defaultWriterReadyPromiseInitializeAsResolved(writer: WritableStreamDefaultWriter) {\n  defaultWriterReadyPromiseInitialize(writer);\n  defaultWriterReadyPromiseResolve(writer);\n}\n\nfunction defaultWriterReadyPromiseReject(writer: WritableStreamDefaultWriter, reason: any) {\n  if (writer._readyPromise_reject === undefined) {\n    return;\n  }\n\n  setPromiseIsHandledToTrue(writer._readyPromise);\n  writer._readyPromise_reject(reason);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'rejected';\n}\n\nfunction defaultWriterReadyPromiseReset(writer: WritableStreamDefaultWriter) {\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  defaultWriterReadyPromiseInitialize(writer);\n}\n\nfunction defaultWriterReadyPromiseResetToRejected(writer: WritableStreamDefaultWriter, reason: any) {\n  assert(writer._readyPromise_resolve === undefined);\n  assert(writer._readyPromise_reject === undefined);\n\n  defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n}\n\nfunction defaultWriterReadyPromiseResolve(writer: WritableStreamDefaultWriter) {\n  if (writer._readyPromise_resolve === undefined) {\n    return;\n  }\n\n  writer._readyPromise_resolve(undefined);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'fulfilled';\n}\n","/// <reference lib=\"dom\" />\nexport const NativeDOMException: typeof DOMException | undefined = typeof DOMException !== 'undefined' ? DOMException : undefined;\n","/// <reference types=\"node\" />\nimport { NativeDOMException } from './native';\n\ndeclare class DOMExceptionClass extends Error {\n  constructor(message?: string, name?: string);\n\n  name: string;\n  message: string;\n}\n\ntype DOMException = DOMExceptionClass;\ntype DOMExceptionConstructor = typeof DOMExceptionClass;\n\nfunction isDOMExceptionConstructor(ctor: unknown): ctor is DOMExceptionConstructor {\n  if (!(typeof ctor === 'function' || typeof ctor === 'object')) {\n    return false;\n  }\n  try {\n    new (ctor as DOMExceptionConstructor)();\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction createDOMExceptionPolyfill(): DOMExceptionConstructor {\n  const ctor = function DOMException(this: DOMException, message?: string, name?: string) {\n    this.message = message || '';\n    this.name = name || 'Error';\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  } as any;\n  ctor.prototype = Object.create(Error.prototype);\n  Object.defineProperty(ctor.prototype, 'constructor', { value: ctor, writable: true, configurable: true });\n  return ctor;\n}\n\nconst DOMException: DOMExceptionConstructor =\n  isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();\n\nexport { DOMException };\n","import { IsReadableStream, IsReadableStreamLocked, ReadableStream, ReadableStreamCancel } from '../readable-stream';\nimport { AcquireReadableStreamDefaultReader, ReadableStreamDefaultReaderRead } from './default-reader';\nimport { ReadableStreamReaderGenericRelease } from './generic-reader';\nimport {\n  AcquireWritableStreamDefaultWriter,\n  IsWritableStream,\n  IsWritableStreamLocked,\n  WritableStream,\n  WritableStreamAbort,\n  WritableStreamCloseQueuedOrInFlight,\n  WritableStreamDefaultWriterCloseWithErrorPropagation,\n  WritableStreamDefaultWriterRelease,\n  WritableStreamDefaultWriterWrite\n} from '../writable-stream';\nimport assert from '../../stub/assert';\nimport {\n  newPromise,\n  PerformPromiseThen,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  uponFulfillment,\n  uponPromise,\n  uponRejection\n} from '../helpers/webidl';\nimport { noop } from '../../utils';\nimport { AbortSignal, isAbortSignal } from '../abort-signal';\nimport { DOMException } from '../../stub/dom-exception';\n\nexport function ReadableStreamPipeTo<T>(source: ReadableStream<T>,\n                                        dest: WritableStream<T>,\n                                        preventClose: boolean,\n                                        preventAbort: boolean,\n                                        preventCancel: boolean,\n                                        signal: AbortSignal | undefined): Promise<void> {\n  assert(IsReadableStream(source));\n  assert(IsWritableStream(dest));\n  assert(typeof preventClose === 'boolean');\n  assert(typeof preventAbort === 'boolean');\n  assert(typeof preventCancel === 'boolean');\n  assert(signal === undefined || isAbortSignal(signal));\n  assert(!IsReadableStreamLocked(source));\n  assert(!IsWritableStreamLocked(dest));\n\n  const reader = AcquireReadableStreamDefaultReader<T>(source);\n  const writer = AcquireWritableStreamDefaultWriter<T>(dest);\n\n  source._disturbed = true;\n\n  let shuttingDown = false;\n\n  // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n  let currentWrite = promiseResolvedWith<void>(undefined);\n\n  return newPromise((resolve, reject) => {\n    let abortAlgorithm: () => void;\n    if (signal !== undefined) {\n      abortAlgorithm = () => {\n        const error = new DOMException('Aborted', 'AbortError');\n        const actions: Array<() => Promise<void>> = [];\n        if (!preventAbort) {\n          actions.push(() => {\n            if (dest._state === 'writable') {\n              return WritableStreamAbort(dest, error);\n            }\n            return promiseResolvedWith(undefined);\n          });\n        }\n        if (!preventCancel) {\n          actions.push(() => {\n            if (source._state === 'readable') {\n              return ReadableStreamCancel(source, error);\n            }\n            return promiseResolvedWith(undefined);\n          });\n        }\n        shutdownWithAction(() => Promise.all(actions.map(action => action())), true, error);\n      };\n\n      if (signal.aborted) {\n        abortAlgorithm();\n        return;\n      }\n\n      signal.addEventListener('abort', abortAlgorithm);\n    }\n\n    // Using reader and writer, read all chunks from this and write them to dest\n    // - Backpressure must be enforced\n    // - Shutdown must stop all activity\n    function pipeLoop() {\n      return newPromise<void>((resolveLoop, rejectLoop) => {\n        function next(done: boolean) {\n          if (done) {\n            resolveLoop();\n          } else {\n            // Use `PerformPromiseThen` instead of `uponPromise` to avoid\n            // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers\n            PerformPromiseThen(pipeStep(), next, rejectLoop);\n          }\n        }\n\n        next(false);\n      });\n    }\n\n    function pipeStep(): Promise<boolean> {\n      if (shuttingDown) {\n        return promiseResolvedWith(true);\n      }\n\n      return PerformPromiseThen(writer._readyPromise, () => {\n        return newPromise<boolean>((resolveRead, rejectRead) => {\n          ReadableStreamDefaultReaderRead(\n            reader,\n            {\n              _chunkSteps: chunk => {\n                currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\n                resolveRead(false);\n              },\n              _closeSteps: () => resolveRead(true),\n              _errorSteps: rejectRead\n            }\n          );\n        });\n      });\n    }\n\n    // Errors must be propagated forward\n    isOrBecomesErrored(source, reader._closedPromise, storedError => {\n      if (!preventAbort) {\n        shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);\n      } else {\n        shutdown(true, storedError);\n      }\n    });\n\n    // Errors must be propagated backward\n    isOrBecomesErrored(dest, writer._closedPromise, storedError => {\n      if (!preventCancel) {\n        shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);\n      } else {\n        shutdown(true, storedError);\n      }\n    });\n\n    // Closing must be propagated forward\n    isOrBecomesClosed(source, reader._closedPromise, () => {\n      if (!preventClose) {\n        shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));\n      } else {\n        shutdown();\n      }\n    });\n\n    // Closing must be propagated backward\n    if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {\n      const destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');\n\n      if (!preventCancel) {\n        shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);\n      } else {\n        shutdown(true, destClosed);\n      }\n    }\n\n    setPromiseIsHandledToTrue(pipeLoop());\n\n    function waitForWritesToFinish(): Promise<void> {\n      // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n      // for that too.\n      const oldCurrentWrite = currentWrite;\n      return PerformPromiseThen(\n        currentWrite,\n        () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined\n      );\n    }\n\n    function isOrBecomesErrored(stream: ReadableStream | WritableStream,\n                                promise: Promise<void>,\n                                action: (reason: any) => void) {\n      if (stream._state === 'errored') {\n        action(stream._storedError);\n      } else {\n        uponRejection(promise, action);\n      }\n    }\n\n    function isOrBecomesClosed(stream: ReadableStream | WritableStream, promise: Promise<void>, action: () => void) {\n      if (stream._state === 'closed') {\n        action();\n      } else {\n        uponFulfillment(promise, action);\n      }\n    }\n\n    function shutdownWithAction(action: () => Promise<unknown>, originalIsError?: boolean, originalError?: any) {\n      if (shuttingDown) {\n        return;\n      }\n      shuttingDown = true;\n\n      if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n        uponFulfillment(waitForWritesToFinish(), doTheRest);\n      } else {\n        doTheRest();\n      }\n\n      function doTheRest() {\n        uponPromise(\n          action(),\n          () => finalize(originalIsError, originalError),\n          newError => finalize(true, newError)\n        );\n      }\n    }\n\n    function shutdown(isError?: boolean, error?: any) {\n      if (shuttingDown) {\n        return;\n      }\n      shuttingDown = true;\n\n      if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n        uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error));\n      } else {\n        finalize(isError, error);\n      }\n    }\n\n    function finalize(isError?: boolean, error?: any) {\n      WritableStreamDefaultWriterRelease(writer);\n      ReadableStreamReaderGenericRelease(reader);\n\n      if (signal !== undefined) {\n        signal.removeEventListener('abort', abortAlgorithm);\n      }\n      if (isError) {\n        reject(error);\n      } else {\n        resolve(undefined);\n      }\n    }\n  });\n}\n","import { QueuingStrategySizeCallback } from '../queuing-strategy';\nimport assert from '../../stub/assert';\nimport { DequeueValue, EnqueueValueWithSize, QueuePair, ResetQueue } from '../abstract-ops/queue-with-sizes';\nimport {\n  ReadableStreamAddReadRequest,\n  ReadableStreamFulfillReadRequest,\n  ReadableStreamGetNumReadRequests,\n  ReadRequest\n} from './default-reader';\nimport { SimpleQueue } from '../simple-queue';\nimport { IsReadableStreamLocked, ReadableStream, ReadableStreamClose, ReadableStreamError } from '../readable-stream';\nimport { ValidatedUnderlyingSource } from './underlying-source';\nimport { typeIsObject } from '../helpers/miscellaneous';\nimport { CancelSteps, PullSteps } from '../abstract-ops/internal-methods';\nimport { promiseResolvedWith, uponPromise } from '../helpers/webidl';\n\n/**\n * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.\n *\n * @public\n */\nexport class ReadableStreamDefaultController<R> {\n  /** @internal */\n  _controlledReadableStream!: ReadableStream<R>;\n  /** @internal */\n  _queue!: SimpleQueue<QueuePair<R>>;\n  /** @internal */\n  _queueTotalSize!: number;\n  /** @internal */\n  _started!: boolean;\n  /** @internal */\n  _closeRequested!: boolean;\n  /** @internal */\n  _pullAgain!: boolean;\n  /** @internal */\n  _pulling !: boolean;\n  /** @internal */\n  _strategySizeAlgorithm!: QueuingStrategySizeCallback<R>;\n  /** @internal */\n  _strategyHWM!: number;\n  /** @internal */\n  _pullAlgorithm!: () => Promise<void>;\n  /** @internal */\n  _cancelAlgorithm!: (reason: any) => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n   * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.\n   */\n  get desiredSize(): number | null {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    return ReadableStreamDefaultControllerGetDesiredSize(this);\n  }\n\n  /**\n   * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n   * the stream, but once those are read, the stream will become closed.\n   */\n  close(): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('close');\n    }\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n      throw new TypeError('The stream is not in a state that permits close');\n    }\n\n    ReadableStreamDefaultControllerClose(this);\n  }\n\n  /**\n   * Enqueues the given chunk `chunk` in the controlled readable stream.\n   */\n  enqueue(chunk: R): void;\n  enqueue(chunk: R = undefined!): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n      throw new TypeError('The stream is not in a state that permits enqueue');\n    }\n\n    return ReadableStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n   */\n  error(e: any = undefined): void {\n    if (!IsReadableStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    ReadableStreamDefaultControllerError(this, e);\n  }\n\n  /** @internal */\n  [CancelSteps](reason: any): Promise<void> {\n    ResetQueue(this);\n    const result = this._cancelAlgorithm(reason);\n    ReadableStreamDefaultControllerClearAlgorithms(this);\n    return result;\n  }\n\n  /** @internal */\n  [PullSteps](readRequest: ReadRequest<R>): void {\n    const stream = this._controlledReadableStream;\n\n    if (this._queue.length > 0) {\n      const chunk = DequeueValue(this);\n\n      if (this._closeRequested && this._queue.length === 0) {\n        ReadableStreamDefaultControllerClearAlgorithms(this);\n        ReadableStreamClose(stream);\n      } else {\n        ReadableStreamDefaultControllerCallPullIfNeeded(this);\n      }\n\n      readRequest._chunkSteps(chunk);\n    } else {\n      ReadableStreamAddReadRequest(stream, readRequest);\n      ReadableStreamDefaultControllerCallPullIfNeeded(this);\n    }\n  }\n}\n\nObject.defineProperties(ReadableStreamDefaultController.prototype, {\n  close: { enumerable: true },\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'ReadableStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Abstract operations for the ReadableStreamDefaultController.\n\nfunction IsReadableStreamDefaultController<R = any>(x: any): x is ReadableStreamDefaultController<R> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction ReadableStreamDefaultControllerCallPullIfNeeded(controller: ReadableStreamDefaultController<any>): void {\n  const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n  if (!shouldPull) {\n    return;\n  }\n\n  if (controller._pulling) {\n    controller._pullAgain = true;\n    return;\n  }\n\n  assert(!controller._pullAgain);\n\n  controller._pulling = true;\n\n  const pullPromise = controller._pullAlgorithm();\n  uponPromise(\n    pullPromise,\n    () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n      }\n    },\n    e => {\n      ReadableStreamDefaultControllerError(controller, e);\n    }\n  );\n}\n\nfunction ReadableStreamDefaultControllerShouldCallPull(controller: ReadableStreamDefaultController<any>): boolean {\n  const stream = controller._controlledReadableStream;\n\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return false;\n  }\n\n  if (!controller._started) {\n    return false;\n  }\n\n  if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    return true;\n  }\n\n  const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n  assert(desiredSize !== null);\n  if (desiredSize! > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction ReadableStreamDefaultControllerClearAlgorithms(controller: ReadableStreamDefaultController<any>) {\n  controller._pullAlgorithm = undefined!;\n  controller._cancelAlgorithm = undefined!;\n  controller._strategySizeAlgorithm = undefined!;\n}\n\n// A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n\nexport function ReadableStreamDefaultControllerClose(controller: ReadableStreamDefaultController<any>) {\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return;\n  }\n\n  const stream = controller._controlledReadableStream;\n\n  controller._closeRequested = true;\n\n  if (controller._queue.length === 0) {\n    ReadableStreamDefaultControllerClearAlgorithms(controller);\n    ReadableStreamClose(stream);\n  }\n}\n\nexport function ReadableStreamDefaultControllerEnqueue<R>(controller: ReadableStreamDefaultController<R>, chunk: R): void {\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n    return;\n  }\n\n  const stream = controller._controlledReadableStream;\n\n  if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n    ReadableStreamFulfillReadRequest(stream, chunk, false);\n  } else {\n    let chunkSize;\n    try {\n      chunkSize = controller._strategySizeAlgorithm(chunk);\n    } catch (chunkSizeE) {\n      ReadableStreamDefaultControllerError(controller, chunkSizeE);\n      throw chunkSizeE;\n    }\n\n    try {\n      EnqueueValueWithSize(controller, chunk, chunkSize);\n    } catch (enqueueE) {\n      ReadableStreamDefaultControllerError(controller, enqueueE);\n      throw enqueueE;\n    }\n  }\n\n  ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n}\n\nexport function ReadableStreamDefaultControllerError(controller: ReadableStreamDefaultController<any>, e: any) {\n  const stream = controller._controlledReadableStream;\n\n  if (stream._state !== 'readable') {\n    return;\n  }\n\n  ResetQueue(controller);\n\n  ReadableStreamDefaultControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n}\n\nexport function ReadableStreamDefaultControllerGetDesiredSize(controller: ReadableStreamDefaultController<any>): number | null {\n  const state = controller._controlledReadableStream._state;\n\n  if (state === 'errored') {\n    return null;\n  }\n  if (state === 'closed') {\n    return 0;\n  }\n\n  return controller._strategyHWM - controller._queueTotalSize;\n}\n\n// This is used in the implementation of TransformStream.\nexport function ReadableStreamDefaultControllerHasBackpressure(controller: ReadableStreamDefaultController<any>): boolean {\n  if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller: ReadableStreamDefaultController<any>): boolean {\n  const state = controller._controlledReadableStream._state;\n\n  if (!controller._closeRequested && state === 'readable') {\n    return true;\n  }\n\n  return false;\n}\n\nexport function SetUpReadableStreamDefaultController<R>(stream: ReadableStream<R>,\n                                                        controller: ReadableStreamDefaultController<R>,\n                                                        startAlgorithm: () => void | PromiseLike<void>,\n                                                        pullAlgorithm: () => Promise<void>,\n                                                        cancelAlgorithm: (reason: any) => Promise<void>,\n                                                        highWaterMark: number,\n                                                        sizeAlgorithm: QueuingStrategySizeCallback<R>) {\n  assert(stream._readableStreamController === undefined);\n\n  controller._controlledReadableStream = stream;\n\n  controller._queue = undefined!;\n  controller._queueTotalSize = undefined!;\n  ResetQueue(controller);\n\n  controller._started = false;\n  controller._closeRequested = false;\n  controller._pullAgain = false;\n  controller._pulling = false;\n\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n\n  stream._readableStreamController = controller;\n\n  const startResult = startAlgorithm();\n  uponPromise(\n    promiseResolvedWith(startResult),\n    () => {\n      controller._started = true;\n\n      assert(!controller._pulling);\n      assert(!controller._pullAgain);\n\n      ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n    },\n    r => {\n      ReadableStreamDefaultControllerError(controller, r);\n    }\n  );\n}\n\nexport function SetUpReadableStreamDefaultControllerFromUnderlyingSource<R>(\n  stream: ReadableStream<R>,\n  underlyingSource: ValidatedUnderlyingSource<R>,\n  highWaterMark: number,\n  sizeAlgorithm: QueuingStrategySizeCallback<R>\n) {\n  const controller: ReadableStreamDefaultController<R> = Object.create(ReadableStreamDefaultController.prototype);\n\n  let startAlgorithm: () => void | PromiseLike<void> = () => undefined;\n  let pullAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n  let cancelAlgorithm: (reason: any) => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (underlyingSource.start !== undefined) {\n    startAlgorithm = () => underlyingSource.start!(controller);\n  }\n  if (underlyingSource.pull !== undefined) {\n    pullAlgorithm = () => underlyingSource.pull!(controller);\n  }\n  if (underlyingSource.cancel !== undefined) {\n    cancelAlgorithm = reason => underlyingSource.cancel!(reason);\n  }\n\n  SetUpReadableStreamDefaultController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm\n  );\n}\n\n// Helper functions for the ReadableStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);\n}\n","import { assertDictionary, assertFunction, convertUnsignedLongLongWithEnforceRange } from './basic';\nimport {\n  ReadableStreamController,\n  UnderlyingByteSource,\n  UnderlyingDefaultOrByteSource,\n  UnderlyingDefaultOrByteSourcePullCallback,\n  UnderlyingDefaultOrByteSourceStartCallback,\n  UnderlyingSource,\n  UnderlyingSourceCancelCallback,\n  ValidatedUnderlyingDefaultOrByteSource\n} from '../readable-stream/underlying-source';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\n\nexport function convertUnderlyingDefaultOrByteSource<R>(\n  source: UnderlyingSource<R> | UnderlyingByteSource | null,\n  context: string\n): ValidatedUnderlyingDefaultOrByteSource<R> {\n  assertDictionary(source, context);\n  const original = source as (UnderlyingDefaultOrByteSource<R> | null);\n  const autoAllocateChunkSize = original?.autoAllocateChunkSize;\n  const cancel = original?.cancel;\n  const pull = original?.pull;\n  const start = original?.start;\n  const type = original?.type;\n  return {\n    autoAllocateChunkSize: autoAllocateChunkSize === undefined ?\n      undefined :\n      convertUnsignedLongLongWithEnforceRange(\n        autoAllocateChunkSize,\n        `${context} has member 'autoAllocateChunkSize' that`\n      ),\n    cancel: cancel === undefined ?\n      undefined :\n      convertUnderlyingSourceCancelCallback(cancel, original!, `${context} has member 'cancel' that`),\n    pull: pull === undefined ?\n      undefined :\n      convertUnderlyingSourcePullCallback(pull, original!, `${context} has member 'pull' that`),\n    start: start === undefined ?\n      undefined :\n      convertUnderlyingSourceStartCallback(start, original!, `${context} has member 'start' that`),\n    type: type === undefined ? undefined : convertReadableStreamType(type, `${context} has member 'type' that`)\n  };\n}\n\nfunction convertUnderlyingSourceCancelCallback(\n  fn: UnderlyingSourceCancelCallback,\n  original: UnderlyingDefaultOrByteSource,\n  context: string\n): (reason: any) => Promise<void> {\n  assertFunction(fn, context);\n  return (reason: any) => promiseCall(fn, original, [reason]);\n}\n\nfunction convertUnderlyingSourcePullCallback<R>(\n  fn: UnderlyingDefaultOrByteSourcePullCallback<R>,\n  original: UnderlyingDefaultOrByteSource<R>,\n  context: string\n): (controller: ReadableStreamController<R>) => Promise<void> {\n  assertFunction(fn, context);\n  return (controller: ReadableStreamController<R>) => promiseCall(fn, original, [controller]);\n}\n\nfunction convertUnderlyingSourceStartCallback<R>(\n  fn: UnderlyingDefaultOrByteSourceStartCallback<R>,\n  original: UnderlyingDefaultOrByteSource<R>,\n  context: string\n): UnderlyingDefaultOrByteSourceStartCallback<R> {\n  assertFunction(fn, context);\n  return (controller: ReadableStreamController<R>) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertReadableStreamType(type: string, context: string): 'bytes' {\n  type = `${type}`;\n  if (type !== 'bytes') {\n    throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);\n  }\n  return type;\n}\n","import { assertDictionary } from './basic';\nimport { ReadableStreamGetReaderOptions } from '../readable-stream/reader-options';\n\nexport function convertReaderOptions(options: ReadableStreamGetReaderOptions | null | undefined,\n                                     context: string): ReadableStreamGetReaderOptions {\n  assertDictionary(options, context);\n  const mode = options?.mode;\n  return {\n    mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)\n  };\n}\n\nfunction convertReadableStreamReaderMode(mode: string, context: string): 'byob' {\n  mode = `${mode}`;\n  if (mode !== 'byob') {\n    throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);\n  }\n  return mode;\n}\n","import { assertDictionary } from './basic';\nimport {\n  ReadableStreamIteratorOptions,\n  ValidatedReadableStreamIteratorOptions\n} from '../readable-stream/iterator-options';\n\nexport function convertIteratorOptions(options: ReadableStreamIteratorOptions | null | undefined,\n                                       context: string): ValidatedReadableStreamIteratorOptions {\n  assertDictionary(options, context);\n  const preventCancel = options?.preventCancel;\n  return { preventCancel: Boolean(preventCancel) };\n}\n","import { assertDictionary } from './basic';\nimport { StreamPipeOptions, ValidatedStreamPipeOptions } from '../readable-stream/pipe-options';\nimport { AbortSignal, isAbortSignal } from '../abort-signal';\n\nexport function convertPipeOptions(options: StreamPipeOptions | null | undefined,\n                                   context: string): ValidatedStreamPipeOptions {\n  assertDictionary(options, context);\n  const preventAbort = options?.preventAbort;\n  const preventCancel = options?.preventCancel;\n  const preventClose = options?.preventClose;\n  const signal = options?.signal;\n  if (signal !== undefined) {\n    assertAbortSignal(signal, `${context} has member 'signal' that`);\n  }\n  return {\n    preventAbort: Boolean(preventAbort),\n    preventCancel: Boolean(preventCancel),\n    preventClose: Boolean(preventClose),\n    signal\n  };\n}\n\nfunction assertAbortSignal(signal: unknown, context: string): asserts signal is AbortSignal {\n  if (!isAbortSignal(signal)) {\n    throw new TypeError(`${context} is not an AbortSignal.`);\n  }\n}\n","/**\n * A signal object that allows you to communicate with a request and abort it if required\n * via its associated `AbortController` object.\n *\n * @remarks\n *   This interface is compatible with the `AbortSignal` interface defined in TypeScript's DOM types.\n *   It is redefined here, so it can be polyfilled without a DOM, for example with\n *   {@link https://www.npmjs.com/package/abortcontroller-polyfill | abortcontroller-polyfill} in a Node environment.\n *\n * @public\n */\nexport interface AbortSignal {\n  /**\n   * Whether the request is aborted.\n   */\n  readonly aborted: boolean;\n\n  /**\n   * Add an event listener to be triggered when this signal becomes aborted.\n   */\n  addEventListener(type: 'abort', listener: () => void): void;\n\n  /**\n   * Remove an event listener that was previously added with {@link AbortSignal.addEventListener}.\n   */\n  removeEventListener(type: 'abort', listener: () => void): void;\n}\n\nexport function isAbortSignal(value: unknown): value is AbortSignal {\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  }\n  try {\n    return typeof (value as AbortSignal).aborted === 'boolean';\n  } catch {\n    // AbortSignal.prototype.aborted throws if its brand check fails\n    return false;\n  }\n}\n","import { assertDictionary, assertRequiredField } from './basic';\nimport { ReadableWritablePair } from '../readable-stream/readable-writable-pair';\nimport { assertReadableStream } from './readable-stream';\nimport { assertWritableStream } from './writable-stream';\n\nexport function convertReadableWritablePair<R, W>(pair: ReadableWritablePair<R, W> | null | undefined,\n                                                  context: string): ReadableWritablePair<R, W> {\n  assertDictionary(pair, context);\n\n  const readable = pair?.readable;\n  assertRequiredField(readable, 'readable', 'ReadableWritablePair');\n  assertReadableStream(readable, `${context} has member 'readable' that`);\n\n  const writable = pair?.writable;\n  assertRequiredField(writable, 'writable', 'ReadableWritablePair');\n  assertWritableStream(writable, `${context} has member 'writable' that`);\n\n  return { readable, writable };\n}\n","import assert from '../stub/assert';\nimport {\n  promiseRejectedWith,\n  promiseResolvedWith,\n  setPromiseIsHandledToTrue,\n  transformPromiseWith\n} from './helpers/webidl';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { AcquireReadableStreamAsyncIterator, ReadableStreamAsyncIterator } from './readable-stream/async-iterator';\nimport { defaultReaderClosedPromiseReject, defaultReaderClosedPromiseResolve } from './readable-stream/generic-reader';\nimport {\n  AcquireReadableStreamDefaultReader,\n  IsReadableStreamDefaultReader,\n  ReadableStreamDefaultReader,\n  ReadableStreamDefaultReadResult\n} from './readable-stream/default-reader';\nimport {\n  AcquireReadableStreamBYOBReader,\n  IsReadableStreamBYOBReader,\n  ReadableStreamBYOBReader,\n  ReadableStreamBYOBReadResult\n} from './readable-stream/byob-reader';\nimport { ReadableStreamPipeTo } from './readable-stream/pipe';\nimport { ReadableStreamTee } from './readable-stream/tee';\nimport { IsWritableStream, IsWritableStreamLocked, WritableStream } from './writable-stream';\nimport NumberIsInteger from '../stub/number-isinteger';\nimport { SimpleQueue } from './simple-queue';\nimport {\n  ReadableByteStreamController,\n  ReadableStreamBYOBRequest,\n  SetUpReadableByteStreamController,\n  SetUpReadableByteStreamControllerFromUnderlyingSource\n} from './readable-stream/byte-stream-controller';\nimport {\n  ReadableStreamDefaultController,\n  SetUpReadableStreamDefaultController,\n  SetUpReadableStreamDefaultControllerFromUnderlyingSource\n} from './readable-stream/default-controller';\nimport {\n  UnderlyingByteSource,\n  UnderlyingByteSourcePullCallback,\n  UnderlyingByteSourceStartCallback,\n  UnderlyingSource,\n  UnderlyingSourceCancelCallback,\n  UnderlyingSourcePullCallback,\n  UnderlyingSourceStartCallback\n} from './readable-stream/underlying-source';\nimport { noop } from '../utils';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { CreateArrayFromList } from './abstract-ops/ecmascript';\nimport { CancelSteps } from './abstract-ops/internal-methods';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { assertObject, assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport { convertUnderlyingDefaultOrByteSource } from './validators/underlying-source';\nimport { ReadableStreamGetReaderOptions } from './readable-stream/reader-options';\nimport { convertReaderOptions } from './validators/reader-options';\nimport { StreamPipeOptions, ValidatedStreamPipeOptions } from './readable-stream/pipe-options';\nimport { ReadableStreamIteratorOptions } from './readable-stream/iterator-options';\nimport { convertIteratorOptions } from './validators/iterator-options';\nimport { convertPipeOptions } from './validators/pipe-options';\nimport { ReadableWritablePair } from './readable-stream/readable-writable-pair';\nimport { convertReadableWritablePair } from './validators/readable-writable-pair';\n\nexport type ReadableByteStream = ReadableStream<Uint8Array>;\n\ntype ReadableStreamState = 'readable' | 'closed' | 'errored';\n\n/**\n * A readable stream represents a source of data, from which you can read.\n *\n * @public\n */\nexport class ReadableStream<R = any> {\n  /** @internal */\n  _state!: ReadableStreamState;\n  /** @internal */\n  _reader: ReadableStreamReader<R> | undefined;\n  /** @internal */\n  _storedError: any;\n  /** @internal */\n  _disturbed!: boolean;\n  /** @internal */\n  _readableStreamController!: ReadableStreamDefaultController<R> | ReadableByteStreamController;\n\n  constructor(underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number; size?: undefined });\n  constructor(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>);\n  constructor(rawUnderlyingSource: UnderlyingSource<R> | UnderlyingByteSource | null | undefined = {},\n              rawStrategy: QueuingStrategy<R> | null | undefined = {}) {\n    if (rawUnderlyingSource === undefined) {\n      rawUnderlyingSource = null;\n    } else {\n      assertObject(rawUnderlyingSource, 'First parameter');\n    }\n\n    const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n    const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');\n\n    InitializeReadableStream(this);\n\n    if (underlyingSource.type === 'bytes') {\n      if (strategy.size !== undefined) {\n        throw new RangeError('The strategy for a byte stream cannot have a size function');\n      }\n      const highWaterMark = ExtractHighWaterMark(strategy, 0);\n      SetUpReadableByteStreamControllerFromUnderlyingSource(\n        this as unknown as ReadableByteStream,\n        underlyingSource,\n        highWaterMark\n      );\n    } else {\n      assert(underlyingSource.type === undefined);\n      const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n      const highWaterMark = ExtractHighWaterMark(strategy, 1);\n      SetUpReadableStreamDefaultControllerFromUnderlyingSource(\n        this,\n        underlyingSource,\n        highWaterMark,\n        sizeAlgorithm\n      );\n    }\n  }\n\n  /**\n   * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.\n   */\n  get locked(): boolean {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('locked');\n    }\n\n    return IsReadableStreamLocked(this);\n  }\n\n  /**\n   * Cancels the stream, signaling a loss of interest in the stream by a consumer.\n   *\n   * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}\n   * method, which might or might not use it.\n   */\n  cancel(reason: any = undefined): Promise<void> {\n    if (!IsReadableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('cancel'));\n    }\n\n    if (IsReadableStreamLocked(this)) {\n      return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));\n    }\n\n    return ReadableStreamCancel(this, reason);\n  }\n\n  /**\n   * Creates a {@link ReadableStreamBYOBReader} and locks the stream to the new reader.\n   *\n   * This call behaves the same way as the no-argument variant, except that it only works on readable byte streams,\n   * i.e. streams which were constructed specifically with the ability to handle \"bring your own buffer\" reading.\n   * The returned BYOB reader provides the ability to directly read individual chunks from the stream via its\n   * {@link ReadableStreamBYOBReader.read | read()} method, into developer-supplied buffers, allowing more precise\n   * control over allocation.\n   */\n  getReader({ mode }: { mode: 'byob' }): ReadableStreamBYOBReader;\n  /**\n   * Creates a {@link ReadableStreamDefaultReader} and locks the stream to the new reader.\n   * While the stream is locked, no other reader can be acquired until this one is released.\n   *\n   * This functionality is especially useful for creating abstractions that desire the ability to consume a stream\n   * in its entirety. By getting a reader for the stream, you can ensure nobody else can interleave reads with yours\n   * or cancel the stream, which would interfere with your abstraction.\n   */\n  getReader(): ReadableStreamDefaultReader<R>;\n  getReader(\n    rawOptions: ReadableStreamGetReaderOptions | null | undefined = undefined\n  ): ReadableStreamDefaultReader<R> | ReadableStreamBYOBReader {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('getReader');\n    }\n\n    const options = convertReaderOptions(rawOptions, 'First parameter');\n\n    if (options.mode === undefined) {\n      return AcquireReadableStreamDefaultReader(this);\n    }\n\n    assert(options.mode === 'byob');\n    return AcquireReadableStreamBYOBReader(this as unknown as ReadableByteStream);\n  }\n\n  /**\n   * Provides a convenient, chainable way of piping this readable stream through a transform stream\n   * (or any other `{ writable, readable }` pair). It simply {@link ReadableStream.pipeTo | pipes} the stream\n   * into the writable side of the supplied pair, and returns the readable side for further use.\n   *\n   * Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.\n   */\n  pipeThrough<T>(transform: ReadableWritablePair<T, R>, options?: StreamPipeOptions): ReadableStream<T>;\n  pipeThrough<T>(rawTransform: ReadableWritablePair<T, R> | null | undefined,\n                 rawOptions: StreamPipeOptions | null | undefined = {}): ReadableStream<T> {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('pipeThrough');\n    }\n    assertRequiredArgument(rawTransform, 1, 'pipeThrough');\n\n    const transform = convertReadableWritablePair(rawTransform, 'First parameter');\n    const options = convertPipeOptions(rawOptions, 'Second parameter');\n\n    if (IsReadableStreamLocked(this)) {\n      throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');\n    }\n    if (IsWritableStreamLocked(transform.writable)) {\n      throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');\n    }\n\n    const promise = ReadableStreamPipeTo(\n      this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal\n    );\n\n    setPromiseIsHandledToTrue(promise);\n\n    return transform.readable;\n  }\n\n  /**\n   * Pipes this readable stream to a given writable stream. The way in which the piping process behaves under\n   * various error conditions can be customized with a number of passed options. It returns a promise that fulfills\n   * when the piping process completes successfully, or rejects if any errors were encountered.\n   *\n   * Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.\n   */\n  pipeTo(destination: WritableStream<R>, options?: StreamPipeOptions): Promise<void>;\n  pipeTo(destination: WritableStream<R> | null | undefined,\n         rawOptions: StreamPipeOptions | null | undefined = {}): Promise<void> {\n    if (!IsReadableStream(this)) {\n      return promiseRejectedWith(streamBrandCheckException('pipeTo'));\n    }\n\n    if (destination === undefined) {\n      return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);\n    }\n    if (!IsWritableStream(destination)) {\n      return promiseRejectedWith(\n        new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`)\n      );\n    }\n\n    let options: ValidatedStreamPipeOptions;\n    try {\n      options = convertPipeOptions(rawOptions, 'Second parameter');\n    } catch (e) {\n      return promiseRejectedWith(e);\n    }\n\n    if (IsReadableStreamLocked(this)) {\n      return promiseRejectedWith(\n        new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream')\n      );\n    }\n    if (IsWritableStreamLocked(destination)) {\n      return promiseRejectedWith(\n        new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream')\n      );\n    }\n\n    return ReadableStreamPipeTo<R>(\n      this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal\n    );\n  }\n\n  /**\n   * Tees this readable stream, returning a two-element array containing the two resulting branches as\n   * new {@link ReadableStream} instances.\n   *\n   * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.\n   * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be\n   * propagated to the stream's underlying source.\n   *\n   * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,\n   * this could allow interference between the two branches.\n   */\n  tee(): [ReadableStream<R>, ReadableStream<R>] {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('tee');\n    }\n\n    const branches = ReadableStreamTee(this, false);\n    return CreateArrayFromList(branches);\n  }\n\n  /**\n   * Asynchronously iterates over the chunks in the stream's internal queue.\n   *\n   * Asynchronously iterating over the stream will lock it, preventing any other consumer from acquiring a reader.\n   * The lock will be released if the async iterator's {@link ReadableStreamAsyncIterator.return | return()} method\n   * is called, e.g. by breaking out of the loop.\n   *\n   * By default, calling the async iterator's {@link ReadableStreamAsyncIterator.return | return()} method will also\n   * cancel the stream. To prevent this, use the stream's {@link ReadableStream.values | values()} method, passing\n   * `true` for the `preventCancel` option.\n   */\n  values(options?: ReadableStreamIteratorOptions): ReadableStreamAsyncIterator<R>;\n  values(rawOptions: ReadableStreamIteratorOptions | null | undefined = undefined): ReadableStreamAsyncIterator<R> {\n    if (!IsReadableStream(this)) {\n      throw streamBrandCheckException('values');\n    }\n\n    const options = convertIteratorOptions(rawOptions, 'First parameter');\n    return AcquireReadableStreamAsyncIterator<R>(this, options.preventCancel);\n  }\n\n  /**\n   * {@inheritDoc ReadableStream.values}\n   */\n  [Symbol.asyncIterator]: (options?: ReadableStreamIteratorOptions) => ReadableStreamAsyncIterator<R>;\n}\n\nObject.defineProperties(ReadableStream.prototype, {\n  cancel: { enumerable: true },\n  getReader: { enumerable: true },\n  pipeThrough: { enumerable: true },\n  pipeTo: { enumerable: true },\n  tee: { enumerable: true },\n  values: { enumerable: true },\n  locked: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStream.prototype, Symbol.toStringTag, {\n    value: 'ReadableStream',\n    configurable: true\n  });\n}\nif (typeof Symbol.asyncIterator === 'symbol') {\n  Object.defineProperty(ReadableStream.prototype, Symbol.asyncIterator, {\n    value: ReadableStream.prototype.values,\n    writable: true,\n    configurable: true\n  });\n}\n\nexport {\n  ReadableStreamAsyncIterator,\n  ReadableStreamDefaultReadResult,\n  ReadableStreamBYOBReadResult,\n  UnderlyingByteSource,\n  UnderlyingSource,\n  UnderlyingSourceStartCallback,\n  UnderlyingSourcePullCallback,\n  UnderlyingSourceCancelCallback,\n  UnderlyingByteSourceStartCallback,\n  UnderlyingByteSourcePullCallback,\n  StreamPipeOptions,\n  ReadableWritablePair,\n  ReadableStreamIteratorOptions\n};\n\n// Abstract operations for the ReadableStream.\n\n// Throws if and only if startAlgorithm throws.\nexport function CreateReadableStream<R>(startAlgorithm: () => void | PromiseLike<void>,\n                                        pullAlgorithm: () => Promise<void>,\n                                        cancelAlgorithm: (reason: any) => Promise<void>,\n                                        highWaterMark = 1,\n                                        sizeAlgorithm: QueuingStrategySizeCallback<R> = () => 1): ReadableStream<R> {\n  assert(IsNonNegativeNumber(highWaterMark));\n\n  const stream: ReadableStream<R> = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller: ReadableStreamDefaultController<R> = Object.create(ReadableStreamDefaultController.prototype);\n  SetUpReadableStreamDefaultController(\n    stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm\n  );\n\n  return stream;\n}\n\n// Throws if and only if startAlgorithm throws.\nexport function CreateReadableByteStream(startAlgorithm: () => void | PromiseLike<void>,\n                                         pullAlgorithm: () => Promise<void>,\n                                         cancelAlgorithm: (reason: any) => Promise<void>,\n                                         highWaterMark = 0,\n                                         autoAllocateChunkSize: number | undefined = undefined): ReadableStream<Uint8Array> {\n  assert(IsNonNegativeNumber(highWaterMark));\n  if (autoAllocateChunkSize !== undefined) {\n    assert(NumberIsInteger(autoAllocateChunkSize));\n    assert(autoAllocateChunkSize > 0);\n  }\n\n  const stream: ReadableStream<Uint8Array> = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n\n  const controller: ReadableByteStreamController = Object.create(ReadableByteStreamController.prototype);\n\n  SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark,\n                                    autoAllocateChunkSize);\n\n  return stream;\n}\n\nfunction InitializeReadableStream(stream: ReadableStream) {\n  stream._state = 'readable';\n  stream._reader = undefined;\n  stream._storedError = undefined;\n  stream._disturbed = false;\n}\n\nexport function IsReadableStream(x: unknown): x is ReadableStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function IsReadableStreamDisturbed(stream: ReadableStream): boolean {\n  assert(IsReadableStream(stream));\n\n  return stream._disturbed;\n}\n\nexport function IsReadableStreamLocked(stream: ReadableStream): boolean {\n  assert(IsReadableStream(stream));\n\n  if (stream._reader === undefined) {\n    return false;\n  }\n\n  return true;\n}\n\n// ReadableStream API exposed for controllers.\n\nexport function ReadableStreamCancel<R>(stream: ReadableStream<R>, reason: any): Promise<void> {\n  stream._disturbed = true;\n\n  if (stream._state === 'closed') {\n    return promiseResolvedWith(undefined);\n  }\n  if (stream._state === 'errored') {\n    return promiseRejectedWith(stream._storedError);\n  }\n\n  ReadableStreamClose(stream);\n\n  const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n  return transformPromiseWith(sourceCancelPromise, noop);\n}\n\nexport function ReadableStreamClose<R>(stream: ReadableStream<R>): void {\n  assert(stream._state === 'readable');\n\n  stream._state = 'closed';\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return;\n  }\n\n  if (IsReadableStreamDefaultReader<R>(reader)) {\n    reader._readRequests.forEach(readRequest => {\n      readRequest._closeSteps();\n    });\n    reader._readRequests = new SimpleQueue();\n  }\n\n  defaultReaderClosedPromiseResolve(reader);\n}\n\nexport function ReadableStreamError<R>(stream: ReadableStream<R>, e: any): void {\n  assert(IsReadableStream(stream));\n  assert(stream._state === 'readable');\n\n  stream._state = 'errored';\n  stream._storedError = e;\n\n  const reader = stream._reader;\n\n  if (reader === undefined) {\n    return;\n  }\n\n  if (IsReadableStreamDefaultReader<R>(reader)) {\n    reader._readRequests.forEach(readRequest => {\n      readRequest._errorSteps(e);\n    });\n\n    reader._readRequests = new SimpleQueue();\n  } else {\n    assert(IsReadableStreamBYOBReader(reader));\n\n    reader._readIntoRequests.forEach(readIntoRequest => {\n      readIntoRequest._errorSteps(e);\n    });\n\n    reader._readIntoRequests = new SimpleQueue();\n  }\n\n  defaultReaderClosedPromiseReject(reader, e);\n}\n\n// Readers\n\nexport type ReadableStreamReader<R> = ReadableStreamDefaultReader<R> | ReadableStreamBYOBReader;\n\nexport {\n  ReadableStreamDefaultReader,\n  ReadableStreamBYOBReader\n};\n\n// Controllers\n\nexport {\n  ReadableStreamDefaultController,\n  ReadableStreamBYOBRequest,\n  ReadableByteStreamController\n};\n\n// Helper functions for the ReadableStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);\n}\n","import { CreateReadableStream, IsReadableStream, ReadableStream, ReadableStreamCancel } from '../readable-stream';\nimport { AcquireReadableStreamDefaultReader, ReadableStreamDefaultReaderRead, ReadRequest } from './default-reader';\nimport assert from '../../stub/assert';\nimport { newPromise, promiseResolvedWith, queueMicrotask, uponRejection } from '../helpers/webidl';\nimport {\n  ReadableStreamDefaultController,\n  ReadableStreamDefaultControllerClose,\n  ReadableStreamDefaultControllerEnqueue,\n  ReadableStreamDefaultControllerError\n} from './default-controller';\nimport { CreateArrayFromList } from '../abstract-ops/ecmascript';\n\nexport function ReadableStreamTee<R>(stream: ReadableStream<R>,\n                                     cloneForBranch2: boolean): [ReadableStream<R>, ReadableStream<R>] {\n  assert(IsReadableStream(stream));\n  assert(typeof cloneForBranch2 === 'boolean');\n\n  const reader = AcquireReadableStreamDefaultReader<R>(stream);\n\n  let reading = false;\n  let canceled1 = false;\n  let canceled2 = false;\n  let reason1: any;\n  let reason2: any;\n  let branch1: ReadableStream<R>;\n  let branch2: ReadableStream<R>;\n\n  let resolveCancelPromise: (reason: any) => void;\n  const cancelPromise = newPromise<any>(resolve => {\n    resolveCancelPromise = resolve;\n  });\n\n  function pullAlgorithm(): Promise<void> {\n    if (reading) {\n      return promiseResolvedWith(undefined);\n    }\n\n    reading = true;\n\n    const readRequest: ReadRequest<R> = {\n      _chunkSteps: value => {\n        // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n        // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n        // successful synchronously-available reads get ahead of asynchronously-available errors.\n        queueMicrotask(() => {\n          reading = false;\n          const value1 = value;\n          const value2 = value;\n\n          // There is no way to access the cloning code right now in the reference implementation.\n          // If we add one then we'll need an implementation for serializable objects.\n          // if (!canceled2 && cloneForBranch2) {\n          //   value2 = StructuredDeserialize(StructuredSerialize(value2));\n          // }\n\n          if (!canceled1) {\n            ReadableStreamDefaultControllerEnqueue(\n              branch1._readableStreamController as ReadableStreamDefaultController<R>,\n              value1\n            );\n          }\n\n          if (!canceled2) {\n            ReadableStreamDefaultControllerEnqueue(\n              branch2._readableStreamController as ReadableStreamDefaultController<R>,\n              value2\n            );\n          }\n\n          resolveCancelPromise(undefined);\n        });\n      },\n      _closeSteps: () => {\n        reading = false;\n        if (!canceled1) {\n          ReadableStreamDefaultControllerClose(branch1._readableStreamController as ReadableStreamDefaultController<R>);\n        }\n        if (!canceled2) {\n          ReadableStreamDefaultControllerClose(branch2._readableStreamController as ReadableStreamDefaultController<R>);\n        }\n      },\n      _errorSteps: () => {\n        reading = false;\n      }\n    };\n    ReadableStreamDefaultReaderRead(reader, readRequest);\n\n    return promiseResolvedWith(undefined);\n  }\n\n  function cancel1Algorithm(reason: any): Promise<void> {\n    canceled1 = true;\n    reason1 = reason;\n    if (canceled2) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function cancel2Algorithm(reason: any): Promise<void> {\n    canceled2 = true;\n    reason2 = reason;\n    if (canceled1) {\n      const compositeReason = CreateArrayFromList([reason1, reason2]);\n      const cancelResult = ReadableStreamCancel(stream, compositeReason);\n      resolveCancelPromise(cancelResult);\n    }\n    return cancelPromise;\n  }\n\n  function startAlgorithm() {\n    // do nothing\n  }\n\n  branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n  branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n\n  uponRejection(reader._closedPromise, (r: any) => {\n    ReadableStreamDefaultControllerError(branch1._readableStreamController as ReadableStreamDefaultController<R>, r);\n    ReadableStreamDefaultControllerError(branch2._readableStreamController as ReadableStreamDefaultController<R>, r);\n    resolveCancelPromise(undefined);\n  });\n\n  return [branch1, branch2];\n}\n","import { QueuingStrategyInit } from '../queuing-strategy';\nimport { assertDictionary, assertRequiredField, convertUnrestrictedDouble } from './basic';\n\nexport function convertQueuingStrategyInit(init: QueuingStrategyInit | null | undefined,\n                                           context: string): QueuingStrategyInit {\n  assertDictionary(init, context);\n  const highWaterMark = init?.highWaterMark;\n  assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');\n  return {\n    highWaterMark: convertUnrestrictedDouble(highWaterMark)\n  };\n}\n","import { QueuingStrategy, QueuingStrategyInit } from './queuing-strategy';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategyInit } from './validators/queuing-strategy-init';\n\nconst byteLengthSizeFunction = function size(chunk: ArrayBufferView): number {\n  return chunk.byteLength;\n};\n\n/**\n * A queuing strategy that counts the number of bytes in each chunk.\n *\n * @public\n */\nexport default class ByteLengthQueuingStrategy implements QueuingStrategy<ArrayBufferView> {\n  /** @internal */\n  readonly _byteLengthQueuingStrategyHighWaterMark: number;\n\n  constructor(options: QueuingStrategyInit) {\n    assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');\n    options = convertQueuingStrategyInit(options, 'First parameter');\n    this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n  }\n\n  /**\n   * Returns the high water mark provided to the constructor.\n   */\n  get highWaterMark(): number {\n    if (!IsByteLengthQueuingStrategy(this)) {\n      throw byteLengthBrandCheckException('highWaterMark');\n    }\n    return this._byteLengthQueuingStrategyHighWaterMark;\n  }\n\n  /**\n   * Measures the size of `chunk` by returning the value of its `byteLength` property.\n   */\n  get size(): (chunk: ArrayBufferView) => number {\n    if (!IsByteLengthQueuingStrategy(this)) {\n      throw byteLengthBrandCheckException('size');\n    }\n    return byteLengthSizeFunction;\n  }\n}\n\nObject.defineProperties(ByteLengthQueuingStrategy.prototype, {\n  highWaterMark: { enumerable: true },\n  size: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(ByteLengthQueuingStrategy.prototype, Symbol.toStringTag, {\n    value: 'ByteLengthQueuingStrategy',\n    configurable: true\n  });\n}\n\n// Helper functions for the ByteLengthQueuingStrategy.\n\nfunction byteLengthBrandCheckException(name: string): TypeError {\n  return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);\n}\n\nexport function IsByteLengthQueuingStrategy(x: any): x is ByteLengthQueuingStrategy {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {\n    return false;\n  }\n\n  return true;\n}\n","import { QueuingStrategy, QueuingStrategyInit } from './queuing-strategy';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { assertRequiredArgument } from './validators/basic';\nimport { convertQueuingStrategyInit } from './validators/queuing-strategy-init';\n\nconst countSizeFunction = function size(): 1 {\n  return 1;\n};\n\n/**\n * A queuing strategy that counts the number of chunks.\n *\n * @public\n */\nexport default class CountQueuingStrategy implements QueuingStrategy<any> {\n  /** @internal */\n  readonly _countQueuingStrategyHighWaterMark!: number;\n\n  constructor(options: QueuingStrategyInit) {\n    assertRequiredArgument(options, 1, 'CountQueuingStrategy');\n    options = convertQueuingStrategyInit(options, 'First parameter');\n    this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n  }\n\n  /**\n   * Returns the high water mark provided to the constructor.\n   */\n  get highWaterMark(): number {\n    if (!IsCountQueuingStrategy(this)) {\n      throw countBrandCheckException('highWaterMark');\n    }\n    return this._countQueuingStrategyHighWaterMark;\n  }\n\n  /**\n   * Measures the size of `chunk` by always returning 1.\n   * This ensures that the total queue size is a count of the number of chunks in the queue.\n   */\n  get size(): (chunk: any) => 1 {\n    if (!IsCountQueuingStrategy(this)) {\n      throw countBrandCheckException('size');\n    }\n    return countSizeFunction;\n  }\n}\n\nObject.defineProperties(CountQueuingStrategy.prototype, {\n  highWaterMark: { enumerable: true },\n  size: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(CountQueuingStrategy.prototype, Symbol.toStringTag, {\n    value: 'CountQueuingStrategy',\n    configurable: true\n  });\n}\n\n// Helper functions for the CountQueuingStrategy.\n\nfunction countBrandCheckException(name: string): TypeError {\n  return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);\n}\n\nexport function IsCountQueuingStrategy(x: any): x is CountQueuingStrategy {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {\n    return false;\n  }\n\n  return true;\n}\n","import { assertDictionary, assertFunction } from './basic';\nimport { promiseCall, reflectCall } from '../helpers/webidl';\nimport {\n  Transformer,\n  TransformerFlushCallback,\n  TransformerStartCallback,\n  TransformerTransformCallback,\n  ValidatedTransformer\n} from '../transform-stream/transformer';\nimport { TransformStreamDefaultController } from '../transform-stream';\n\nexport function convertTransformer<I, O>(original: Transformer<I, O> | null,\n                                         context: string): ValidatedTransformer<I, O> {\n  assertDictionary(original, context);\n  const flush = original?.flush;\n  const readableType = original?.readableType;\n  const start = original?.start;\n  const transform = original?.transform;\n  const writableType = original?.writableType;\n  return {\n    flush: flush === undefined ?\n      undefined :\n      convertTransformerFlushCallback(flush, original!, `${context} has member 'flush' that`),\n    readableType,\n    start: start === undefined ?\n      undefined :\n      convertTransformerStartCallback(start, original!, `${context} has member 'start' that`),\n    transform: transform === undefined ?\n      undefined :\n      convertTransformerTransformCallback(transform, original!, `${context} has member 'transform' that`),\n    writableType\n  };\n}\n\nfunction convertTransformerFlushCallback<I, O>(\n  fn: TransformerFlushCallback<O>,\n  original: Transformer<I, O>,\n  context: string\n): (controller: TransformStreamDefaultController<O>) => Promise<void> {\n  assertFunction(fn, context);\n  return (controller: TransformStreamDefaultController<O>) => promiseCall(fn, original, [controller]);\n}\n\nfunction convertTransformerStartCallback<I, O>(\n  fn: TransformerStartCallback<O>,\n  original: Transformer<I, O>,\n  context: string\n): TransformerStartCallback<O> {\n  assertFunction(fn, context);\n  return (controller: TransformStreamDefaultController<O>) => reflectCall(fn, original, [controller]);\n}\n\nfunction convertTransformerTransformCallback<I, O>(\n  fn: TransformerTransformCallback<I, O>,\n  original: Transformer<I, O>,\n  context: string\n): (chunk: I, controller: TransformStreamDefaultController<O>) => Promise<void> {\n  assertFunction(fn, context);\n  return (chunk: I, controller: TransformStreamDefaultController<O>) => promiseCall(fn, original, [chunk, controller]);\n}\n","import assert from '../stub/assert';\nimport { newPromise, promiseRejectedWith, promiseResolvedWith, transformPromiseWith } from './helpers/webidl';\nimport { CreateReadableStream, ReadableStream, ReadableStreamDefaultController } from './readable-stream';\nimport {\n  ReadableStreamDefaultControllerCanCloseOrEnqueue,\n  ReadableStreamDefaultControllerClose,\n  ReadableStreamDefaultControllerEnqueue,\n  ReadableStreamDefaultControllerError,\n  ReadableStreamDefaultControllerGetDesiredSize,\n  ReadableStreamDefaultControllerHasBackpressure\n} from './readable-stream/default-controller';\nimport { QueuingStrategy, QueuingStrategySizeCallback } from './queuing-strategy';\nimport { CreateWritableStream, WritableStream, WritableStreamDefaultControllerErrorIfNeeded } from './writable-stream';\nimport { typeIsObject } from './helpers/miscellaneous';\nimport { IsNonNegativeNumber } from './abstract-ops/miscellaneous';\nimport { convertQueuingStrategy } from './validators/queuing-strategy';\nimport { ExtractHighWaterMark, ExtractSizeAlgorithm } from './abstract-ops/queuing-strategy';\nimport {\n  Transformer,\n  TransformerFlushCallback,\n  TransformerStartCallback,\n  TransformerTransformCallback,\n  ValidatedTransformer\n} from './transform-stream/transformer';\nimport { convertTransformer } from './validators/transformer';\n\n// Class TransformStream\n\n/**\n * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},\n * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.\n * In a manner specific to the transform stream in question, writes to the writable side result in new data being\n * made available for reading from the readable side.\n *\n * @public\n */\nexport class TransformStream<I = any, O = any> {\n  /** @internal */\n  _writable!: WritableStream<I>;\n  /** @internal */\n  _readable!: ReadableStream<O>;\n  /** @internal */\n  _backpressure!: boolean;\n  /** @internal */\n  _backpressureChangePromise!: Promise<void>;\n  /** @internal */\n  _backpressureChangePromise_resolve!: () => void;\n  /** @internal */\n  _transformStreamController!: TransformStreamDefaultController<O>;\n\n  constructor(\n    transformer?: Transformer<I, O>,\n    writableStrategy?: QueuingStrategy<I>,\n    readableStrategy?: QueuingStrategy<O>\n  );\n  constructor(rawTransformer: Transformer<I, O> | null | undefined = {},\n              rawWritableStrategy: QueuingStrategy<I> | null | undefined = {},\n              rawReadableStrategy: QueuingStrategy<O> | null | undefined = {}) {\n    if (rawTransformer === undefined) {\n      rawTransformer = null;\n    }\n\n    const writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');\n    const readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');\n\n    const transformer = convertTransformer(rawTransformer, 'First parameter');\n    if (transformer.readableType !== undefined) {\n      throw new RangeError('Invalid readableType specified');\n    }\n    if (transformer.writableType !== undefined) {\n      throw new RangeError('Invalid writableType specified');\n    }\n\n    const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n    const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n    const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n    const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n\n    let startPromise_resolve!: (value: void | PromiseLike<void>) => void;\n    const startPromise = newPromise<void>(resolve => {\n      startPromise_resolve = resolve;\n    });\n\n    InitializeTransformStream(\n      this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm\n    );\n    SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n\n    if (transformer.start !== undefined) {\n      startPromise_resolve(transformer.start(this._transformStreamController));\n    } else {\n      startPromise_resolve(undefined);\n    }\n  }\n\n  /**\n   * The readable side of the transform stream.\n   */\n  get readable(): ReadableStream<O> {\n    if (!IsTransformStream(this)) {\n      throw streamBrandCheckException('readable');\n    }\n\n    return this._readable;\n  }\n\n  /**\n   * The writable side of the transform stream.\n   */\n  get writable(): WritableStream<I> {\n    if (!IsTransformStream(this)) {\n      throw streamBrandCheckException('writable');\n    }\n\n    return this._writable;\n  }\n}\n\nObject.defineProperties(TransformStream.prototype, {\n  readable: { enumerable: true },\n  writable: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(TransformStream.prototype, Symbol.toStringTag, {\n    value: 'TransformStream',\n    configurable: true\n  });\n}\n\nexport {\n  Transformer,\n  TransformerStartCallback,\n  TransformerFlushCallback,\n  TransformerTransformCallback\n};\n\n// Transform Stream Abstract Operations\n\nexport function CreateTransformStream<I, O>(startAlgorithm: () => void | PromiseLike<void>,\n                                            transformAlgorithm: (chunk: I) => Promise<void>,\n                                            flushAlgorithm: () => Promise<void>,\n                                            writableHighWaterMark = 1,\n                                            writableSizeAlgorithm: QueuingStrategySizeCallback<I> = () => 1,\n                                            readableHighWaterMark = 0,\n                                            readableSizeAlgorithm: QueuingStrategySizeCallback<O> = () => 1) {\n  assert(IsNonNegativeNumber(writableHighWaterMark));\n  assert(IsNonNegativeNumber(readableHighWaterMark));\n\n  const stream: TransformStream<I, O> = Object.create(TransformStream.prototype);\n\n  let startPromise_resolve!: (value: void | PromiseLike<void>) => void;\n  const startPromise = newPromise<void>(resolve => {\n    startPromise_resolve = resolve;\n  });\n\n  InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark,\n                            readableSizeAlgorithm);\n\n  const controller: TransformStreamDefaultController<O> = Object.create(TransformStreamDefaultController.prototype);\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n\n  const startResult = startAlgorithm();\n  startPromise_resolve(startResult);\n  return stream;\n}\n\nfunction InitializeTransformStream<I, O>(stream: TransformStream<I, O>,\n                                         startPromise: Promise<void>,\n                                         writableHighWaterMark: number,\n                                         writableSizeAlgorithm: QueuingStrategySizeCallback<I>,\n                                         readableHighWaterMark: number,\n                                         readableSizeAlgorithm: QueuingStrategySizeCallback<O>) {\n  function startAlgorithm(): Promise<void> {\n    return startPromise;\n  }\n\n  function writeAlgorithm(chunk: I): Promise<void> {\n    return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n  }\n\n  function abortAlgorithm(reason: any): Promise<void> {\n    return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n  }\n\n  function closeAlgorithm(): Promise<void> {\n    return TransformStreamDefaultSinkCloseAlgorithm(stream);\n  }\n\n  stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm,\n                                          writableHighWaterMark, writableSizeAlgorithm);\n\n  function pullAlgorithm(): Promise<void> {\n    return TransformStreamDefaultSourcePullAlgorithm(stream);\n  }\n\n  function cancelAlgorithm(reason: any): Promise<void> {\n    TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n    return promiseResolvedWith(undefined);\n  }\n\n  stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark,\n                                          readableSizeAlgorithm);\n\n  // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n  stream._backpressure = undefined!;\n  stream._backpressureChangePromise = undefined!;\n  stream._backpressureChangePromise_resolve = undefined!;\n  TransformStreamSetBackpressure(stream, true);\n\n  stream._transformStreamController = undefined!;\n}\n\nfunction IsTransformStream(x: unknown): x is TransformStream {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\n    return false;\n  }\n\n  return true;\n}\n\n// This is a no-op if both sides are already errored.\nfunction TransformStreamError(stream: TransformStream, e: any) {\n  ReadableStreamDefaultControllerError(stream._readable._readableStreamController as ReadableStreamDefaultController<any>,\n                                       e);\n  TransformStreamErrorWritableAndUnblockWrite(stream, e);\n}\n\nfunction TransformStreamErrorWritableAndUnblockWrite(stream: TransformStream, e: any) {\n  TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n  WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n  if (stream._backpressure) {\n    // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n    // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n    // _backpressure is set.\n    TransformStreamSetBackpressure(stream, false);\n  }\n}\n\nfunction TransformStreamSetBackpressure(stream: TransformStream, backpressure: boolean) {\n  // Passes also when called during construction.\n  assert(stream._backpressure !== backpressure);\n\n  if (stream._backpressureChangePromise !== undefined) {\n    stream._backpressureChangePromise_resolve();\n  }\n\n  stream._backpressureChangePromise = newPromise(resolve => {\n    stream._backpressureChangePromise_resolve = resolve;\n  });\n\n  stream._backpressure = backpressure;\n}\n\n// Class TransformStreamDefaultController\n\n/**\n * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.\n *\n * @public\n */\nexport class TransformStreamDefaultController<O> {\n  /** @internal */\n  _controlledTransformStream: TransformStream<any, O>;\n  /** @internal */\n  _transformAlgorithm: (chunk: any) => Promise<void>;\n  /** @internal */\n  _flushAlgorithm: () => Promise<void>;\n\n  private constructor() {\n    throw new TypeError('Illegal constructor');\n  }\n\n  /**\n   * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.\n   */\n  get desiredSize(): number | null {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('desiredSize');\n    }\n\n    const readableController = this._controlledTransformStream._readable._readableStreamController;\n    return ReadableStreamDefaultControllerGetDesiredSize(readableController as ReadableStreamDefaultController<O>);\n  }\n\n  /**\n   * Enqueues the given chunk `chunk` in the readable side of the controlled transform stream.\n   */\n  enqueue(chunk: O): void;\n  enqueue(chunk: O = undefined!): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('enqueue');\n    }\n\n    TransformStreamDefaultControllerEnqueue(this, chunk);\n  }\n\n  /**\n   * Errors both the readable side and the writable side of the controlled transform stream, making all future\n   * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.\n   */\n  error(reason: any = undefined): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('error');\n    }\n\n    TransformStreamDefaultControllerError(this, reason);\n  }\n\n  /**\n   * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the\n   * transformer only needs to consume a portion of the chunks written to the writable side.\n   */\n  terminate(): void {\n    if (!IsTransformStreamDefaultController(this)) {\n      throw defaultControllerBrandCheckException('terminate');\n    }\n\n    TransformStreamDefaultControllerTerminate(this);\n  }\n}\n\nObject.defineProperties(TransformStreamDefaultController.prototype, {\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  terminate: { enumerable: true },\n  desiredSize: { enumerable: true }\n});\nif (typeof Symbol.toStringTag === 'symbol') {\n  Object.defineProperty(TransformStreamDefaultController.prototype, Symbol.toStringTag, {\n    value: 'TransformStreamDefaultController',\n    configurable: true\n  });\n}\n\n// Transform Stream Default Controller Abstract Operations\n\nfunction IsTransformStreamDefaultController<O = any>(x: any): x is TransformStreamDefaultController<O> {\n  if (!typeIsObject(x)) {\n    return false;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction SetUpTransformStreamDefaultController<I, O>(stream: TransformStream<I, O>,\n                                                     controller: TransformStreamDefaultController<O>,\n                                                     transformAlgorithm: (chunk: I) => Promise<void>,\n                                                     flushAlgorithm: () => Promise<void>) {\n  assert(IsTransformStream(stream));\n  assert(stream._transformStreamController === undefined);\n\n  controller._controlledTransformStream = stream;\n  stream._transformStreamController = controller;\n\n  controller._transformAlgorithm = transformAlgorithm;\n  controller._flushAlgorithm = flushAlgorithm;\n}\n\nfunction SetUpTransformStreamDefaultControllerFromTransformer<I, O>(stream: TransformStream<I, O>,\n                                                                    transformer: ValidatedTransformer<I, O>) {\n  const controller: TransformStreamDefaultController<O> = Object.create(TransformStreamDefaultController.prototype);\n\n  let transformAlgorithm = (chunk: I): Promise<void> => {\n    try {\n      TransformStreamDefaultControllerEnqueue(controller, chunk as unknown as O);\n      return promiseResolvedWith(undefined);\n    } catch (transformResultE) {\n      return promiseRejectedWith(transformResultE);\n    }\n  };\n\n  let flushAlgorithm: () => Promise<void> = () => promiseResolvedWith(undefined);\n\n  if (transformer.transform !== undefined) {\n    transformAlgorithm = chunk => transformer.transform!(chunk, controller);\n  }\n  if (transformer.flush !== undefined) {\n    flushAlgorithm = () => transformer.flush!(controller);\n  }\n\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n}\n\nfunction TransformStreamDefaultControllerClearAlgorithms(controller: TransformStreamDefaultController<any>) {\n  controller._transformAlgorithm = undefined!;\n  controller._flushAlgorithm = undefined!;\n}\n\nfunction TransformStreamDefaultControllerEnqueue<O>(controller: TransformStreamDefaultController<O>, chunk: O) {\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController as ReadableStreamDefaultController<O>;\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n    throw new TypeError('Readable side is not in a state that permits enqueue');\n  }\n\n  // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n  // accept TransformStreamDefaultControllerEnqueue() calls.\n\n  try {\n    ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n  } catch (e) {\n    // This happens when readableStrategy.size() throws.\n    TransformStreamErrorWritableAndUnblockWrite(stream, e);\n\n    throw stream._readable._storedError;\n  }\n\n  const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n  if (backpressure !== stream._backpressure) {\n    assert(backpressure);\n    TransformStreamSetBackpressure(stream, true);\n  }\n}\n\nfunction TransformStreamDefaultControllerError(controller: TransformStreamDefaultController<any>, e: any) {\n  TransformStreamError(controller._controlledTransformStream, e);\n}\n\nfunction TransformStreamDefaultControllerPerformTransform<I, O>(controller: TransformStreamDefaultController<O>,\n                                                                chunk: I) {\n  const transformPromise = controller._transformAlgorithm(chunk);\n  return transformPromiseWith(transformPromise, undefined, r => {\n    TransformStreamError(controller._controlledTransformStream, r);\n    throw r;\n  });\n}\n\nfunction TransformStreamDefaultControllerTerminate<O>(controller: TransformStreamDefaultController<O>) {\n  const stream = controller._controlledTransformStream;\n  const readableController = stream._readable._readableStreamController as ReadableStreamDefaultController<O>;\n\n  ReadableStreamDefaultControllerClose(readableController);\n\n  const error = new TypeError('TransformStream terminated');\n  TransformStreamErrorWritableAndUnblockWrite(stream, error);\n}\n\n// TransformStreamDefaultSink Algorithms\n\nfunction TransformStreamDefaultSinkWriteAlgorithm<I, O>(stream: TransformStream<I, O>, chunk: I): Promise<void> {\n  assert(stream._writable._state === 'writable');\n\n  const controller = stream._transformStreamController;\n\n  if (stream._backpressure) {\n    const backpressureChangePromise = stream._backpressureChangePromise;\n    assert(backpressureChangePromise !== undefined);\n    return transformPromiseWith(backpressureChangePromise, () => {\n      const writable = stream._writable;\n      const state = writable._state;\n      if (state === 'erroring') {\n        throw writable._storedError;\n      }\n      assert(state === 'writable');\n      return TransformStreamDefaultControllerPerformTransform<I, O>(controller, chunk);\n    });\n  }\n\n  return TransformStreamDefaultControllerPerformTransform<I, O>(controller, chunk);\n}\n\nfunction TransformStreamDefaultSinkAbortAlgorithm(stream: TransformStream, reason: any): Promise<void> {\n  // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already\n  // errored.\n  TransformStreamError(stream, reason);\n  return promiseResolvedWith(undefined);\n}\n\nfunction TransformStreamDefaultSinkCloseAlgorithm<I, O>(stream: TransformStream<I, O>): Promise<void> {\n  // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n  const readable = stream._readable;\n\n  const controller = stream._transformStreamController;\n  const flushPromise = controller._flushAlgorithm();\n  TransformStreamDefaultControllerClearAlgorithms(controller);\n\n  // Return a promise that is fulfilled with undefined on success.\n  return transformPromiseWith(flushPromise, () => {\n    if (readable._state === 'errored') {\n      throw readable._storedError;\n    }\n    ReadableStreamDefaultControllerClose(readable._readableStreamController as ReadableStreamDefaultController<O>);\n  }, r => {\n    TransformStreamError(stream, r);\n    throw readable._storedError;\n  });\n}\n\n// TransformStreamDefaultSource Algorithms\n\nfunction TransformStreamDefaultSourcePullAlgorithm(stream: TransformStream): Promise<void> {\n  // Invariant. Enforced by the promises returned by start() and pull().\n  assert(stream._backpressure);\n\n  assert(stream._backpressureChangePromise !== undefined);\n\n  TransformStreamSetBackpressure(stream, false);\n\n  // Prevent the next pull() call until there is backpressure.\n  return stream._backpressureChangePromise;\n}\n\n// Helper functions for the TransformStreamDefaultController.\n\nfunction defaultControllerBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);\n}\n\n// Helper functions for the TransformStream.\n\nfunction streamBrandCheckException(name: string): TypeError {\n  return new TypeError(\n    `TransformStream.prototype.${name} can only be used on a TransformStream`);\n}\n","/* global chrome location ReadableStream define MessageChannel TransformStream */\n\n;((name, definition) => {\n  typeof module !== 'undefined'\n    ? module.exports = definition()\n    : typeof define === 'function' && typeof define.amd === 'object'\n      ? define(definition)\n      : this[name] = definition()\n})('streamSaver', () => {\n  'use strict'\n\n  const global = typeof window === 'object' ? window : this\n  if (!global.HTMLElement) console.warn('streamsaver is meant to run on browsers main thread')\n\n  let mitmTransporter = null\n  let supportsTransferable = false\n  const test = fn => { try { fn() } catch (e) {} }\n  const ponyfill = global.WebStreamsPolyfill || {}\n  const isSecureContext = global.isSecureContext\n  // TODO: Must come up with a real detection test (#69)\n  let useBlobFallback = /constructor/i.test(global.HTMLElement) || !!global.safari || !!global.WebKitPoint\n  const downloadStrategy = isSecureContext || 'MozAppearance' in document.documentElement.style\n    ? 'iframe'\n    : 'navigate'\n\n  const streamSaver = {\n    createWriteStream,\n    WritableStream: global.WritableStream || ponyfill.WritableStream,\n    supported: true,\n    version: { full: '2.0.5', major: 2, minor: 0, dot: 5 },\n    mitm: 'https://jimmywarting.github.io/StreamSaver.js/mitm.html?version=2.0.0'\n  }\n\n  /**\n   * create a hidden iframe and append it to the DOM (body)\n   *\n   * @param  {string} src page to load\n   * @return {HTMLIFrameElement} page to load\n   */\n  function makeIframe (src) {\n    if (!src) throw new Error('meh')\n    const iframe = document.createElement('iframe')\n    iframe.hidden = true\n    iframe.src = src\n    iframe.loaded = false\n    iframe.name = 'iframe'\n    iframe.isIframe = true\n    iframe.postMessage = (...args) => iframe.contentWindow.postMessage(...args)\n    iframe.addEventListener('load', () => {\n      iframe.loaded = true\n    }, { once: true })\n    document.body.appendChild(iframe)\n    return iframe\n  }\n\n  /**\n   * create a popup that simulates the basic things\n   * of what a iframe can do\n   *\n   * @param  {string} src page to load\n   * @return {object}     iframe like object\n   */\n  function makePopup (src) {\n    const options = 'width=200,height=100'\n    const delegate = document.createDocumentFragment()\n    const popup = {\n      frame: global.open(src, 'popup', options),\n      loaded: false,\n      isIframe: false,\n      isPopup: true,\n      remove () { popup.frame.close() },\n      addEventListener (...args) { delegate.addEventListener(...args) },\n      dispatchEvent (...args) { delegate.dispatchEvent(...args) },\n      removeEventListener (...args) { delegate.removeEventListener(...args) },\n      postMessage (...args) { popup.frame.postMessage(...args) }\n    }\n\n    const onReady = evt => {\n      if (evt.source === popup.frame) {\n        popup.loaded = true\n        global.removeEventListener('message', onReady)\n        popup.dispatchEvent(new Event('load'))\n      }\n    }\n\n    global.addEventListener('message', onReady)\n\n    return popup\n  }\n\n  try {\n    // We can't look for service worker since it may still work on http\n    new Response(new ReadableStream())\n    if (isSecureContext && !('serviceWorker' in navigator)) {\n      useBlobFallback = true\n    }\n  } catch (err) {\n    useBlobFallback = true\n  }\n\n  test(() => {\n    // Transfariable stream was first enabled in chrome v73 behind a flag\n    const { readable } = new TransformStream()\n    const mc = new MessageChannel()\n    mc.port1.postMessage(readable, [readable])\n    mc.port1.close()\n    mc.port2.close()\n    supportsTransferable = true\n    // Freeze TransformStream object (can only work with native)\n    Object.defineProperty(streamSaver, 'TransformStream', {\n      configurable: false,\n      writable: false,\n      value: TransformStream\n    })\n  })\n\n  function loadTransporter () {\n    if (!mitmTransporter) {\n      mitmTransporter = isSecureContext\n        ? makeIframe(streamSaver.mitm)\n        : makePopup(streamSaver.mitm)\n    }\n  }\n\n  /**\n   * @param  {string} filename filename that should be used\n   * @param  {object} options  [description]\n   * @param  {number} size     depricated\n   * @return {WritableStream<Uint8Array>}\n   */\n  function createWriteStream (filename, options, size) {\n    let opts = {\n      size: null,\n      pathname: null,\n      writableStrategy: undefined,\n      readableStrategy: undefined\n    }\n\n    let bytesWritten = 0 // by StreamSaver.js (not the service worker)\n    let downloadUrl = null\n    let channel = null\n    let ts = null\n\n    // normalize arguments\n    if (Number.isFinite(options)) {\n      [ size, options ] = [ options, size ]\n      console.warn('[StreamSaver] Depricated pass an object as 2nd argument when creating a write stream')\n      opts.size = size\n      opts.writableStrategy = options\n    } else if (options && options.highWaterMark) {\n      console.warn('[StreamSaver] Depricated pass an object as 2nd argument when creating a write stream')\n      opts.size = size\n      opts.writableStrategy = options\n    } else {\n      opts = options || {}\n    }\n    if (!useBlobFallback) {\n      loadTransporter()\n\n      channel = new MessageChannel()\n\n      // Make filename RFC5987 compatible\n      filename = encodeURIComponent(filename.replace(/\\//g, ':'))\n        .replace(/['()]/g, escape)\n        .replace(/\\*/g, '%2A')\n\n      const response = {\n        transferringReadable: supportsTransferable,\n        pathname: opts.pathname || Math.random().toString().slice(-6) + '/' + filename,\n        headers: {\n          'Content-Type': 'application/octet-stream; charset=utf-8',\n          'Content-Disposition': \"attachment; filename*=UTF-8''\" + filename\n        }\n      }\n\n      if (opts.size) {\n        response.headers['Content-Length'] = opts.size\n      }\n\n      const args = [ response, '*', [ channel.port2 ] ]\n\n      if (supportsTransferable) {\n        const transformer = downloadStrategy === 'iframe' ? undefined : {\n          // This transformer & flush method is only used by insecure context.\n          transform (chunk, controller) {\n            if (!(chunk instanceof Uint8Array)) {\n              throw new TypeError('Can only wirte Uint8Arrays')\n            }\n            bytesWritten += chunk.length\n            controller.enqueue(chunk)\n\n            if (downloadUrl) {\n              location.href = downloadUrl\n              downloadUrl = null\n            }\n          },\n          flush () {\n            if (downloadUrl) {\n              location.href = downloadUrl\n            }\n          }\n        }\n        ts = new streamSaver.TransformStream(\n          transformer,\n          opts.writableStrategy,\n          opts.readableStrategy\n        )\n        const readableStream = ts.readable\n\n        channel.port1.postMessage({ readableStream }, [ readableStream ])\n      }\n\n      channel.port1.onmessage = evt => {\n        // Service worker sent us a link that we should open.\n        if (evt.data.download) {\n          // Special treatment for popup...\n          if (downloadStrategy === 'navigate') {\n            mitmTransporter.remove()\n            mitmTransporter = null\n            if (bytesWritten) {\n              location.href = evt.data.download\n            } else {\n              downloadUrl = evt.data.download\n            }\n          } else {\n            if (mitmTransporter.isPopup) {\n              mitmTransporter.remove()\n              mitmTransporter = null\n              // Special case for firefox, they can keep sw alive with fetch\n              if (downloadStrategy === 'iframe') {\n                makeIframe(streamSaver.mitm)\n              }\n            }\n\n            // We never remove this iframes b/c it can interrupt saving\n            makeIframe(evt.data.download)\n          }\n        }\n      }\n\n      if (mitmTransporter.loaded) {\n        mitmTransporter.postMessage(...args)\n      } else {\n        mitmTransporter.addEventListener('load', () => {\n          mitmTransporter.postMessage(...args)\n        }, { once: true })\n      }\n    }\n\n    let chunks = []\n\n    return (!useBlobFallback && ts && ts.writable) || new streamSaver.WritableStream({\n      write (chunk) {\n        if (!(chunk instanceof Uint8Array)) {\n          throw new TypeError('Can only wirte Uint8Arrays')\n        }\n        if (useBlobFallback) {\n          // Safari... The new IE6\n          // https://github.com/jimmywarting/StreamSaver.js/issues/69\n          //\n          // even doe it has everything it fails to download anything\n          // that comes from the service worker..!\n          chunks.push(chunk)\n          return\n        }\n\n        // is called when a new chunk of data is ready to be written\n        // to the underlying sink. It can return a promise to signal\n        // success or failure of the write operation. The stream\n        // implementation guarantees that this method will be called\n        // only after previous writes have succeeded, and never after\n        // close or abort is called.\n\n        // TODO: Kind of important that service worker respond back when\n        // it has been written. Otherwise we can't handle backpressure\n        // EDIT: Transfarable streams solvs this...\n        channel.port1.postMessage(chunk)\n        bytesWritten += chunk.length\n\n        if (downloadUrl) {\n          location.href = downloadUrl\n          downloadUrl = null\n        }\n      },\n      close () {\n        if (useBlobFallback) {\n          const blob = new Blob(chunks, { type: 'application/octet-stream; charset=utf-8' })\n          const link = document.createElement('a')\n          link.href = URL.createObjectURL(blob)\n          link.download = filename\n          link.click()\n        } else {\n          channel.port1.postMessage('end')\n        }\n      },\n      abort () {\n        chunks = []\n        channel.port1.postMessage('abort')\n        channel.port1.onmessage = null\n        channel.port1.close()\n        channel.port2.close()\n        channel = null\n      }\n    }, opts.writableStrategy)\n  }\n\n  return streamSaver\n})\n","'use strict';\nconst pMap = require('p-map');\n\nmodule.exports = (iterable, options) => pMap(iterable, element => element(), options);\n","'use strict';\nconst AggregateError = require('aggregate-error');\n\nmodule.exports = async (\n\titerable,\n\tmapper,\n\t{\n\t\tconcurrency = Infinity,\n\t\tstopOnError = true\n\t} = {}\n) => {\n\treturn new Promise((resolve, reject) => {\n\t\tif (typeof mapper !== 'function') {\n\t\t\tthrow new TypeError('Mapper function is required');\n\t\t}\n\n\t\tif (!((Number.isSafeInteger(concurrency) || concurrency === Infinity) && concurrency >= 1)) {\n\t\t\tthrow new TypeError(`Expected \\`concurrency\\` to be an integer from 1 and up or \\`Infinity\\`, got \\`${concurrency}\\` (${typeof concurrency})`);\n\t\t}\n\n\t\tconst result = [];\n\t\tconst errors = [];\n\t\tconst iterator = iterable[Symbol.iterator]();\n\t\tlet isRejected = false;\n\t\tlet isIterableDone = false;\n\t\tlet resolvingCount = 0;\n\t\tlet currentIndex = 0;\n\n\t\tconst next = () => {\n\t\t\tif (isRejected) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextItem = iterator.next();\n\t\t\tconst index = currentIndex;\n\t\t\tcurrentIndex++;\n\n\t\t\tif (nextItem.done) {\n\t\t\t\tisIterableDone = true;\n\n\t\t\t\tif (resolvingCount === 0) {\n\t\t\t\t\tif (!stopOnError && errors.length !== 0) {\n\t\t\t\t\t\treject(new AggregateError(errors));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresolvingCount++;\n\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst element = await nextItem.value;\n\t\t\t\t\tresult[index] = await mapper(element, index);\n\t\t\t\t\tresolvingCount--;\n\t\t\t\t\tnext();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (stopOnError) {\n\t\t\t\t\t\tisRejected = true;\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\terrors.push(error);\n\t\t\t\t\t\tresolvingCount--;\n\t\t\t\t\t\tnext();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})();\n\t\t};\n\n\t\tfor (let i = 0; i < concurrency; i++) {\n\t\t\tnext();\n\n\t\t\tif (isIterableDone) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n};\n","'use strict';\nconst indentString = require('indent-string');\nconst cleanStack = require('clean-stack');\n\nconst cleanInternalStack = stack => stack.replace(/\\s+at .*aggregate-error\\/index.js:\\d+:\\d+\\)?/g, '');\n\nclass AggregateError extends Error {\n\tconstructor(errors) {\n\t\tif (!Array.isArray(errors)) {\n\t\t\tthrow new TypeError(`Expected input to be an Array, got ${typeof errors}`);\n\t\t}\n\n\t\terrors = [...errors].map(error => {\n\t\t\tif (error instanceof Error) {\n\t\t\t\treturn error;\n\t\t\t}\n\n\t\t\tif (error !== null && typeof error === 'object') {\n\t\t\t\t// Handle plain error objects with message property and/or possibly other metadata\n\t\t\t\treturn Object.assign(new Error(error.message), error);\n\t\t\t}\n\n\t\t\treturn new Error(error);\n\t\t});\n\n\t\tlet message = errors\n\t\t\t.map(error => {\n\t\t\t\t// The `stack` property is not standardized, so we can't assume it exists\n\t\t\t\treturn typeof error.stack === 'string' ? cleanInternalStack(cleanStack(error.stack)) : String(error);\n\t\t\t})\n\t\t\t.join('\\n');\n\t\tmessage = '\\n' + indentString(message, 4);\n\t\tsuper(message);\n\n\t\tthis.name = 'AggregateError';\n\n\t\tObject.defineProperty(this, '_errors', {value: errors});\n\t}\n\n\t* [Symbol.iterator]() {\n\t\tfor (const error of this._errors) {\n\t\t\tyield error;\n\t\t}\n\t}\n}\n\nmodule.exports = AggregateError;\n","var unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nmodule.exports = _createForOfIteratorHelper;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nvar isNativeReflectConstruct = require(\"./isNativeReflectConstruct\");\n\nvar possibleConstructorReturn = require(\"./possibleConstructorReturn\");\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}\n\nmodule.exports = _createSuper;","var _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nvar setPrototypeOf = require(\"./setPrototypeOf\");\n\nvar isNativeFunction = require(\"./isNativeFunction\");\n\nvar construct = require(\"./construct\");\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nmodule.exports = _wrapNativeSuper;","function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nmodule.exports = _isNativeFunction;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nvar isNativeReflectConstruct = require(\"./isNativeReflectConstruct\");\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    module.exports = _construct = Reflect.construct;\n  } else {\n    module.exports = _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nmodule.exports = _construct;","'use strict';\n\nmodule.exports = (string, count = 1, options) => {\n\toptions = {\n\t\tindent: ' ',\n\t\tincludeEmptyLines: false,\n\t\t...options\n\t};\n\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError(\n\t\t\t`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof string}\\``\n\t\t);\n\t}\n\n\tif (typeof count !== 'number') {\n\t\tthrow new TypeError(\n\t\t\t`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof count}\\``\n\t\t);\n\t}\n\n\tif (typeof options.indent !== 'string') {\n\t\tthrow new TypeError(\n\t\t\t`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof options.indent}\\``\n\t\t);\n\t}\n\n\tif (count === 0) {\n\t\treturn string;\n\t}\n\n\tconst regex = options.includeEmptyLines ? /^/gm : /^(?!\\s*$)/gm;\n\n\treturn string.replace(regex, options.indent.repeat(count));\n};\n","var defineProperty = require(\"./defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectSpread2;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","'use strict';\nconst os = require('os');\n\nconst extractPathRegex = /\\s+at.*(?:\\(|\\s)(.*)\\)?/;\nconst pathRegex = /^(?:(?:(?:node|(?:internal\\/[\\w/]*|.*node_modules\\/(?:babel-polyfill|pirates)\\/.*)?\\w+)\\.js:\\d+:\\d+)|native)/;\nconst homeDir = typeof os.homedir === 'undefined' ? '' : os.homedir();\n\nmodule.exports = (stack, options) => {\n\toptions = Object.assign({pretty: false}, options);\n\n\treturn stack.replace(/\\\\/g, '/')\n\t\t.split('\\n')\n\t\t.filter(line => {\n\t\t\tconst pathMatches = line.match(extractPathRegex);\n\t\t\tif (pathMatches === null || !pathMatches[1]) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst match = pathMatches[1];\n\n\t\t\t// Electron\n\t\t\tif (\n\t\t\t\tmatch.includes('.app/Contents/Resources/electron.asar') ||\n\t\t\t\tmatch.includes('.app/Contents/Resources/default_app.asar')\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn !pathRegex.test(match);\n\t\t})\n\t\t.filter(line => line.trim() !== '')\n\t\t.map(line => {\n\t\t\tif (options.pretty) {\n\t\t\t\treturn line.replace(extractPathRegex, (m, p1) => m.replace(p1, p1.replace(homeDir, '~')));\n\t\t\t}\n\n\t\t\treturn line;\n\t\t})\n\t\t.join('\\n');\n};\n","class Crc32 {\n  constructor () {\n    this.crc = -1\n  }\n\n  append (data) {\n    var crc = this.crc | 0; var table = this.table\n    for (var offset = 0, len = data.length | 0; offset < len; offset++) {\n      crc = (crc >>> 8) ^ table[(crc ^ data[offset]) & 0xFF]\n    }\n    this.crc = crc\n  }\n\n  get () {\n    return ~this.crc\n  }\n}\nCrc32.prototype.table = (() => {\n  var i; var j; var t; var table = []\n  for (i = 0; i < 256; i++) {\n    t = i\n    for (j = 0; j < 8; j++) {\n      t = (t & 1)\n        ? (t >>> 1) ^ 0xEDB88320\n        : t >>> 1\n    }\n    table[i] = t\n  }\n  return table\n})()\n\nconst getDataHelper = byteLength => {\n  var uint8 = new Uint8Array(byteLength)\n  return {\n    array: uint8,\n    view: new DataView(uint8.buffer)\n  }\n}\n\nconst pump = zipObj => zipObj.reader.read().then(chunk => {\n  if (chunk.done) return zipObj.writeFooter()\n  const outputData = chunk.value\n  zipObj.crc.append(outputData)\n  zipObj.uncompressedLength += outputData.length\n  zipObj.compressedLength += outputData.length\n  zipObj.ctrl.enqueue(outputData)\n})\n\n/**\n * [createWriter description]\n * @param  {Object} underlyingSource [description]\n * @return {Boolean}                  [description]\n */\nfunction createWriter (underlyingSource) {\n  const files = Object.create(null)\n  const filenames = []\n  const encoder = new TextEncoder()\n  let offset = 0\n  let activeZipIndex = 0\n  let ctrl\n  let activeZipObject, closed\n\n  function next () {\n    activeZipIndex++\n    activeZipObject = files[filenames[activeZipIndex]]\n    if (activeZipObject) processNextChunk()\n    else if (closed) closeZip()\n  }\n\n  var zipWriter = {\n    enqueue (fileLike) {\n      if (closed) throw new TypeError('Cannot enqueue a chunk into a readable stream that is closed or has been requested to be closed')\n\n      let name = fileLike.name.trim()\n      const date = new Date(typeof fileLike.lastModified === 'undefined' ? Date.now() : fileLike.lastModified)\n\n      if (fileLike.directory && !name.endsWith('/')) name += '/'\n      if (files[name]) throw new Error('File already exists.')\n\n      const nameBuf = encoder.encode(name)\n      filenames.push(name)\n\n      const zipObject = files[name] = {\n        level: 0,\n        ctrl,\n        directory: !!fileLike.directory,\n        nameBuf,\n        comment: encoder.encode(fileLike.comment || ''),\n        compressedLength: 0,\n        uncompressedLength: 0,\n        writeHeader () {\n          var header = getDataHelper(26)\n          var data = getDataHelper(30 + nameBuf.length)\n\n          zipObject.offset = offset\n          zipObject.header = header\n          if (zipObject.level !== 0 && !zipObject.directory) {\n            header.view.setUint16(4, 0x0800)\n          }\n          header.view.setUint32(0, 0x14000808)\n          header.view.setUint16(6, (((date.getHours() << 6) | date.getMinutes()) << 5) | date.getSeconds() / 2, true)\n          header.view.setUint16(8, ((((date.getFullYear() - 1980) << 4) | (date.getMonth() + 1)) << 5) | date.getDate(), true)\n          header.view.setUint16(22, nameBuf.length, true)\n          data.view.setUint32(0, 0x504b0304)\n          data.array.set(header.array, 4)\n          data.array.set(nameBuf, 30)\n          offset += data.array.length\n          ctrl.enqueue(data.array)\n        },\n        writeFooter () {\n          var footer = getDataHelper(16)\n          footer.view.setUint32(0, 0x504b0708)\n\n          if (zipObject.crc) {\n            zipObject.header.view.setUint32(10, zipObject.crc.get(), true)\n            zipObject.header.view.setUint32(14, zipObject.compressedLength, true)\n            zipObject.header.view.setUint32(18, zipObject.uncompressedLength, true)\n            footer.view.setUint32(4, zipObject.crc.get(), true)\n            footer.view.setUint32(8, zipObject.compressedLength, true)\n            footer.view.setUint32(12, zipObject.uncompressedLength, true)\n          }\n\n          ctrl.enqueue(footer.array)\n          offset += zipObject.compressedLength + 16\n          next()\n        },\n        fileLike\n      }\n\n      if (!activeZipObject) {\n        activeZipObject = zipObject\n        processNextChunk()\n      }\n    },\n    close () {\n      if (closed) throw new TypeError('Cannot close a readable stream that has already been requested to be closed')\n      if (!activeZipObject) closeZip()\n      closed = true\n    }\n  }\n\n  function closeZip () {\n    var length = 0\n    var index = 0\n    var indexFilename, file\n    for (indexFilename = 0; indexFilename < filenames.length; indexFilename++) {\n      file = files[filenames[indexFilename]]\n      length += 46 + file.nameBuf.length + file.comment.length\n    }\n    const data = getDataHelper(length + 22)\n    for (indexFilename = 0; indexFilename < filenames.length; indexFilename++) {\n      file = files[filenames[indexFilename]]\n      data.view.setUint32(index, 0x504b0102)\n      data.view.setUint16(index + 4, 0x1400)\n      data.array.set(file.header.array, index + 6)\n      data.view.setUint16(index + 32, file.comment.length, true)\n      if (file.directory) {\n        data.view.setUint8(index + 38, 0x10)\n      }\n      data.view.setUint32(index + 42, file.offset, true)\n      data.array.set(file.nameBuf, index + 46)\n      data.array.set(file.comment, index + 46 + file.nameBuf.length)\n      index += 46 + file.nameBuf.length + file.comment.length\n    }\n    data.view.setUint32(index, 0x504b0506)\n    data.view.setUint16(index + 8, filenames.length, true)\n    data.view.setUint16(index + 10, filenames.length, true)\n    data.view.setUint32(index + 12, length, true)\n    data.view.setUint32(index + 16, offset, true)\n    ctrl.enqueue(data.array)\n    ctrl.close()\n  }\n\n  function processNextChunk () {\n    if (!activeZipObject) return\n    if (activeZipObject.directory) return activeZipObject.writeFooter(activeZipObject.writeHeader())\n    if (activeZipObject.reader) return pump(activeZipObject)\n    if (activeZipObject.fileLike.stream) {\n      activeZipObject.crc = new Crc32()\n      activeZipObject.reader = activeZipObject.fileLike.stream().getReader()\n      activeZipObject.writeHeader()\n    } else next()\n  }\n  return new ReadableStream({\n    start: c => {\n      ctrl = c\n      underlyingSource.start && Promise.resolve(underlyingSource.start(zipWriter))\n    },\n    pull () {\n      return processNextChunk() || (\n        underlyingSource.pull &&\n        Promise.resolve(underlyingSource.pull(zipWriter))\n      )\n    }\n  })\n}\n\nwindow.ZIP = createWriter\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport useDebouncedCallback from './useDebouncedCallback';\nfunction valueEquality(left, right) {\n    return left === right;\n}\nexport default function useDebounce(value, delay, options) {\n    var eq = (options && options.equalityFn) || valueEquality;\n    var _a = useState(value), state = _a[0], dispatch = _a[1];\n    var debounced = useDebouncedCallback(useCallback(function (value) { return dispatch(value); }, []), delay, options);\n    var previousValue = useRef(value);\n    useEffect(function () {\n        // We need to use this condition otherwise we will run debounce timer for the first render (including maxWait option)\n        if (!eq(previousValue.current, value)) {\n            debounced.callback(value);\n            previousValue.current = value;\n        }\n    }, [value, debounced, eq]);\n    return [state, { cancel: debounced.cancel, pending: debounced.pending, flush: debounced.flush }];\n}\n","import root from './_root.js';\nimport toInteger from './toInteger.js';\nimport toNumber from './toNumber.js';\nimport toString from './toString.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsFinite = root.isFinite,\n    nativeMin = Math.min;\n\n/**\n * Creates a function like `_.round`.\n *\n * @private\n * @param {string} methodName The name of the `Math` method to use when rounding.\n * @returns {Function} Returns the new round function.\n */\nfunction createRound(methodName) {\n  var func = Math[methodName];\n  return function(number, precision) {\n    number = toNumber(number);\n    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n    if (precision && nativeIsFinite(number)) {\n      // Shift with exponential notation to avoid floating-point issues.\n      // See [MDN](https://mdn.io/round#Examples) for more details.\n      var pair = (toString(number) + 'e').split('e'),\n          value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n      pair = (toString(value) + 'e').split('e');\n      return +(pair[0] + 'e' + (+pair[1] - precision));\n    }\n    return func(number);\n  };\n}\n\nexport default createRound;\n","import createRound from './_createRound.js';\n\n/**\n * Computes `number` rounded to `precision`.\n *\n * @static\n * @memberOf _\n * @since 3.10.0\n * @category Math\n * @param {number} number The number to round.\n * @param {number} [precision=0] The precision to round to.\n * @returns {number} Returns the rounded number.\n * @example\n *\n * _.round(4.006);\n * // => 4\n *\n * _.round(4.006, 2);\n * // => 4.01\n *\n * _.round(4060, -2);\n * // => 4100\n */\nvar round = createRound('round');\n\nexport default round;\n","/**\n * The base implementation of `_.clamp` which doesn't coerce arguments.\n *\n * @private\n * @param {number} number The number to clamp.\n * @param {number} [lower] The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n */\nfunction baseClamp(number, lower, upper) {\n  if (number === number) {\n    if (upper !== undefined) {\n      number = number <= upper ? number : upper;\n    }\n    if (lower !== undefined) {\n      number = number >= lower ? number : lower;\n    }\n  }\n  return number;\n}\n\nexport default baseClamp;\n","import baseClamp from './_baseClamp.js';\nimport toNumber from './toNumber.js';\n\n/**\n * Clamps `number` within the inclusive `lower` and `upper` bounds.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Number\n * @param {number} number The number to clamp.\n * @param {number} [lower] The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n * @example\n *\n * _.clamp(-10, -5, 5);\n * // => -5\n *\n * _.clamp(10, -5, 5);\n * // => 5\n */\nfunction clamp(number, lower, upper) {\n  if (upper === undefined) {\n    upper = lower;\n    lower = undefined;\n  }\n  if (upper !== undefined) {\n    upper = toNumber(upper);\n    upper = upper === upper ? upper : 0;\n  }\n  if (lower !== undefined) {\n    lower = toNumber(lower);\n    lower = lower === lower ? lower : 0;\n  }\n  return baseClamp(toNumber(number), lower, upper);\n}\n\nexport default clamp;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _without from \"lodash-es/without\";\nimport _round from \"lodash-es/round\";\nimport _clamp from \"lodash-es/clamp\";\nimport _isUndefined from \"lodash-es/isUndefined\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { childrenUtils, createHTMLDivision, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useValueAndKey } from '../../lib';\n/**\n * A progress bar shows the progression of a task.\n */\n\nvar Progress = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Progress, _Component);\n\n  function Progress() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _this.calculatePercent = function () {\n      var _this$props = _this.props,\n          percent = _this$props.percent,\n          total = _this$props.total,\n          value = _this$props.value;\n      if (!_isUndefined(percent)) return percent;\n      if (!_isUndefined(total) && !_isUndefined(value)) return value / total * 100;\n    };\n\n    _this.computeValueText = function (percent) {\n      var _this$props2 = _this.props,\n          progress = _this$props2.progress,\n          total = _this$props2.total,\n          value = _this$props2.value;\n      if (progress === 'value') return value;\n      if (progress === 'ratio') return value + \"/\" + total;\n      return percent + \"%\";\n    };\n\n    _this.getPercent = function () {\n      var _this$props3 = _this.props,\n          precision = _this$props3.precision,\n          progress = _this$props3.progress,\n          total = _this$props3.total,\n          value = _this$props3.value;\n\n      var percent = _clamp(_this.calculatePercent(), 0, 100);\n\n      if (!_isUndefined(total) && !_isUndefined(value) && progress === 'value') {\n        return value / total * 100;\n      }\n\n      if (progress === 'value') return value;\n      if (_isUndefined(precision)) return percent;\n      return _round(percent, precision);\n    };\n\n    _this.isAutoSuccess = function () {\n      var _this$props4 = _this.props,\n          autoSuccess = _this$props4.autoSuccess,\n          percent = _this$props4.percent,\n          total = _this$props4.total,\n          value = _this$props4.value;\n      return autoSuccess && (percent >= 100 || value >= total);\n    };\n\n    _this.renderLabel = function () {\n      var _this$props5 = _this.props,\n          children = _this$props5.children,\n          content = _this$props5.content,\n          label = _this$props5.label;\n      if (!childrenUtils.isNil(children)) return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"label\"\n      }, children);\n      if (!childrenUtils.isNil(content)) return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"label\"\n      }, content);\n      return createHTMLDivision(label, {\n        autoGenerateKey: false,\n        defaultProps: {\n          className: 'label'\n        }\n      });\n    };\n\n    _this.renderProgress = function (percent) {\n      var _this$props6 = _this.props,\n          precision = _this$props6.precision,\n          progress = _this$props6.progress;\n      if (!progress && _isUndefined(precision)) return;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"progress\"\n      }, _this.computeValueText(percent));\n    };\n\n    return _this;\n  }\n\n  var _proto = Progress.prototype;\n\n  _proto.render = function render() {\n    var _this$props7 = this.props,\n        active = _this$props7.active,\n        attached = _this$props7.attached,\n        className = _this$props7.className,\n        color = _this$props7.color,\n        disabled = _this$props7.disabled,\n        error = _this$props7.error,\n        indicating = _this$props7.indicating,\n        inverted = _this$props7.inverted,\n        size = _this$props7.size,\n        success = _this$props7.success,\n        warning = _this$props7.warning;\n    var classes = cx('ui', color, size, useKeyOnly(active || indicating, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(indicating, 'indicating'), useKeyOnly(inverted, 'inverted'), useKeyOnly(success || this.isAutoSuccess(), 'success'), useKeyOnly(warning, 'warning'), useValueAndKey(attached, 'attached'), 'progress', className);\n    var rest = getUnhandledProps(Progress, this.props);\n    var ElementType = getElementType(Progress, this.props);\n    var percent = this.getPercent() || 0;\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes,\n      \"data-percent\": Math.floor(percent)\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"bar\",\n      style: {\n        width: percent + \"%\"\n      }\n    }, this.renderProgress(percent)), this.renderLabel());\n  };\n\n  return Progress;\n}(Component);\n\nProgress.handledProps = [\"active\", \"as\", \"attached\", \"autoSuccess\", \"children\", \"className\", \"color\", \"content\", \"disabled\", \"error\", \"indicating\", \"inverted\", \"label\", \"percent\", \"precision\", \"progress\", \"size\", \"success\", \"total\", \"value\", \"warning\"];\nProgress.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A progress bar can show activity. */\n  active: PropTypes.bool,\n\n  /** A progress bar can attach to and show the progress of an element (i.e. Card or Segment). */\n  attached: PropTypes.oneOf(['top', 'bottom']),\n\n  /** Whether success state should automatically trigger when progress completes. */\n  autoSuccess: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A progress bar can have different colors. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A progress bar be disabled. */\n  disabled: PropTypes.bool,\n\n  /** A progress bar can show a error state. */\n  error: PropTypes.bool,\n\n  /** An indicating progress bar visually indicates the current level of progress of a task. */\n  indicating: PropTypes.bool,\n\n  /** A progress bar can have its colors inverted. */\n  inverted: PropTypes.bool,\n\n  /** Can be set to either to display progress as percent or ratio. */\n  label: customPropTypes.itemShorthand,\n\n  /** Current percent complete. */\n  percent: customPropTypes.every([customPropTypes.disallow(['total', 'value']), PropTypes.oneOfType([PropTypes.number, PropTypes.string])]),\n\n  /** Decimal point precision for calculated progress. */\n  precision: PropTypes.number,\n\n  /** A progress bar can contain a text value indicating current progress. */\n  progress: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['percent', 'ratio', 'value'])]),\n\n  /** A progress bar can vary in size. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'mini', 'huge', 'massive')),\n\n  /** A progress bar can show a success state. */\n  success: PropTypes.bool,\n\n  /** For use with value. Together, these will calculate the percent. Mutually excludes percent. */\n  total: customPropTypes.every([customPropTypes.demand(['value']), customPropTypes.disallow(['percent']), PropTypes.oneOfType([PropTypes.number, PropTypes.string])]),\n\n  /** For use with total. Together, these will calculate the percent. Mutually excludes percent. */\n  value: customPropTypes.every([customPropTypes.disallow(['percent']), PropTypes.oneOfType([PropTypes.number, PropTypes.string])]),\n\n  /** A progress bar can show a warning state. */\n  warning: PropTypes.bool\n} : {};\nexport default Progress;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;"],"sourceRoot":""}