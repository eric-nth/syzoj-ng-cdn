{"version":3,"sources":["pages/auth/forgot/ForgotPage.tsx"],"names":["ForgetPage","_","useLocalizer","currentRoute","useCurrentRoute","navigation","useNavigationChecked","redirect","navigate","url","query","loginRedirectUrl","useEffect","appState","currentUser","enterNewPage","locale","recaptcha","useRecaptcha","useState","successMessage","setSuccessMessage","email","setEmail","emailVerificationCode","setEmailVerificationCode","password","setPassword","retypePassword","setRetypePassword","resetPasswordPending","setResetPasswordPending","refEmailInput","useRef","refEmailVerificationCodeInput","refPasswordInput","refRetypePasswordInput","refForm","useFieldCheck","value","isValidEmail","checkEmail","waitForEmailCheck","getEmailUIValidateStatus","getEmailUIHelp","isValidPassword","checkPassword","waitForPasswordCheck","getPasswordUIValidateStatus","getPasswordUIHelp","getCurrentPassword","console","log","checkRetypePassword","waitForRetypePasswordCheck","getRetypePasswordUIValidateStatus","getRetypePasswordUIHelp","emailVerificationCodeError","setEmailVerificationCodeError","onSubmit","a","toast","error","current","focus","select","api","auth","resetPassword","newPassword","requestError","response","token","setTimeout","refreshSession","sendEmailVerificationCodeTimeout","setSendEmailVerificationCodeTimeout","sendEmailVerificationCodePending","setSendEmailVerificationCodePending","onSendEmailVerificationCode","sendEmailVerificationCode","type","errorMessage","success","id","setInterval","timeout","clearInterval","logo","appLogoThemed","className","style","wrapper","as","header","withLogo","textAlign","size","ref","innerRef","field","querySelector","Field","control","Input","content","pointing","loading","fluid","icon","iconPosition","placeholder","autoComplete","onChange","e","target","onBlur","onKeyPress","onEnterPress","code","stripInvalidCharactersInEmailVerificationCode","action","tabIndex","disabled","onClick","getCopyrightMessage","recaptchaCopyright","successButton","primary","color","name","observer","route","view"],"mappings":"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","file":"static/js/142.599fa050.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { Header, Segment, Input, Button, Form, Icon, Ref } from \"semantic-ui-react\";\nimport { route } from \"navi\";\nimport { useCurrentRoute } from \"react-navi\";\nimport { observer } from \"mobx-react\";\n\nimport style from \"../common.module.less\";\n\nimport { appState } from \"@/appState\";\n\nimport api from \"@/api\";\nimport { useLocalizer, useFieldCheck, useRecaptcha, useNavigationChecked } from \"@/utils/hooks\";\nimport toast from \"@/utils/toast\";\nimport { isValidEmail, isValidPassword, stripInvalidCharactersInEmailVerificationCode } from \"@/utils/validators\";\nimport { refreshSession } from \"@/initApp\";\nimport { onEnterPress } from \"@/utils/onEnterPress\";\n\nlet ForgetPage: React.FC = () => {\n  const _ = useLocalizer(\"forgot\");\n  const currentRoute = useCurrentRoute();\n\n  const navigation = useNavigationChecked();\n  const redirect = () => {\n    navigation.navigate(currentRoute.url.query.loginRedirectUrl || \"/\");\n  };\n\n  useEffect(() => {\n    if (appState.currentUser) redirect();\n  }, []);\n\n  useEffect(() => {\n    appState.enterNewPage(_(\".title\"));\n  }, [appState.locale]);\n\n  const recaptcha = useRecaptcha();\n\n  const [successMessage, setSuccessMessage] = useState<string>(null);\n\n  const [email, setEmail] = useState(\"\");\n  const [emailVerificationCode, setEmailVerificationCode] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [retypePassword, setRetypePassword] = useState(\"\");\n  const [resetPasswordPending, setResetPasswordPending] = useState(false);\n\n  const refEmailInput = useRef<HTMLInputElement>();\n  const refEmailVerificationCodeInput = useRef<HTMLInputElement>();\n  const refPasswordInput = useRef<HTMLInputElement>();\n  const refRetypePasswordInput = useRef<HTMLInputElement>();\n\n  const refForm = useRef(null);\n\n  // emailCheckStatus: false (not checked) | true (pass) | string (error message)\n  const [checkEmail, waitForEmailCheck, getEmailUIValidateStatus, getEmailUIHelp] = useFieldCheck(\n    email,\n    false,\n    false,\n    value => {\n      if (!value) return _(\".empty_email\");\n      if (!isValidEmail(value)) return _(\".invalid_email\");\n      return true;\n    }\n  );\n\n  // passwordCheckStatus: false (not checked) | true (pass) | string (error message)\n  const [\n    checkPassword,\n    waitForPasswordCheck,\n    getPasswordUIValidateStatus,\n    getPasswordUIHelp,\n    getCurrentPassword\n  ] = useFieldCheck(password, false, false, value => {\n    if (!value) return _(\".empty_password\");\n    if (!isValidPassword(value)) return _(\".invalid_password\");\n    return true;\n  });\n\n  const [\n    checkRetypePassword,\n    waitForRetypePasswordCheck,\n    getRetypePasswordUIValidateStatus,\n    getRetypePasswordUIHelp\n  ] = useFieldCheck(retypePassword, true, false, value => {\n    console.log(\"retype check: \", retypePassword, getCurrentPassword());\n    if (value !== getCurrentPassword()) return _(\".passwords_do_not_match\");\n    if (!value) return _(\".empty_password\");\n    return true;\n  });\n\n  const [emailVerificationCodeError, setEmailVerificationCodeError] = useState(false);\n\n  async function onSubmit() {\n    if (resetPasswordPending) return;\n    setResetPasswordPending(true);\n\n    if (!(await waitForEmailCheck())) {\n      toast.error(_(\".email_invalid_message\"));\n      refEmailInput.current.focus();\n      refEmailInput.current.select();\n    } else if (!(await waitForPasswordCheck())) {\n      toast.error(_(\".invalid_password_message\"));\n      refPasswordInput.current.focus();\n      refPasswordInput.current.select();\n    } else if (!(await waitForRetypePasswordCheck())) {\n      toast.error(_(\".passwords_do_not_match_message\"));\n      refRetypePasswordInput.current.focus();\n      refRetypePasswordInput.current.select();\n    } else {\n      const { requestError, response } = await api.auth.resetPassword(\n        {\n          email: email,\n          emailVerificationCode: emailVerificationCode,\n          newPassword: password\n        },\n        recaptcha(\"ResetPassword\")\n      );\n\n      if (requestError) toast.error(requestError(_));\n      else if (response.error) {\n        switch (response.error) {\n          case \"NO_SUCH_USER\":\n            toast.error(_(`.errors.${response.error}`));\n            refEmailInput.current.focus();\n            break;\n          case \"INVALID_EMAIL_VERIFICATION_CODE\":\n            toast.error(_(`.errors.${response.error}`));\n            setEmailVerificationCodeError(true);\n            refEmailVerificationCodeInput.current.focus();\n            break;\n        }\n      } else {\n        // Reset password success\n        appState.token = response.token;\n\n        {\n          setSuccessMessage(_(\".success\"));\n\n          setTimeout(async () => {\n            await refreshSession();\n            redirect();\n          }, 1000);\n        }\n\n        return;\n      }\n    }\n\n    setResetPasswordPending(false);\n  }\n\n  const [sendEmailVerificationCodeTimeout, setSendEmailVerificationCodeTimeout] = useState(0);\n  const [sendEmailVerificationCodePending, setSendEmailVerificationCodePending] = useState(false);\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      setSendEmailVerificationCodeTimeout(timeout => timeout && timeout - 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  async function onSendEmailVerificationCode() {\n    if (sendEmailVerificationCodePending) return;\n    setSendEmailVerificationCodePending(true);\n\n    if (!(await waitForEmailCheck())) {\n      toast.error(_(\".email_invalid_message\"));\n      refEmailInput.current.focus();\n      refEmailInput.current.select();\n    } else {\n      const { requestError, response } = await api.auth.sendEmailVerificationCode(\n        {\n          email: email,\n          type: \"ResetPassword\",\n          locale: appState.locale\n        },\n        recaptcha(\"SendEmailVerifactionCode_ResetPassword\")\n      );\n      if (requestError) toast.error(requestError(_));\n      else if (response.error) toast.error(_(`.errors.${response.error}`, { errorMessage: response.errorMessage }));\n      else {\n        toast.success(_(\".email_verification_code_sent\"));\n        setSendEmailVerificationCodeTimeout(61);\n      }\n    }\n\n    setSendEmailVerificationCodePending(false);\n  }\n\n  function onChangeVerificationCode(code: string) {\n    setEmailVerificationCodeError(false);\n    setEmailVerificationCode(stripInvalidCharactersInEmailVerificationCode(code));\n  }\n\n  const logo = appState.appLogoThemed && <img className={style.logo} {...appState.appLogoThemed} />;\n\n  return (\n    <>\n      <div className={style.wrapper}>\n        <Header as=\"h2\" className={style.header + (logo ? \" \" + style.withLogo : \"\")} textAlign=\"center\">\n          {logo}\n          {_(\".reset_your_password\")}\n        </Header>\n        <Form size=\"large\" ref={refForm}>\n          <Segment>\n            {/* email */}\n            <Ref innerRef={field => field && (refEmailInput.current = field.querySelector(\"input\"))}>\n              <Form.Field\n                control={Input}\n                error={\n                  getEmailUIValidateStatus() === \"error\" && {\n                    content: getEmailUIHelp(),\n                    pointing: \"left\"\n                  }\n                }\n                loading={getEmailUIValidateStatus() === \"validating\"}\n                fluid\n                icon=\"envelope\"\n                iconPosition=\"left\"\n                placeholder={_(\".email\")}\n                value={email}\n                autoComplete=\"email\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setEmail(e.target.value)}\n                onBlur={() => checkEmail()}\n                onKeyPress={onEnterPress(() => {\n                  if (sendEmailVerificationCodeTimeout === 0) onSendEmailVerificationCode();\n                  refEmailVerificationCodeInput.current.focus();\n                })}\n              />\n            </Ref>\n\n            {/* email verification code */}\n            <Ref innerRef={field => field && (refEmailVerificationCodeInput.current = field.querySelector(\"input\"))}>\n              <Form.Field\n                control={Input}\n                error={\n                  emailVerificationCodeError && {\n                    content: _(\".invalid_email_verification_code\"),\n                    pointing: \"left\"\n                  }\n                }\n                fluid\n                icon=\"shield\"\n                iconPosition=\"left\"\n                placeholder={_(\".email_verification_code\")}\n                value={emailVerificationCode}\n                autoComplete=\"off\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => onChangeVerificationCode(e.target.value)}\n                onKeyPress={onEnterPress(() => refPasswordInput.current.focus())}\n                action={\n                  <Button\n                    tabIndex={-1}\n                    disabled={sendEmailVerificationCodeTimeout !== 0}\n                    loading={sendEmailVerificationCodePending}\n                    content={\n                      sendEmailVerificationCodeTimeout\n                        ? `${sendEmailVerificationCodeTimeout > 60 ? 60 : sendEmailVerificationCodeTimeout}s`\n                        : _(\".send_email_verification_code\")\n                    }\n                    onClick={onSendEmailVerificationCode}\n                  />\n                }\n              />\n            </Ref>\n\n            {/* password */}\n            <Ref innerRef={field => field && (refPasswordInput.current = field.querySelector(\"input\"))}>\n              <Form.Field\n                control={Input}\n                error={\n                  getPasswordUIValidateStatus() === \"error\" && {\n                    content: getPasswordUIHelp(),\n                    pointing: \"left\"\n                  }\n                }\n                loading={getPasswordUIValidateStatus() === \"validating\"}\n                fluid\n                icon=\"lock\"\n                iconPosition=\"left\"\n                placeholder={_(\".password\")}\n                value={password}\n                type=\"password\"\n                autoComplete=\"new-password\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPassword(e.target.value)}\n                onBlur={() => checkPassword()}\n                onKeyPress={onEnterPress(() => refRetypePasswordInput.current.focus())}\n              />\n            </Ref>\n            <Ref innerRef={field => field && (refRetypePasswordInput.current = field.querySelector(\"input\"))}>\n              <Form.Field\n                control={Input}\n                error={\n                  getRetypePasswordUIValidateStatus() === \"error\" && {\n                    content: getRetypePasswordUIHelp(),\n                    pointing: \"left\"\n                  }\n                }\n                loading={getRetypePasswordUIValidateStatus() === \"validating\"}\n                fluid\n                icon=\"lock\"\n                iconPosition=\"left\"\n                placeholder={_(\".retype_password\")}\n                value={retypePassword}\n                type=\"password\"\n                autoComplete=\"new-password\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setRetypePassword(e.target.value)}\n                onBlur={() => checkRetypePassword()}\n                onKeyPress={onEnterPress(() => {\n                  checkRetypePassword(); // Since the focus is not lost, forcibly re-check the field\n                  onSubmit();\n                })}\n              />\n            </Ref>\n\n            {recaptcha.getCopyrightMessage(style.recaptchaCopyright)}\n\n            <Button\n              className={successMessage && style.successButton}\n              primary={!successMessage}\n              color={successMessage ? \"green\" : null}\n              fluid\n              size=\"large\"\n              loading={resetPasswordPending && !successMessage}\n              onClick={() => onSubmit()}\n            >\n              {successMessage ? (\n                <>\n                  <Icon name=\"checkmark\" />\n                  {successMessage}\n                </>\n              ) : (\n                _(\".submit\")\n              )}\n            </Button>\n          </Segment>\n        </Form>\n      </div>\n    </>\n  );\n};\n\nForgetPage = observer(ForgetPage);\n\nexport default route({\n  view: <ForgetPage />\n});\n"],"sourceRoot":""}