{"version":3,"sources":["pages/judge-machine/JudgeMachinePage.tsx"],"names":["fetchData","a","api","judgeClient","listJudgeClients","requestError","response","RouteError","JudgeMachinePage","props","_","useLocalizer","navigation","useNavigationChecked","getCpu","systemInfo","hasFlags","cpu","flags","hasCache","cache","Object","keys","length","trigger","model","disabled","content","className","style","cpuFlags","cpuCache","entries","map","name","value","align","cpuCacheName","Math","round","hoverable","position","getMemory","memory","description","size","getKernel","kernel","useEffect","appState","enterNewPage","locale","useState","resetPopupOpened","setResetPopupOpened","id","resetJudgeClientKey","toast","error","success","refresh","deletePopupOpened","setDeletePopupOpened","deleteJudgeClient","addPopupOpened","setAddPopupOpened","addNewName","setAddNewName","addNewNameValid","useAsyncCallbackPending","addPending","addJudgeClient","allowedHosts","onAddJudgeClient","headerWrapper","as","icon","header","labelPosition","onClick","hasManagePermission","open","onOpen","onClose","Input","width","placeholder","onChange","e","onKeyPress","onEnterPress","loading","addButton","primary","on","judgeClients","Header","Row","HeaderCell","nowrap","textAlign","columnOperations","Body","Cell","status","onlineStatus","circular","color","online","empty","title","key","negative","onResetKey","onDelete","observer","defineRoute","request"],"mappings":"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","file":"static/js/151.5bed1e91.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Table, Header, Button, Segment, Label, Popup, Icon, Form } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\n\nimport style from \"./JudgeMachinePage.module.less\";\n\nimport { useAsyncCallbackPending, useLocalizer, useNavigationChecked } from \"@/utils/hooks\";\nimport api from \"@/api\";\nimport toast from \"@/utils/toast\";\nimport { appState } from \"@/appState\";\nimport { defineRoute, RouteError } from \"@/AppRouter\";\nimport { onEnterPress } from \"@/utils/onEnterPress\";\nimport { EmojiRenderer } from \"@/components/EmojiRenderer\";\n\ninterface JudgeClientSystemInfo {\n  os: string;\n  kernel: string;\n  arch: string;\n  cpu: {\n    model: string;\n    flags: string;\n    cache: Record<string, number>;\n  };\n  memory: {\n    size: number;\n    description: string;\n  };\n  languages: {};\n  extraInfo: string;\n}\n\nasync function fetchData(): Promise<JudgeMachinePageProps> {\n  const { requestError, response } = await api.judgeClient.listJudgeClients();\n  if (requestError) throw new RouteError(requestError);\n  else return response;\n}\n\ninterface JudgeMachinePageProps {\n  hasManagePermission: boolean;\n  judgeClients: ApiTypes.JudgeClientInfoDto[];\n}\n\nlet JudgeMachinePage: React.FC<JudgeMachinePageProps> = props => {\n  const _ = useLocalizer(\"judge_machine\");\n  const navigation = useNavigationChecked();\n\n  useEffect(() => {\n    appState.enterNewPage(_(\".title\"), null, false);\n  }, [appState.locale]);\n\n  function getCpu(judgeClient: ApiTypes.JudgeClientInfoDto) {\n    if (judgeClient.systemInfo && judgeClient.systemInfo) {\n      const systemInfo = judgeClient.systemInfo as JudgeClientSystemInfo;\n      const hasFlags = !!systemInfo.cpu.flags;\n      const hasCache =\n        systemInfo.cpu.cache &&\n        typeof systemInfo.cpu.cache === \"object\" &&\n        Object.keys(systemInfo.cpu.cache).length !== 0;\n      return (\n        <Popup\n          trigger={<span>{systemInfo.cpu.model}</span>}\n          disabled={!hasFlags && !hasCache}\n          content={\n            <>\n              {hasFlags && (\n                <>\n                  <Header content=\"Flags\" />\n                  <p className={style.cpuFlags}>\n                    <code>{systemInfo.cpu.flags}</code>\n                  </p>\n                </>\n              )}\n              {hasCache && (\n                <>\n                  <Header content=\"Cache\" />\n                  <table className={style.cpuCache}>\n                    <tbody>\n                      {Object.entries(systemInfo.cpu.cache).map(([name, value]) => (\n                        <tr key={name}>\n                          <td align=\"left\" className={style.cpuCacheName}>\n                            <strong>{name}</strong>\n                          </td>\n                          <td>{Math.round(value / 1024) + \" KiB\"}</td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </>\n              )}\n            </>\n          }\n          hoverable\n          position=\"bottom center\"\n        />\n      );\n    }\n    return \"-\";\n  }\n\n  function getMemory(judgeClient: ApiTypes.JudgeClientInfoDto) {\n    if (judgeClient.systemInfo && judgeClient.systemInfo) {\n      const systemInfo = judgeClient.systemInfo as JudgeClientSystemInfo;\n      return systemInfo.memory.description + \" (\" + Math.round(systemInfo.memory.size / 1024) + \" MiB)\";\n    }\n    return \"-\";\n  }\n\n  function getKernel(judgeClient: ApiTypes.JudgeClientInfoDto) {\n    if (judgeClient.systemInfo && judgeClient.systemInfo) {\n      const systemInfo = judgeClient.systemInfo as JudgeClientSystemInfo;\n      return systemInfo.kernel;\n    }\n    return \"-\";\n  }\n\n  const [resetPopupOpened, setResetPopupOpened] = useState<number>(null);\n  async function onResetKey(id: number) {\n    const { requestError, response } = await api.judgeClient.resetJudgeClientKey({\n      id\n    });\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) toast.error(_(`.error.${response.error}`));\n    else {\n      toast.success(_(\".reset_key_success\"));\n      navigation.refresh();\n      setResetPopupOpened(null);\n    }\n  }\n\n  const [deletePopupOpened, setDeletePopupOpened] = useState<number>(null);\n  async function onDelete(id: number) {\n    const { requestError, response } = await api.judgeClient.deleteJudgeClient({\n      id\n    });\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) toast.error(_(`.error.${response.error}`));\n    else {\n      toast.success(_(\".delete_success\"));\n      navigation.refresh();\n      setDeletePopupOpened(null);\n    }\n  }\n\n  const [addPopupOpened, setAddPopupOpened] = useState(false);\n  const [addNewName, setAddNewName] = useState(\"\");\n  const addNewNameValid = addNewName.length >= 1 && addNewName.length <= 80;\n  const [addPending, onAddJudgeClient] = useAsyncCallbackPending(async () => {\n    if (addPending) return;\n\n    const { requestError, response } = await api.judgeClient.addJudgeClient({\n      name: addNewName,\n      allowedHosts: []\n    });\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) toast.error(_(`.error.${response.error}`));\n    else {\n      toast.success(_(\".add_success\"));\n      navigation.refresh();\n    }\n\n    setAddPopupOpened(false);\n    setAddNewName(\"\");\n  });\n\n  return (\n    <>\n      <div className={style.headerWrapper}>\n        <Header as=\"h1\" icon=\"server\" className={style.header + \" withIcon\"} content={_(\".header\")} />\n        <Button icon=\"refresh\" content={_(\".refresh\")} labelPosition=\"left\" onClick={() => navigation.refresh()} />\n        {props.hasManagePermission && (\n          <Popup\n            open={addPopupOpened || addPending}\n            onOpen={() => setAddPopupOpened(true)}\n            onClose={() => setAddPopupOpened(false)}\n            content={\n              <Form>\n                <Form.Input\n                  style={{ width: 230 }}\n                  placeholder={_(\".add_new_name\")}\n                  value={addNewName}\n                  onChange={(e, { value }) => setAddNewName(value)}\n                  onKeyPress={onEnterPress(() => addNewNameValid && onAddJudgeClient())}\n                />\n                <Button loading={addPending} disabled={!addNewNameValid} onClick={onAddJudgeClient}>\n                  {_(\".confirm_add\")}\n                </Button>\n              </Form>\n            }\n            trigger={\n              <Button className={style.addButton} icon=\"plus\" content={_(\".add\")} labelPosition=\"left\" primary />\n            }\n            on=\"click\"\n            position=\"bottom right\"\n          />\n        )}\n      </div>\n      {!props.judgeClients.length ? (\n        <Segment placeholder>\n          <Header icon>\n            <Icon name=\"server\" />\n            {_(\".no_judge_machine\")}\n          </Header>\n        </Segment>\n      ) : (\n        <Table>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell className={style.nowrap}>{_(\".status\")}</Table.HeaderCell>\n              <Table.HeaderCell className={style.nowrap}>{_(\".name\")}</Table.HeaderCell>\n              <Table.HeaderCell>{_(\".cpu\")}</Table.HeaderCell>\n              <Table.HeaderCell>{_(\".memory\")}</Table.HeaderCell>\n              <Table.HeaderCell className={style.nowrap}>{_(\".kernel\")}</Table.HeaderCell>\n              {props.hasManagePermission && (\n                <Table.HeaderCell textAlign=\"center\" className={style.columnOperations}>\n                  {_(\".operations\")}\n                </Table.HeaderCell>\n              )}\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {props.judgeClients.map(judgeClient => (\n              <Table.Row key={judgeClient.id}>\n                <Table.Cell className={style.nowrap}>\n                  <div className={style.status}>\n                    <Label className={style.onlineStatus} circular color={judgeClient.online ? \"green\" : \"red\"} empty />\n                    {judgeClient.online ? _(\".online\") : _(\".offline\")}\n                  </div>\n                </Table.Cell>\n                <EmojiRenderer>\n                  <Table.Cell className={style.nowrap}>{judgeClient.name}</Table.Cell>\n                </EmojiRenderer>\n                <Table.Cell>{getCpu(judgeClient)}</Table.Cell>\n                <Table.Cell>{getMemory(judgeClient)}</Table.Cell>\n                <Table.Cell className={style.nowrap}>{getKernel(judgeClient)}</Table.Cell>\n                {props.hasManagePermission && (\n                  <Table.Cell textAlign=\"center\" className={style.columnOperations}>\n                    <Popup\n                      trigger={<Icon name=\"key\" title={_(\".key\")} />}\n                      content={<code>{judgeClient.key}</code>}\n                      on=\"click\"\n                      position=\"left center\"\n                    />\n                    <Popup\n                      open={resetPopupOpened === judgeClient.id}\n                      onOpen={() => setResetPopupOpened(judgeClient.id)}\n                      onClose={() => setResetPopupOpened(null)}\n                      trigger={<Icon name=\"refresh\" title={_(\".reset_key\")} />}\n                      content={\n                        <Button negative content={_(\".confirm_reset_key\")} onClick={() => onResetKey(judgeClient.id)} />\n                      }\n                      on=\"click\"\n                      position=\"left center\"\n                    />\n                    <Popup\n                      open={deletePopupOpened === judgeClient.id}\n                      onOpen={() => setDeletePopupOpened(judgeClient.id)}\n                      onClose={() => setDeletePopupOpened(null)}\n                      trigger={<Icon name=\"delete\" title={_(\".delete\")} />}\n                      content={\n                        <Button negative content={_(\".confirm_delete\")} onClick={() => onDelete(judgeClient.id)} />\n                      }\n                      on=\"click\"\n                      position=\"left center\"\n                    />\n                  </Table.Cell>\n                )}\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      )}\n    </>\n  );\n};\n\nJudgeMachinePage = observer(JudgeMachinePage);\n\nexport default defineRoute(async request => <JudgeMachinePage {...await fetchData()} />);\n"],"sourceRoot":""}