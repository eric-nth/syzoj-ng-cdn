{"version":3,"sources":["pages/user/edit/PrivilegeView.tsx"],"names":["Privilege","fetchData","username","a","api","user","getUserMeta","getPrivileges","requestError","response","RouteError","showRefresh","showBack","error","makeToBeLocalizedText","View","observer","props","_","useLocalizer","useEffect","appState","enterNewPage","meta","locale","useConfirmNavigation","setModified","useAsyncCallbackPending","setUserPrivileges","userId","id","privileges","toast","success","pending","onSubmit","useState","Set","setPrivileges","isAdmin","currentUser","className","style","sectionHeader","size","content","Object","values","map","privilege","privilegeRow","toggle","readOnly","label","checked","has","onChange","e","newPrivileges","add","delete","togglePrivilege","notes","notesAdminOnly","submit","loading","disabled","primary","onClick"],"mappings":"iNAqBKA,E,iKARE,SAAeC,EAAtB,kC,4CAAO,WAAyBC,GAAzB,mBAAAC,EAAA,sEACoCC,IAAIC,KAAKC,YAAY,CAAEJ,WAAUK,eAAe,IADpF,mBACGC,EADH,EACGA,aAAcC,EADjB,EACiBA,UAClBD,EAFC,sBAEmB,IAAIE,IAAWF,EAAc,CAAEG,aAAa,EAAMC,UAAU,IAF/E,WAGIH,EAASI,MAHb,uBAG0B,IAAIH,IAAWI,YAAsB,oBAAD,OAAqBL,EAASI,SAH5F,iCAKEJ,GALF,6C,gCAQFT,K,4BAAAA,E,wBAAAA,E,kCAAAA,E,8BAAAA,E,8BAAAA,E,oCAAAA,E,+BAAAA,M,KAeL,IA6Dae,EAAOC,aA7DgC,SAAAC,GAClD,IAAMC,EAAIC,YAAa,uBAEvBC,qBAAU,WACRC,IAASC,aAAT,UAAyBJ,EAAE,UAA3B,cAA0CD,EAAMM,KAAKrB,UAAY,MAAM,KACtE,CAACmB,IAASG,OAAQP,EAAMM,OALgC,MAOnCE,cAAfC,EAPkD,sBAS/BC,YAAuB,sBAAC,gCAAAxB,EAAA,sEACTC,IAAIC,KAAKuB,kBAAkB,CAClEC,OAAQZ,EAAMM,KAAKO,GACnBC,WAAW,YAAKA,KAHgC,gBAC1CvB,EAD0C,EAC1CA,aAAcC,EAD4B,EAC5BA,SAIlBD,EAAcwB,IAAMnB,MAAML,EAAaU,IAClCT,EAASI,MAAOmB,IAAMnB,MAAMK,EAAE,oBAAD,OAAqBT,EAASI,UAElEa,GAAY,GACZM,IAAMC,QAAQf,EAAE,cATgC,4CATO,mBASpDgB,EAToD,KAS3CC,EAT2C,OAsBvBC,mBAAS,IAAIC,IAAIpB,EAAMc,aAtBA,mBAsBpDA,EAtBoD,KAsBxCO,EAtBwC,KA+B3D,IAAMC,EAAUlB,IAASmB,YAAYD,QAErC,OACE,qCACE,cAAC,IAAD,CAAQE,UAAWC,IAAMC,cAAeC,KAAK,QAAQC,QAAS3B,EAAE,aAC/D4B,OAAOC,OAAO/C,GAAWgD,KAAI,SAAAC,GAAS,OACrC,sBAAqBR,UAAWC,IAAMQ,aAAtC,UACE,cAAC,IAAD,CACEC,QAAM,EACNC,UAAWb,EACXc,MAAOnC,EAAE,eAAD,OAAgB+B,EAAhB,UACRK,QAASvB,EAAWwB,IAAIN,GACxBO,SAAU,SAACC,EAAD,OAAMH,EAAN,EAAMA,QAAN,OApBpB,SAAyBL,EAAsBM,GAC7C,IAAMG,EAAgB,IAAIrB,IAAIN,GAC1BwB,EAAKG,EAAcC,IAAIV,GACtBS,EAAcE,OAAOX,GAC1BX,EAAcoB,GACdhC,GAAY,GAe0BmC,CAAgBZ,EAAWK,MAE3D,qBAAKb,UAAWC,IAAMoB,MAAtB,SAA8B5C,EAAE,eAAD,OAAgB+B,EAAhB,eARvBA,MAWZ,qBAAKR,UAAWC,IAAMoB,MAAQ,IAAMpB,IAAMqB,eAA1C,SAA2D7C,EAAE,iBAC7D,cAAC,IAAD,CACEuB,UAAWC,IAAMsB,OACjBC,QAAS/B,EACTgC,UAAW3B,EACX4B,SAAO,EACPtB,QAAS3B,EAAE,WACXkD,QAASjC","file":"static/js/168.9c09df32.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Header, Checkbox, Button } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\n\nimport style from \"./UserEdit.module.less\";\n\nimport api from \"@/api\";\nimport { appState } from \"@/appState\";\nimport toast from \"@/utils/toast\";\nimport { useAsyncCallbackPending, useConfirmNavigation, useLocalizer } from \"@/utils/hooks\";\nimport { RouteError } from \"@/AppRouter\";\nimport { makeToBeLocalizedText } from \"@/locales\";\n\nexport async function fetchData(username: string) {\n  const { requestError, response } = await api.user.getUserMeta({ username, getPrivileges: true });\n  if (requestError) throw new RouteError(requestError, { showRefresh: true, showBack: true });\n  else if (response.error) throw new RouteError(makeToBeLocalizedText(`user_edit.errors.${response.error}`));\n\n  return response;\n}\n\nenum Privilege {\n  EditHomepage = \"EditHomepage\",\n  ManageUser = \"ManageUser\",\n  ManageUserGroup = \"ManageUserGroup\",\n  ManageProblem = \"ManageProblem\",\n  ManageContest = \"ManageContest\",\n  ManageDiscussion = \"ManageDiscussion\",\n  SkipRecaptcha = \"SkipRecaptcha\"\n}\n\ninterface PrevilegeViewProps {\n  meta?: ApiTypes.UserMetaDto;\n  privileges?: ApiTypes.GetUserMetaResponseDto[\"privileges\"];\n}\n\nconst PrevilegeView: React.FC<PrevilegeViewProps> = props => {\n  const _ = useLocalizer(\"user_edit.privilege\");\n\n  useEffect(() => {\n    appState.enterNewPage(`${_(`.title`)} - ${props.meta.username}`, null, false);\n  }, [appState.locale, props.meta]);\n\n  const [, setModified] = useConfirmNavigation();\n\n  const [pending, onSubmit] = useAsyncCallbackPending(async () => {\n    const { requestError, response } = await api.user.setUserPrivileges({\n      userId: props.meta.id,\n      privileges: [...privileges]\n    });\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) toast.error(_(`user_edit.errors.${response.error}`));\n    else {\n      setModified(false);\n      toast.success(_(\".success\"));\n    }\n  });\n\n  const [privileges, setPrivileges] = useState(new Set(props.privileges as Privilege[]));\n  function togglePrivilege(privilege: Privilege, has: boolean) {\n    const newPrivileges = new Set(privileges);\n    if (has) newPrivileges.add(privilege);\n    else newPrivileges.delete(privilege);\n    setPrivileges(newPrivileges);\n    setModified(true);\n  }\n\n  const isAdmin = appState.currentUser.isAdmin;\n\n  return (\n    <>\n      <Header className={style.sectionHeader} size=\"large\" content={_(\".header\")} />\n      {Object.values(Privilege).map(privilege => (\n        <div key={privilege} className={style.privilegeRow}>\n          <Checkbox\n            toggle\n            readOnly={!isAdmin}\n            label={_(`.privileges.${privilege}.name`)}\n            checked={privileges.has(privilege)}\n            onChange={(e, { checked }) => togglePrivilege(privilege, checked)}\n          />\n          <div className={style.notes}>{_(`.privileges.${privilege}.notes`)}</div>\n        </div>\n      ))}\n      <div className={style.notes + \" \" + style.notesAdminOnly}>{_(\".admin_only\")}</div>\n      <Button\n        className={style.submit}\n        loading={pending}\n        disabled={!isAdmin}\n        primary\n        content={_(\".submit\")}\n        onClick={onSubmit}\n      />\n    </>\n  );\n};\n\nexport const View = observer(PrevilegeView);\n"],"sourceRoot":""}