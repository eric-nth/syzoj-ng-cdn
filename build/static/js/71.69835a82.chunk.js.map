{"version":3,"sources":["pages/submission/componments/SubmissionItem.tsx"],"names":["parseSubmissionMeta","submission","submissionLink","id","timeString","formatDateTime","submitTime","problemIdString","getProblemIdString","problem","problemUrl","getProblemUrl","SubmissionHeader","props","_","useLocalizer","Row","className","style","page","HeaderCell","columnStatus","textAlign","columnScore","columnProblemAndSubmitter","submitter","config","hideTimeMemory","columnTime","columnMemory","columnAnswer","columnSubmitTime","SubmissionItem","useState","refAnswerInfoIcon","setRefAnswerInfoIcon","statusPopup","x","Cell","href","status","statusText","score","getProblemDisplayName","problemTitle","user","Math","round","timeUsed","title","memoryUsed","formatFileSize","popupOnIcon","context","content","answerInfo","disabled","hoverable","trigger","innerRef","name","Object","values","CodeLanguage","includes","codeLanguage","answerSize","onDownloadAnswer","downloadIcon","onClick","position","on","SubmissionHeaderMobile","submissionItemMobile","flexContainer","headerScoreColumn","importantField","SubmissionItemMobile","SubmissionItemExtraRows","extraRowsColumnStatus","extraRowsColumnScore","columnProblem","extraRowsColumnProblem","columnSubmitter","extraRowsColumnSubmitter","isMobile","extraRowsWrapper"],"mappings":"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","file":"static/js/71.69835a82.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Table, Icon, Popup, Ref } from \"semantic-ui-react\";\n\nimport style from \"./SubmissionItem.module.less\";\n\nimport { useLocalizer, Link } from \"@/utils/hooks\";\nimport formatFileSize from \"@/utils/formatFileSize\";\nimport formatDateTime from \"@/utils/formatDateTime\";\nimport UserLink from \"@/components/UserLink\";\nimport StatusText from \"@/components/StatusText\";\nimport ScoreText from \"@/components/ScoreText\";\nimport { CodeLanguage } from \"@/interfaces/CodeLanguage\";\nimport { getProblemDisplayName, getProblemIdString, getProblemUrl } from \"@/pages/problem/utils\";\nimport { EmojiRenderer } from \"@/components/EmojiRenderer\";\n\nfunction parseSubmissionMeta(submission: ApiTypes.SubmissionMetaDto) {\n  return {\n    submission,\n    submissionLink: `/s/${submission.id}`,\n    timeString: formatDateTime(submission.submitTime),\n    problemIdString: getProblemIdString(submission.problem),\n    problemUrl: getProblemUrl(submission.problem)\n  };\n}\n\ninterface SubmissionItemConfig {\n  hideTimeMemory?: boolean;\n}\n\ninterface SubmissionHeaderProps {\n  page: \"submission\" | \"submissions\" | \"statistics\";\n  config?: SubmissionItemConfig;\n}\n\nexport const SubmissionHeader: React.FC<SubmissionHeaderProps> = props => {\n  const _ = useLocalizer(\"submission_item\");\n\n  return (\n    <Table.Row className={style[props.page + \"Page\"]}>\n      <Table.HeaderCell className={style.columnStatus} textAlign=\"left\">\n        {_(\".columns.status\")}\n      </Table.HeaderCell>\n      <Table.HeaderCell className={style.columnScore}>{_(\".columns.score\")}</Table.HeaderCell>\n      <Table.HeaderCell className={style.columnProblemAndSubmitter} textAlign=\"left\">\n        <div className={style.problem}>{_(\".columns.problem\")}</div>\n        <div className={style.submitter}>{_(\".columns.submitter\")}</div>\n      </Table.HeaderCell>\n      {!props?.config?.hideTimeMemory && (\n        <>\n          <Table.HeaderCell className={style.columnTime}>{_(\".columns.time\")}</Table.HeaderCell>\n          <Table.HeaderCell className={style.columnMemory}>{_(\".columns.memory\")}</Table.HeaderCell>\n        </>\n      )}\n      <Table.HeaderCell className={style.columnAnswer}>{_(\".columns.answer\")}</Table.HeaderCell>\n      <Table.HeaderCell className={style.columnSubmitTime}>{_(\".columns.submit_time\")}</Table.HeaderCell>\n    </Table.Row>\n  );\n};\n\ninterface SubmissionItemProps {\n  submission: ApiTypes.SubmissionMetaDto;\n  page: \"submission\" | \"submissions\" | \"statistics\";\n\n  // This is passed to <StatusText> to override the display text for status\n  statusText?: string;\n\n  // Mouse hover on \"answer\" column to display\n  answerInfo?: React.ReactNode;\n\n  // If passed, will show a download icon\n  onDownloadAnswer?: React.ReactNode;\n\n  // Mouse hover on \"status\" to display\n  statusPopup?: (statusNode: React.ReactElement) => React.ReactNode;\n\n  config?: SubmissionItemConfig;\n}\n\nexport const SubmissionItem: React.FC<SubmissionItemProps> = props => {\n  const _ = useLocalizer(\"submission_item\");\n\n  const { submission, submissionLink, timeString, problemIdString, problemUrl } = parseSubmissionMeta(props.submission);\n\n  const [refAnswerInfoIcon, setRefAnswerInfoIcon] = useState<HTMLElement>();\n\n  return (\n    <Table.Row className={style[props.page + \"Page\"]}>\n      {(props.statusPopup || (x => x))(\n        <Table.Cell className={style.columnStatus} textAlign=\"left\">\n          <Link href={props.page !== \"submission\" ? submissionLink : null}>\n            <StatusText status={submission.status} statusText={props.statusText} />\n          </Link>\n        </Table.Cell>\n      )}\n      <Table.Cell className={style.columnScore}>\n        <Link href={props.page !== \"submission\" ? submissionLink : null}>\n          <ScoreText score={submission.score || 0} />\n        </Link>\n      </Table.Cell>\n      <Table.Cell className={style.columnProblemAndSubmitter} textAlign=\"left\">\n        <div className={style.problem}>\n          <EmojiRenderer>\n            <Link href={problemUrl}>{getProblemDisplayName(submission.problem, submission.problemTitle, _)}</Link>\n          </EmojiRenderer>\n        </div>\n        <div className={style.submitter}>\n          <UserLink user={submission.submitter} />\n        </div>\n      </Table.Cell>\n      {!props?.config?.hideTimeMemory && (\n        <>\n          <Table.Cell className={style.columnTime}>{Math.round(submission.timeUsed || 0) + \" ms\"}</Table.Cell>\n          <Table.Cell className={style.columnMemory} title={(submission.memoryUsed || 0) + \" K\"}>\n            {formatFileSize((submission.memoryUsed || 0) * 1024, 1)}\n          </Table.Cell>\n        </>\n      )}\n      <Table.Cell className={style.columnAnswer}>\n        <Popup\n          className={style.popupOnIcon}\n          context={refAnswerInfoIcon}\n          content={props.answerInfo}\n          disabled={!props.answerInfo}\n          hoverable\n          trigger={\n            <span>\n              {props.answerInfo && (\n                <Ref innerRef={setRefAnswerInfoIcon}>\n                  <Icon name=\"info circle\" />\n                </Ref>\n              )}\n              {Object.values(CodeLanguage).includes(submission.codeLanguage as any) && (\n                <>\n                  {props.page !== \"submission\" ? (\n                    <Link href={submissionLink}>{_(`code_language.${submission.codeLanguage}.name`)}</Link>\n                  ) : (\n                    _(`code_language.${submission.codeLanguage}.name`)\n                  )}\n                  &nbsp;/&nbsp;\n                </>\n              )}\n              <span title={submission.answerSize + \" B\"}>{formatFileSize(submission.answerSize, 1)}</span>\n              {props.onDownloadAnswer && (\n                <Icon className={style.downloadIcon} name=\"download\" onClick={props.onDownloadAnswer} />\n              )}\n            </span>\n          }\n          position=\"bottom center\"\n          on=\"hover\"\n        />\n      </Table.Cell>\n      <Table.Cell className={style.columnSubmitTime} title={timeString[1]}>\n        {timeString[0]}\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\ninterface SubmissionHeaderMobileProps {\n  importantField?: \"timeUsed\" | \"memoryUsed\";\n}\n\nexport const SubmissionHeaderMobile: React.FC<SubmissionHeaderMobileProps> = props => {\n  const _ = useLocalizer(\"submission_item\");\n\n  return (\n    <Table.Row className={style.submissionItemMobile}>\n      <Table.HeaderCell>\n        <div className={style.flexContainer}>\n          <div>\n            <div>\n              <span>\n                <span>{_(\".columns.status\")}</span>\n                <span className={style.headerScoreColumn}>{_(\".columns.score\")}</span>\n              </span>\n            </div>\n            <div>{_(\".columns.answer\")}</div>\n          </div>\n\n          <div>\n            <div>{_(\".columns.problem\")}</div>\n            <div>\n              <div>{_(\".columns.submitter\")}</div>\n              <div>\n                {_(\n                  props.importantField === \"timeUsed\"\n                    ? \".columns.time\"\n                    : props.importantField === \"memoryUsed\"\n                    ? \".columns.memory\"\n                    : \".columns.submit_time\"\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </Table.HeaderCell>\n    </Table.Row>\n  );\n};\n\ninterface SubmissionItemMobileProps {\n  submission: ApiTypes.SubmissionMetaDto;\n  statusText?: string;\n  importantField?: \"timeUsed\" | \"memoryUsed\";\n}\n\n// For mobile view of submissions page only\n// Not for submission page and statistics page\nexport const SubmissionItemMobile: React.FC<SubmissionItemMobileProps> = props => {\n  const _ = useLocalizer(\"submission_item\");\n\n  const { submission, submissionLink, timeString, problemIdString, problemUrl } = parseSubmissionMeta(props.submission);\n\n  const importantField = props.importantField || \"submitTime\";\n\n  return (\n    <Table.Row className={style.submissionItemMobile}>\n      <Table.Cell>\n        <div className={style.flexContainer}>\n          <div>\n            <div>\n              <Link href={submissionLink}>\n                <StatusText status={submission.status} statusText={props.statusText} />\n                <ScoreText score={submission.score || 0} />\n              </Link>\n            </div>\n            <div>\n              {Object.values(CodeLanguage).includes(submission.codeLanguage as any) && (\n                <>\n                  <Link href={submissionLink}>{_(`code_language.${submission.codeLanguage}.name`)}</Link>\n                  &nbsp;/&nbsp;\n                </>\n              )}\n              <span title={submission.answerSize + \" B\"}>{formatFileSize(submission.answerSize, 1)}</span>\n            </div>\n          </div>\n\n          <div>\n            <div>\n              <EmojiRenderer>\n                <Link href={problemUrl}>{getProblemDisplayName(submission.problem, submission.problemTitle, _)}</Link>\n              </EmojiRenderer>\n            </div>\n            <div>\n              <div>\n                <UserLink user={submission.submitter} />\n              </div>\n              {props.importantField === \"timeUsed\" ? (\n                <div>{Math.round(submission.timeUsed || 0) + \" ms\"}</div>\n              ) : props.importantField === \"memoryUsed\" ? (\n                <div title={(submission.memoryUsed || 0) + \" K\"}>\n                  {formatFileSize((submission.memoryUsed || 0) * 1024, 1)}\n                </div>\n              ) : (\n                <div title={timeString[1]}>{timeString[0]}</div>\n              )}\n            </div>\n          </div>\n        </div>\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\n// This is for the responsive view in submission page (not submissions page)\n// < 1024 has one row\n// < 768  has more rows\ninterface SubmissionItemExtraRowsProps {\n  submission: ApiTypes.SubmissionMetaDto;\n  isMobile: boolean;\n\n  // Mouse hover on \"answer\" column to display\n  answerInfo?: React.ReactNode;\n\n  // If passed, will show a download icon\n  onDownloadAnswer?: React.ReactNode;\n\n  // Mouse hover on \"status\" to display\n  statusPopup?: (statusNode: React.ReactElement) => React.ReactNode;\n\n  config?: SubmissionItemConfig;\n}\n\nexport const SubmissionItemExtraRows: React.FC<SubmissionItemExtraRowsProps> = props => {\n  const _ = useLocalizer(\"submission_item\");\n\n  const { submission, timeString, problemIdString, problemUrl } = parseSubmissionMeta(props.submission);\n\n  const columnStatus = (props.statusPopup || (x => x))(\n    <div className={style.extraRowsColumnStatus}>\n      <StatusText status={submission.status} />\n    </div>\n  );\n\n  const columnScore = (\n    <div className={style.extraRowsColumnScore}>\n      <Icon name=\"clipboard check\" />\n      <ScoreText score={submission.score || 0} />\n    </div>\n  );\n\n  const columnProblem = (\n    <div className={style.extraRowsColumnProblem}>\n      <Icon name=\"book\" />\n      <Link href={problemUrl}>{getProblemDisplayName(submission.problem, submission.problemTitle, _)}</Link>\n    </div>\n  );\n\n  const columnSubmitter = (\n    <div className={style.extraRowsColumnSubmitter}>\n      <Icon name=\"user\" />\n      <UserLink user={submission.submitter} />\n    </div>\n  );\n\n  const columnTime = (\n    <div>\n      <Icon name=\"time\" />\n      {Math.round(submission.timeUsed || 0) + \" ms\"}\n    </div>\n  );\n\n  const columnMemory = (\n    <div title={(submission.memoryUsed || 0) + \" K\"}>\n      <Icon name=\"microchip\" />\n      {formatFileSize((submission.memoryUsed || 0) * 1024, 1)}\n    </div>\n  );\n\n  const columnAnswer = (\n    <Popup\n      content={props.answerInfo}\n      disabled={!props.answerInfo}\n      position={props.isMobile ? \"left center\" : \"bottom center\"}\n      on=\"hover\"\n      hoverable\n      trigger={\n        <div>\n          <Icon name=\"file\" />\n          <span>\n            {Object.values(CodeLanguage).includes(submission.codeLanguage as any) && (\n              <>\n                {_(`code_language.${submission.codeLanguage}.name`)}\n                &nbsp;/&nbsp;\n              </>\n            )}\n            <span title={submission.answerSize + \" B\"}>{formatFileSize(submission.answerSize, 1)}</span>\n          </span>\n          {props.onDownloadAnswer && (\n            <Icon className={style.downloadIcon} name=\"download\" onClick={props.onDownloadAnswer} />\n          )}\n        </div>\n      }\n    />\n  );\n\n  const columnSubmitTime = (\n    <div title={timeString[1] as string}>\n      <Icon name=\"calendar\" />\n      {timeString[0]}\n    </div>\n  );\n\n  return (\n    <div className={style.extraRowsWrapper}>\n      {props.isMobile ? (\n        <>\n          <div>\n            {columnStatus}\n            {columnScore}\n          </div>\n          <div>\n            {columnProblem}\n            {columnSubmitter}\n          </div>\n          <div>\n            {columnTime}\n            {columnAnswer}\n          </div>\n          {!props?.config?.hideTimeMemory && (\n            <div>\n              {columnMemory}\n              {columnSubmitTime}\n            </div>\n          )}\n        </>\n      ) : (\n        <>\n          <div>\n            {!props?.config?.hideTimeMemory && (\n              <>\n                {columnMemory}\n                {columnSubmitTime}\n              </>\n            )}\n            {columnAnswer}\n            {columnSubmitTime}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n"],"sourceRoot":""}