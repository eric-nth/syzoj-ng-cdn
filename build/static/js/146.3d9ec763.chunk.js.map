{"version":3,"sources":["pages/auth/register/RegisterPage.tsx"],"names":["RegisterPage","_","useLocalizer","currentRoute","useCurrentRoute","navigation","useNavigationChecked","redirect","navigate","url","query","loginRedirectUrl","navigateTo","useLoginOrRegisterNavigation","useEffect","appState","currentUser","enterNewPage","locale","recaptcha","useRecaptcha","useState","successMessage","setSuccessMessage","username","setUsername","email","setEmail","emailVerificationCode","setEmailVerificationCode","password","setPassword","retypePassword","setRetypePassword","registerPending","setRegisterPending","refUsernameInput","useRef","refEmailInput","refEmailVerificationCodeInput","refPasswordInput","refRetypePasswordInput","refForm","useFieldCheck","value","isValidUsername","a","api","auth","checkAvailability","requestError","response","toast","error","usernameAvailable","checkUsername","waitForUsernameCheck","getUsernameUIValidateStatus","getUsernameUIHelp","isValidEmail","emailAvailable","checkEmail","waitForEmailCheck","getEmailUIValidateStatus","getEmailUIHelp","isValidPassword","checkPassword","waitForPasswordCheck","getPasswordUIValidateStatus","getPasswordUIHelp","getCurrentPassword","checkRetypePassword","waitForRetypePasswordCheck","getRetypePasswordUIValidateStatus","getRetypePasswordUIHelp","emailVerificationCodeError","setEmailVerificationCodeError","onSubmit","current","focus","select","register","token","setTimeout","refreshSession","sendEmailVerificationCodeTimeout","setSendEmailVerificationCodeTimeout","sendEmailVerificationCodePending","setSendEmailVerificationCodePending","onSendEmailVerificationCode","sendEmailVerificationCode","type","errorMessage","success","id","setInterval","timeout","clearInterval","logo","appLogoThemed","className","style","wrapper","as","header","withLogo","textAlign","size","ref","innerRef","field","querySelector","Field","control","Input","content","pointing","loading","fluid","icon","iconPosition","placeholder","autoComplete","onChange","e","target","onBlur","onKeyPress","onEnterPress","serverPreference","security","requireEmailVerification","code","stripInvalidCharactersInEmailVerificationCode","action","tabIndex","disabled","onClick","getCopyrightMessage","recaptchaCopyright","successButton","primary","color","name","message","observer","route","view"],"mappings":"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","file":"static/js/146.3d9ec763.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { Header, Segment, Message, Input, Button, Form, Icon, Ref } from \"semantic-ui-react\";\nimport { route } from \"navi\";\nimport { useCurrentRoute } from \"react-navi\";\nimport { observer } from \"mobx-react\";\n\nimport style from \"../common.module.less\";\n\nimport { appState } from \"@/appState\";\n\nimport api from \"@/api\";\nimport {\n  useLocalizer,\n  useFieldCheck,\n  useLoginOrRegisterNavigation,\n  useRecaptcha,\n  useNavigationChecked\n} from \"@/utils/hooks\";\nimport toast from \"@/utils/toast\";\nimport {\n  isValidUsername,\n  isValidEmail,\n  isValidPassword,\n  stripInvalidCharactersInEmailVerificationCode\n} from \"@/utils/validators\";\nimport { refreshSession } from \"@/initApp\";\nimport PseudoLink from \"@/components/PseudoLink\";\nimport { onEnterPress } from \"@/utils/onEnterPress\";\n\nlet RegisterPage: React.FC = () => {\n  const _ = useLocalizer(\"register\");\n  const currentRoute = useCurrentRoute();\n\n  const navigation = useNavigationChecked();\n  const redirect = () => {\n    navigation.navigate(currentRoute.url.query.loginRedirectUrl || \"/\");\n  };\n\n  const navigateTo = useLoginOrRegisterNavigation();\n\n  useEffect(() => {\n    if (appState.currentUser) redirect();\n  }, []);\n\n  useEffect(() => {\n    appState.enterNewPage(_(\".title\"));\n  }, [appState.locale]);\n\n  const recaptcha = useRecaptcha();\n\n  const [successMessage, setSuccessMessage] = useState<string>(null);\n\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [emailVerificationCode, setEmailVerificationCode] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [retypePassword, setRetypePassword] = useState(\"\");\n  const [registerPending, setRegisterPending] = useState(false);\n\n  const refUsernameInput = useRef<HTMLInputElement>();\n  const refEmailInput = useRef<HTMLInputElement>();\n  const refEmailVerificationCodeInput = useRef<HTMLInputElement>();\n  const refPasswordInput = useRef<HTMLInputElement>();\n  const refRetypePasswordInput = useRef<HTMLInputElement>();\n\n  const refForm = useRef(null);\n\n  // usernameCheckStatus: false (not checked) | true (pass) | string (error message)\n  const [checkUsername, waitForUsernameCheck, getUsernameUIValidateStatus, getUsernameUIHelp] = useFieldCheck(\n    username,\n    false,\n    false,\n    value => {\n      if (!value) return _(\".empty_username\");\n      if (!isValidUsername(value)) return _(\".invalid_username\");\n      return true;\n    },\n    async value => {\n      const { requestError, response } = await api.auth.checkAvailability({ username: value });\n\n      if (requestError) {\n        toast.error(requestError(_));\n        return \"\";\n      }\n\n      if (!response.usernameAvailable) return _(\".username_already_taken\");\n      return true;\n    }\n  );\n\n  // emailCheckStatus: false (not checked) | true (pass) | string (error message)\n  const [checkEmail, waitForEmailCheck, getEmailUIValidateStatus, getEmailUIHelp] = useFieldCheck(\n    email,\n    false,\n    false,\n    value => {\n      if (!value) return _(\".empty_email\");\n      if (!isValidEmail(value)) return _(\".invalid_email\");\n      return true;\n    },\n    async value => {\n      const { requestError, response } = await api.auth.checkAvailability({ email: value });\n\n      if (requestError) {\n        toast.error(requestError(_));\n        return \"\";\n      }\n\n      if (!response.emailAvailable) return _(\".email_already_used\");\n      return true;\n    }\n  );\n\n  // passwordCheckStatus: false (not checked) | true (pass) | string (error message)\n  const [\n    checkPassword,\n    waitForPasswordCheck,\n    getPasswordUIValidateStatus,\n    getPasswordUIHelp,\n    getCurrentPassword\n  ] = useFieldCheck(password, false, false, value => {\n    if (!value) return _(\".empty_password\");\n    if (!isValidPassword(value)) return _(\".invalid_password\");\n    return true;\n  });\n\n  const [\n    checkRetypePassword,\n    waitForRetypePasswordCheck,\n    getRetypePasswordUIValidateStatus,\n    getRetypePasswordUIHelp\n  ] = useFieldCheck(retypePassword, true, false, value => {\n    if (value !== getCurrentPassword()) return _(\".passwords_do_not_match\");\n    if (!value) return _(\".empty_password\");\n    return true;\n  });\n\n  const [emailVerificationCodeError, setEmailVerificationCodeError] = useState(false);\n\n  async function onSubmit() {\n    if (registerPending) return;\n    setRegisterPending(true);\n\n    if (!(await waitForUsernameCheck())) {\n      toast.error(_(\".username_unavailable_message\"));\n      refUsernameInput.current.focus();\n      refUsernameInput.current.select();\n    } else if (!(await waitForEmailCheck())) {\n      toast.error(_(\".email_unavailable_message\"));\n      refEmailInput.current.focus();\n      refEmailInput.current.select();\n    } else if (!(await waitForPasswordCheck())) {\n      toast.error(_(\".invalid_password_message\"));\n      refPasswordInput.current.focus();\n      refPasswordInput.current.select();\n    } else if (!(await waitForRetypePasswordCheck())) {\n      toast.error(_(\".passwords_do_not_match_message\"));\n      refRetypePasswordInput.current.focus();\n      refRetypePasswordInput.current.select();\n    } else {\n      const { requestError, response } = await api.auth.register(\n        {\n          username: username,\n          email: email,\n          emailVerificationCode: emailVerificationCode,\n          password: password\n        },\n        recaptcha(\"Register\")\n      );\n\n      if (requestError) toast.error(requestError(_));\n      else if (response.error) {\n        switch (response.error) {\n          case \"ALREADY_LOGGEDIN\":\n            toast.error(_(`.errors.${response.error}`));\n            break;\n          case \"DUPLICATE_USERNAME\":\n            toast.error(_(`.errors.${response.error}`));\n            await waitForUsernameCheck(true);\n            refUsernameInput.current.focus();\n            refUsernameInput.current.select();\n            break;\n          case \"DUPLICATE_EMAIL\":\n            toast.error(_(`.errors.${response.error}`));\n            await waitForEmailCheck(true);\n            refEmailInput.current.focus();\n            refEmailInput.current.select();\n            break;\n          case \"INVALID_EMAIL_VERIFICATION_CODE\":\n            toast.error(_(`.errors.${response.error}`));\n            setEmailVerificationCodeError(true);\n            refEmailVerificationCodeInput.current.focus();\n            break;\n        }\n      } else {\n        // Register success\n        appState.token = response.token;\n\n        {\n          setSuccessMessage(_(\".success\", { username }));\n\n          setTimeout(async () => {\n            await refreshSession();\n            redirect();\n          }, 1000);\n        }\n\n        return;\n      }\n    }\n\n    setRegisterPending(false);\n  }\n\n  const [sendEmailVerificationCodeTimeout, setSendEmailVerificationCodeTimeout] = useState(0);\n  const [sendEmailVerificationCodePending, setSendEmailVerificationCodePending] = useState(false);\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      setSendEmailVerificationCodeTimeout(timeout => timeout && timeout - 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  async function onSendEmailVerificationCode() {\n    if (sendEmailVerificationCodePending) return;\n    setSendEmailVerificationCodePending(true);\n\n    if (!(await waitForEmailCheck())) {\n      toast.error(_(\".email_unavailable_message\"));\n      refEmailInput.current.focus();\n      refEmailInput.current.select();\n    } else {\n      const { requestError, response } = await api.auth.sendEmailVerificationCode(\n        {\n          email: email,\n          type: \"Register\",\n          locale: appState.locale\n        },\n        recaptcha(\"SendEmailVerifactionCode_Register\")\n      );\n      if (requestError) toast.error(requestError(_));\n      else if (response.error) toast.error(_(`.errors.${response.error}`, { errorMessage: response.errorMessage }));\n      else {\n        toast.success(_(\".email_verification_code_sent\"));\n        setSendEmailVerificationCodeTimeout(61);\n      }\n    }\n\n    setSendEmailVerificationCodePending(false);\n  }\n\n  function onChangeVerificationCode(code: string) {\n    setEmailVerificationCodeError(false);\n    setEmailVerificationCode(stripInvalidCharactersInEmailVerificationCode(code));\n  }\n\n  const logo = appState.appLogoThemed && <img className={style.logo} {...appState.appLogoThemed} />;\n\n  return (\n    <>\n      <div className={style.wrapper}>\n        <Header as=\"h2\" className={style.header + (logo ? \" \" + style.withLogo : \"\")} textAlign=\"center\">\n          {logo}\n          {_(\".register_new_account\")}\n        </Header>\n        <Form size=\"large\" ref={refForm}>\n          <Segment>\n            {/* username */}\n            <Ref innerRef={field => field && (refUsernameInput.current = field.querySelector(\"input\"))}>\n              <Form.Field\n                control={Input}\n                error={\n                  getUsernameUIValidateStatus() === \"error\" && {\n                    content: getUsernameUIHelp(),\n                    pointing: \"left\"\n                  }\n                }\n                loading={getUsernameUIValidateStatus() === \"validating\"}\n                fluid\n                icon=\"user\"\n                iconPosition=\"left\"\n                placeholder={_(\".username\")}\n                value={username}\n                autoComplete=\"username\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setUsername(e.target.value)}\n                onBlur={() => checkUsername()}\n                onKeyPress={onEnterPress(() => refEmailInput.current.focus())}\n              />\n            </Ref>\n\n            {/* email */}\n            <Ref innerRef={field => field && (refEmailInput.current = field.querySelector(\"input\"))}>\n              <Form.Field\n                control={Input}\n                error={\n                  getEmailUIValidateStatus() === \"error\" && {\n                    content: getEmailUIHelp(),\n                    pointing: \"left\"\n                  }\n                }\n                loading={getEmailUIValidateStatus() === \"validating\"}\n                fluid\n                icon=\"envelope\"\n                iconPosition=\"left\"\n                placeholder={_(\".email\")}\n                value={email}\n                autoComplete=\"email\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setEmail(e.target.value)}\n                onBlur={() => checkEmail()}\n                onKeyPress={onEnterPress(() => {\n                  if (appState.serverPreference.security.requireEmailVerification) {\n                    refEmailVerificationCodeInput.current.focus();\n                    if (sendEmailVerificationCodeTimeout === 0) onSendEmailVerificationCode();\n                  } else refPasswordInput.current.focus();\n                })}\n              />\n            </Ref>\n\n            {\n              /* email verification code */\n              appState.serverPreference.security.requireEmailVerification && (\n                <Ref\n                  innerRef={field => field && (refEmailVerificationCodeInput.current = field.querySelector(\"input\"))}\n                >\n                  <Form.Field\n                    control={Input}\n                    error={\n                      emailVerificationCodeError && {\n                        content: _(\".invalid_email_verification_code\"),\n                        pointing: \"left\"\n                      }\n                    }\n                    fluid\n                    icon=\"shield\"\n                    iconPosition=\"left\"\n                    placeholder={_(\".email_verification_code\")}\n                    value={emailVerificationCode}\n                    autoComplete=\"off\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => onChangeVerificationCode(e.target.value)}\n                    onKeyPress={onEnterPress(() => refPasswordInput.current.focus())}\n                    action={\n                      <Button\n                        tabIndex={-1}\n                        disabled={sendEmailVerificationCodeTimeout !== 0}\n                        loading={sendEmailVerificationCodePending}\n                        content={\n                          sendEmailVerificationCodeTimeout\n                            ? `${sendEmailVerificationCodeTimeout > 60 ? 60 : sendEmailVerificationCodeTimeout}s`\n                            : _(\".send_email_verification_code\")\n                        }\n                        onClick={onSendEmailVerificationCode}\n                      />\n                    }\n                  />\n                </Ref>\n              )\n            }\n\n            {/* password */}\n            <Ref innerRef={field => field && (refPasswordInput.current = field.querySelector(\"input\"))}>\n              <Form.Field\n                control={Input}\n                error={\n                  getPasswordUIValidateStatus() === \"error\" && {\n                    content: getPasswordUIHelp(),\n                    pointing: \"left\"\n                  }\n                }\n                loading={getPasswordUIValidateStatus() === \"validating\"}\n                fluid\n                icon=\"lock\"\n                iconPosition=\"left\"\n                placeholder={_(\".password\")}\n                value={password}\n                type=\"password\"\n                autoComplete=\"new-password\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPassword(e.target.value)}\n                onBlur={() => checkPassword()}\n                onKeyPress={onEnterPress(() => refRetypePasswordInput.current.focus())}\n              />\n            </Ref>\n            <Ref innerRef={field => field && (refRetypePasswordInput.current = field.querySelector(\"input\"))}>\n              <Form.Field\n                control={Input}\n                error={\n                  getRetypePasswordUIValidateStatus() === \"error\" && {\n                    content: getRetypePasswordUIHelp(),\n                    pointing: \"left\"\n                  }\n                }\n                loading={getRetypePasswordUIValidateStatus() === \"validating\"}\n                fluid\n                icon=\"lock\"\n                iconPosition=\"left\"\n                placeholder={_(\".retype_password\")}\n                value={retypePassword}\n                type=\"password\"\n                autoComplete=\"new-password\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setRetypePassword(e.target.value)}\n                onBlur={() => checkRetypePassword()}\n                onKeyPress={onEnterPress(() => {\n                  checkRetypePassword(); // Since the focus is not lost, forcibly re-check the field\n                  onSubmit();\n                })}\n              />\n            </Ref>\n\n            {recaptcha.getCopyrightMessage(style.recaptchaCopyright)}\n\n            <Button\n              className={successMessage && style.successButton}\n              primary={!successMessage}\n              color={successMessage ? \"green\" : null}\n              fluid\n              size=\"large\"\n              loading={registerPending && !successMessage}\n              onClick={() => onSubmit()}\n            >\n              {successMessage ? (\n                <>\n                  <Icon name=\"checkmark\" />\n                  {successMessage}\n                </>\n              ) : (\n                _(\".register\")\n              )}\n            </Button>\n          </Segment>\n        </Form>\n        <Message className={style.message}>\n          {_(\".already_have_account\")}\n          <PseudoLink onClick={() => navigateTo(\"login\")}>{_(\".login\")}</PseudoLink>\n        </Message>\n      </div>\n    </>\n  );\n};\n\nRegisterPage = observer(RegisterPage);\n\nexport default route({\n  view: <RegisterPage />\n});\n"],"sourceRoot":""}