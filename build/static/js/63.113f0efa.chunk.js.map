{"version":3,"sources":["components/TimeAgo.tsx"],"names":["TimeAgo","props","useState","Date","relativeDate","setRelativeDate","getUseTimeAgo","time","useTimeAgo","setUseTimeAgo","useEffect","id","setInterval","clearInterval","relative","fullDateTime","formatDateTime","dateOnly","title","timeago","Math","min","appState","locale","observer"],"mappings":"iLAkBA,IAAIA,EAAkC,SAAAC,GAEpC,IAF6C,EAOLC,mBAAS,IAAIC,MAPR,mBAOtCC,EAPsC,KAOxBC,EAPwB,KASvCC,EAAgB,kBAAOF,GAAgBH,EAAMM,MAJ9B,QALwB,EAUTL,mBAASI,KAVA,mBAUtCE,EAVsC,KAU1BC,EAV0B,KAY7CC,qBAAU,WACR,GAAIF,EAAY,CACd,IAAMG,EAAKC,aAAY,kBAAMP,EAAgB,IAAIF,QAZ7B,KAapB,OAAO,kBAAMU,cAAcF,OAE5B,CAACH,IAEJE,qBAAU,WACJJ,MAAoBE,GAAYC,GAAeD,KAClD,CAACJ,EAAcH,EAAMM,OAExB,IA7BgBA,EAAYO,EA6BtBC,EAAeC,YAAef,EAAMM,KAAMN,EAAMgB,UAAU,GAEhE,OACE,mCACGT,EACC,sBAAMU,MAAOH,EAAb,SACGI,KAnCOZ,EAmCiBN,EAAMM,KAnCXO,EAmCiBV,EAjCzCG,GAAQO,EAAiB,IAAIX,MAAMI,EAAOa,KAAKC,KAAKd,GAAQO,EAAW,EAAG,MACvEP,GAgCqDe,IAASC,OAAQ,CACnEnB,aAAcA,MAIlBW,KAMRf,EAAUwB,YAASxB,GAEJA","file":"static/js/63.113f0efa.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { observer } from \"mobx-react\";\nimport * as timeago from \"timeago.js\";\n\nimport formatDateTime from \"@/utils/formatDateTime\";\nimport { appState } from \"@/appState\";\n\ninterface TimeAgoProps {\n  time: Date;\n  dateOnly?: boolean;\n}\n\nfunction fixLater(time: Date, relative: Date) {\n  // Accept the client's time is <= 1 minute slower than server's time\n  if (time >= relative) return new Date(+time - Math.min(+time - +relative + 1, 60 * 1000));\n  return time;\n}\n\nlet TimeAgo: React.FC<TimeAgoProps> = props => {\n  // Update per 30s\n  const UPDATE_INTERVAL = 30 * 1000;\n\n  // Use time ago if within 30 days\n  const MAX_TIME_AGO = 30 * 24 * 60 * 60 * 1000;\n\n  const [relativeDate, setRelativeDate] = useState(new Date());\n\n  const getUseTimeAgo = () => +relativeDate - +props.time <= MAX_TIME_AGO;\n  const [useTimeAgo, setUseTimeAgo] = useState(getUseTimeAgo());\n\n  useEffect(() => {\n    if (useTimeAgo) {\n      const id = setInterval(() => setRelativeDate(new Date()), UPDATE_INTERVAL);\n      return () => clearInterval(id);\n    }\n  }, [useTimeAgo]);\n\n  useEffect(() => {\n    if (getUseTimeAgo() !== useTimeAgo) setUseTimeAgo(!useTimeAgo);\n  }, [relativeDate, props.time]);\n\n  const fullDateTime = formatDateTime(props.time, props.dateOnly)[1];\n\n  return (\n    <>\n      {useTimeAgo ? (\n        <span title={fullDateTime}>\n          {timeago.format(fixLater(props.time, relativeDate), appState.locale, {\n            relativeDate: relativeDate\n          })}\n        </span>\n      ) : (\n        fullDateTime\n      )}\n    </>\n  );\n};\n\nTimeAgo = observer(TimeAgo);\n\nexport default TimeAgo;\n"],"sourceRoot":""}