{"version":3,"sources":["pages/problem/view/ProblemViewPage.tsx"],"names":["useProblemViewMarkdownContentPatcher","problemId","_","useLocalizer","FILE_DOWNLOAD_LINK_PREFIX","FILE_DOWNLOAD_LINK_ALL_PREFIX","FILE_DOWNLOAD_LINK_PREFIXES","isStartedWithFileDownloadPrefix","url","some","s","startsWith","onPatchRenderer","renderer","originValidateLink","validateLink","toLowerCase","onPatchResult","element","onLinkClick","href","e","fileUrl","downloadProblemFilesAsArchive","substr","length","filename","split","join","downloadProblemFile","tryParseAndDownload","preventDefault","getElementsByTagName","link","addEventListener","onXssFileterAttr","tagName","attrName","value","escapeAttrValue","fetchData","idType","id","locale","a","api","problem","getProblem","requestError","response","RouteError","showRefresh","showBack","error","makeToBeLocalizedText","sortTags","tagsOfLocale","ProblemViewPage","props","navigation","useNavigationChecked","isMobile","useScreenWidthWithin","getProblemDisplayName","meta","localizedContentsOfLocale","title","idString","all","useEffect","appState","enterNewPage","recaptcha","useRecaptcha","useState","showTagsInProblemSet","showTags","setShowTags","type","lastCopiedSample","setLastCopiedSample","onCopySampleClick","data","copyToClipboard","toast","displayId","toString","setDisplayIdInputValue","setSetDisplayIdInputValue","useAsyncCallbackPending","isValidDisplayId","setProblemDisplayId","Number","unconfirmed","navigate","pathname","getProblemUrl","use","query","requestedLocale","setDisplayIdPending","onSetDisplayId","isPublic","setProblemPublic","refresh","setPublicPending","onSetPublic","userPreference","hideUnavailableMessage","localizedContentUnavailableMessageVisable","setLocalizedContentUnavailableMessageVisable","refOpenPermissionManager","useRef","permissionManagerLoading","setPermissionManagerLoading","owner","permissions","userPermissions","groupPermissions","haveSubmitPermission","permissionOfCurrentUser","includes","setProblemPermissions","current","permissionManager","objectDescription","permissionsLevelDetails","1","2","refOpen","onGetInitialPermissions","onSubmitPermissions","deleteProblem","success","deletePending","onDelete","deleteDialog","useDialog","basic","icon","className","style","dialogHeader","content","inverted","negative","loading","onClick","disabled","close","ProblemTypeView","inSubmitView","setInSubmitView","refScrollTopBackup","lastSubmission","lastSubmissionContent","getDefaultSubmissionContent","submissionContent","setSubmissionContent","scrollElement","document","documentElement","useConfirmNavigation","setModified","submitPending","setSubmitPending","onGetSubmitFile","callApiWithFileUpload","submission","submit","uploadError","String","submissionId","navigateToLogin","useLoginOrRegisterNavigation","statistic","Group","size","Value","acceptedSubmissionCount","Label","submissionCount","problemViewMarkdownContentPatcher","topContainer","titleSection","as","header","lastAcceptedSubmission","status","locales","languageSelectIcon","Menu","map","Item","flag","localeMeta","text","selected","labels","color","name","Labels","judgeInfo","toggleTagsLabel","transform","tag","Link","tagIds","divider","SubmitView","pendingSubmit","onCloseSubmitView","window","requestAnimationFrame","scrollTop","onUpdateSubmissionContent","path","spec","objectPath","set","update","onSubmit","statementView","display","leftContainer","contentLocale","onDismiss","dangerouslySetInnerHTML","__html","display_locale","contentSections","section","i","Fragment","sectionTitle","patcher","columns","Row","Column","sample","sampleInput","sampleHeader","pointing","copySample","sampleId","samples","inputData","sampleDataSegment","sampleDataPre","sampleOutput","outputData","empty","sampleExplanation","dividerBottom","rightContainer","actionMenusWrapper","secondary","vertical","actionMenu","submittable","isSubmittable","trigger","menuItemImportant","currentUser","primary","on","position","problemDisplayId","enableStatistics","subRoute","discussionCount","circular","secondActionMenu","active","Input","width","placeholder","autoComplete","onChange","target","onKeyPress","onEnterPress","menuItemDangerous","open","getProblemTypeView","ProblemType","Traditional","Interaction","SubmitAnswer","default","observer","byId","defineRoute","request","parseInt","params","Locale","uuid","byDisplayId"],"mappings":"6oBAwDO,SAASA,GAAqCC,GACnD,IAAMC,EAAIC,cAEJC,EAA4B,QAC5BC,EAAgC,YAEhCC,EAA8B,CAACF,EAA2BC,GAEhE,SAASE,EAAgCC,GACvC,OAAOF,EAA4BG,MAAK,SAAAC,GAAC,OAAIF,EAAIG,WAAWD,MAuB9D,MAAO,CACLE,gBADK,SACWC,GACd,IAAMC,EAAqBD,EAASE,aACpCF,EAASE,aAAe,SAAAP,GAAG,OAAIM,EAAmBN,IAAQD,EAAgCC,EAAIQ,iBAEhGC,cALK,SAKSC,GACZ,IADqB,EACfC,EAAc,SAACC,GAAD,OAAkB,SAACC,GAAD,OA1B1C,SAA6BC,GAC3B,GAAIA,EAAQX,WAAWN,GAQrB,OAPAkB,wCACEtB,EACAqB,EAAQE,OAAOnB,EAA8BoB,QAC7C,iBACA,GACAvB,IAEK,EACF,GAAIoB,EAAQX,WAAWP,GAA4B,CACxD,IAAMsB,EAAWJ,EAAQE,OAAOpB,EAA0BqB,QAAQE,MAAM,KAAKC,KAAK,IAGlF,OADAC,8BAAoB5B,EAAW,iBAAkByB,EAAUxB,IACpD,EAGT,OAAO,EASoD4B,CAAoBV,IAASC,EAAEU,mBADnE,cAGFb,EAAQc,qBAAqB,MAH3B,IAGrB,gCAAWC,EAAX,QAAsDA,EAAKC,iBAAiB,QAASf,EAAYc,EAAKb,QAHjF,gCAKvBe,iBAVK,SAUYC,EAASC,EAAUC,EAAOC,GACzC,GAAgB,MAAZH,GAAgC,SAAbC,GAAuB9B,EAAgC+B,GAAQ,OAAO,I,SAKpFE,G,qFAAf,WAAyBC,EAA4BC,EAAYC,GAAjE,qBAAAC,EAAA,sEAC2CC,IAAIC,QAAQC,YAAZ,mBACtCN,EAASC,GAD6B,0CAEZC,GAFY,6BAGzBA,GAHyB,yBAI9B,GAJ8B,2BAK5B,GAL4B,2CAMZ,GANY,4BAO3B,GAP2B,iCAQtB,GARsB,yCASd,GATc,yDAUE,GAVF,IAD3C,mBACUK,EADV,EACUA,aAAcC,EADxB,EACwBA,UAalBD,EAdN,sBAc0B,IAAIE,IAAWF,EAAc,CAAEG,aAAa,EAAMC,UAAU,IAdtF,WAeWH,EAASI,MAfpB,uBAeiC,IAAIH,IAAWI,YAAsB,iBAAD,OAAkBL,EAASI,SAfhG,eAiBEE,YAASN,EAASO,cAjBpB,kBAkBSP,GAlBT,6C,sBA4BA,IAAIQ,GAAkD,SAAAC,GAAU,IAAD,IACvDxD,EAAIC,YAAa,WACjBwD,EAAaC,cAEbC,EAAWC,YAAqB,EAAG,KAJoB,EAM9BC,YAC7BL,EAAMZ,QAAQkB,KACdN,EAAMZ,QAAQmB,0BAA0BC,MACxChE,EACA,SAV2D,mBAMtDiE,EANsD,KAM5CD,EAN4C,KAMrCE,EANqC,KAa7DC,qBAAU,WACRC,IAASC,aAAT,UAAyBH,EAAzB,cAAkClE,EAAE,WAAa,iBAChD,CAACoE,IAAS3B,OAAQe,EAAMZ,UAE3B,IAAM0B,EAAYC,cAjB2C,EAoB7BC,mBAASJ,IAASK,sBApBW,mBAoBtDC,EApBsD,KAoB5CC,EApB4C,WA2BbH,mBAAmD,CACjGhC,GAAI,KACJoC,KAAM,OA7BqD,oBA2BtDC,GA3BsD,MA2BpCC,GA3BoC,eA+B9CC,GA/B8C,qFA+B7D,WAAiCvC,EAAYoC,EAA0BI,GAAvE,SAAAtC,EAAA,sEACYuC,YAAgBD,GAD5B,kCAEIF,GAAoB,CAAEtC,KAAIoC,SAF9B,sBAIIM,IAAM/B,MAAMnD,EAAE,2BAJlB,4CA/B6D,6BAyCDwE,oBAAUhB,EAAMZ,QAAQkB,KAAKqB,WAAa,IAAIC,YAzC7C,qBAyCtDC,GAzCsD,MAyC9BC,GAzC8B,SA0CfC,YAAuB,sBAAC,gCAAA7C,EAAA,yDAC/D8C,YAAiBH,IAD8C,gBAElEH,IAAM/B,MAAMnD,EAAE,8BAFoD,uCAIzB2C,IAAIC,QAAQ6C,oBAAoB,CACvE1F,UAAWyD,EAAMZ,QAAQkB,KAAKtB,GAC9B2C,UAAWO,OAAOL,MAN8C,gBAI1DvC,EAJ0D,EAI1DA,aAAcC,EAJ4C,EAI5CA,SAKlBD,EAAcoC,IAAM/B,MAAML,EAAa9C,IAClC+C,EAASI,MAChB+B,IAAM/B,MACJnD,EAAE,UAAD,OAAW+C,EAASI,OAAS,CAC5BgC,UAAWE,MAIf5B,EAAWkC,YAAYC,SAAS,CAC9BC,SAAWH,OAAOL,IAEdS,YAAcJ,OAAOL,IAAyB,CAAEU,IAAK,cADrDD,YAActC,EAAMZ,QAAQkB,KAAKtB,GAAI,CAAEuD,IAAK,OAEhDC,MAAOxC,EAAMyC,gBACT,CACExD,OAAQe,EAAMyC,iBAEhB,OAzB0D,6CA1CT,qBA0CtDC,GA1CsD,MA0CjCC,GA1CiC,SA2ErBZ,YAAuB,uCAAC,WAAOa,GAAP,mBAAA1D,EAAA,sEACrBC,IAAIC,QAAQyD,iBAAiB,CACpEtG,UAAWyD,EAAMZ,QAAQkB,KAAKtB,GAC9B4D,aAH4D,mBACtDtD,EADsD,EACtDA,aAAcC,EADwC,EACxCA,UAKlBD,EAN0D,gBAM5CoC,IAAM/B,MAAML,EAAa9C,IANmB,2BAOrD+C,EAASI,MAP4C,iBAQ5D+B,IAAM/B,MAAMnD,EAAE,UAAD,OAAW+C,EAASI,SAR2B,iDAShDM,EAAWkC,YAAYW,WATyB,4CAAD,uDA3EF,qBA2EtDC,GA3EsD,MA2EpCC,GA3EoC,SAyFqChC,qBAChG,UAACJ,IAASqC,sBAAV,iBAAC,EAAyBhE,cAA1B,aAAC,EAAiCiE,yBA1FyB,qBAyFtDC,GAzFsD,MAyFXC,GAzFW,MA+FvDC,GAA2BC,mBA/F4B,GAgGGtC,oBAAS,GAhGZ,qBAgGtDuC,GAhGsD,MAgG5BC,GAhG4B,oDAiG7D,gCAAAtE,EAAA,sEAC2CC,IAAIC,QAAQC,WAAW,CAC9DL,GAAIgB,EAAMZ,QAAQkB,KAAKtB,GACvByE,OAAO,EACPC,aAAa,IAJjB,mBACUpE,EADV,EACUA,aAAcC,EADxB,EACwBA,UAKlBD,EANN,gBAMoBoC,IAAM/B,MAAML,EAAa9C,IAN7C,2BAOW+C,EAASI,MAPpB,iBAO2B+B,IAAM/B,MAAMnD,EAAE,UAAD,OAAW+C,EAASI,SAP5D,iDASW,CACL8D,MAAOlE,EAASkE,MAChBE,gBAAiBpE,EAASmE,YAAYC,gBACtCC,iBAAkBrE,EAASmE,YAAYE,iBACvCC,qBAAsB7D,EAAMZ,QAAQ0E,wBAAwBC,SAAS,sBAb3E,iCAgBS,MAhBT,6CAjG6D,oEAoH7D,WACEJ,EACAC,GAFF,mBAAA1E,EAAA,sEAI2CC,IAAIC,QAAQ4E,sBAAsB,CACzEzH,UAAWyD,EAAMZ,QAAQkB,KAAKtB,GAC9B2E,gBAAiBA,EACjBC,iBAAkBA,IAPtB,mBAIUtE,EAJV,EAIUA,aAAcC,EAJxB,EAIwBA,UAKlBD,EATN,gBASoBoC,IAAM/B,MAAML,EAAa9C,IAT7C,0BAU8B,oBAAnB+C,EAASI,MAVpB,iBAUiD+B,IAAM/B,MAAMnD,EAAE,2BAV/D,4BAWW+C,EAASI,MAXpB,0CAWkCJ,GAXlC,kCAYS,GAZT,6CApH6D,oEAmI7D,sBAAAL,EAAA,0DACMqE,GADN,wDAEEC,IAA4B,GAF9B,SAGQH,GAAyBY,UAHjC,OAIET,IAA4B,GAJ9B,4CAnI6D,sBA0I7D,IAAMU,GACJ,cAAC,IAAD,CACEC,kBAAmB3H,EAAE,yCAA0C,CAAEiE,aACjE2D,wBAAyB,CACvBC,EAAG,CACD7D,MAAOhE,EAAE,2BAEX8H,EAAG,CACD9D,MAAOhE,EAAE,6BAGb+H,QAASlB,GACTmB,wBAtJyD,4CAuJzDC,oBAvJyD,oDA6J3B1C,YAAuB,sBAAC,gCAAA7C,EAAA,sEACfC,IAAIC,QAAQsF,cAAc,CACjEnI,UAAWyD,EAAMZ,QAAQkB,KAAKtB,KAFwB,gBAChDM,EADgD,EAChDA,aAAcC,EADkC,EAClCA,SAGlBD,EAAcoC,IAAM/B,MAAML,EAAa9C,IAClC+C,EAASI,MAAO+B,IAAM/B,MAAMnD,EAAE,UAAD,OAAW+C,EAASI,UAExD+B,IAAMiD,QAAQnI,EAAE,2BAChByD,EAAWkC,YAAYC,SAAS,OARsB,4CA7JG,qBA6JtDwC,GA7JsD,MA6JvCC,GA7JuC,MAwKvDC,GAAeC,YACnB,CACEC,OAAO,IAET,kBACE,mCACE,cAAC,IAAD,CAAQC,KAAK,SAASC,UAAWC,IAAMC,aAAcC,QAAS7I,EAAE,uCAGpE,kBAAMA,EAAE,qCACR,kBACE,qCACE,cAAC,IAAD,CACEwI,OAAK,EACLM,UAAQ,EACRC,UAAQ,EACRF,QAAS7I,EAAE,0BACXgJ,QAASZ,GACTa,QAASZ,KAEX,cAAC,IAAD,CACEG,OAAK,EACLM,UAAQ,EACRD,QAAS7I,EAAE,yBACXkJ,SAAUd,GACVa,QAAS,kBAAMX,GAAaa,iBAO9BC,GAAkB5F,EAAM4F,gBAxM+B,GA2MrB5E,oBAAS,GA3MY,qBA2MtD6E,GA3MsD,MA2MxCC,GA3MwC,MA4MvDC,GAAqBzC,iBAAO,GA5M2B,GA6MXtC,mBAChDhB,EAAMZ,QAAQ4G,eAAeC,uBAAyBL,GAAgBM,+BA9MX,qBA6MtDC,GA7MsD,MA6MnCC,GA7MmC,MAgNvDC,GAAgBC,SAASC,gBAhN8B,OAgO7BC,cAhO6B,qBAgO5CC,IAhO4C,oBAwOnBzF,oBAAS,GAxOU,qBAwOtD0F,GAxOsD,MAwOvCC,GAxOuC,oDA0O7D,WAAwBC,GAAxB,qBAAA1H,EAAA,0DACMwH,GADN,oDAEEC,IAAiB,GAFnB,KAIwDE,IAJxD,KAKI1H,IAAI2H,WAAWC,OALnB,KAMI,CACExK,UAAWyD,EAAMZ,QAAQkB,KAAKtB,GAC9BqG,QAASc,IARf,KAUI,kBAAMrF,EAAU,mBAChB8F,EAXJ,kCAW4BA,IAX5B,iDAWgD,KAXhD,kFAIUI,EAJV,EAIUA,YAAa1H,EAJvB,EAIuBA,aAAcC,EAJrC,EAIqCA,SAU/ByH,EAAatF,IAAM/B,MAAMnD,EAAE,gBAAiB,CAAEmD,MAAOsH,OAAOD,MACvD1H,EAAcoC,IAAM/B,MAAML,EAAa9C,IACvC+C,EAASI,MAChB+B,IAAM/B,MAAMnD,EAAE,UAAD,OAAW+C,EAASI,UAEjC8G,IAAY,GACZxG,EAAWmC,SAAX,aAA0B7C,EAAS2H,gBAGrCP,IAAiB,GAvBnB,6CA1O6D,sBAqQ7D,IAAMQ,GAAkBC,YAA6B,SAE/CC,GACJ,eAAC,IAAUC,MAAX,CAAiBC,KAAK,QAAQrC,UAAWC,IAAMkC,UAA/C,UACE,eAAC,IAAD,WACE,cAAC,IAAUG,MAAX,UAAkBxH,EAAMZ,QAAQkB,KAAKmH,0BACrC,cAAC,IAAUC,MAAX,UAAkBlL,EAAE,4BAEtB,eAAC,IAAD,WACE,cAAC,IAAUgL,MAAX,UAAkBxH,EAAMZ,QAAQkB,KAAKqH,kBACrC,cAAC,IAAUD,MAAX,UAAkBlL,EAAE,kCAKpBoL,GAAoCtL,GAAqC0D,EAAMZ,QAAQkB,KAAKtB,IAElG,OACE,qCACGkF,GACAY,GAAatH,QACd,sBAAK0H,UAAWC,IAAM0C,aAAtB,UACE,sBAAK3C,UAAWC,IAAM2C,aAAtB,UACE,eAAC,IAAD,CAAQC,GAAG,KAAK7C,UAAWC,IAAM6C,OAAjC,UACGhI,EAAMZ,QAAQ4G,eAAeiC,wBAC5B,cAAC,IAAD,CACE/C,UAAWC,IAAM8C,uBACjBvK,KAAI,aAAQsC,EAAMZ,QAAQ4G,eAAeiC,uBAAuBjJ,IAFlE,SAIE,cAAC,IAAD,CAAYkJ,OAAO,eAGvB,cAAC,IAAD,UACE,iCACGzH,EADH,KACoBD,OAGrBR,EAAMZ,QAAQkB,KAAK6H,QAAQpK,OAAS,GACnC,cAAC,IAAD,CAAUkH,KAAK,QAAQC,UAAWC,IAAMiD,mBAAxC,SACE,cAAC,IAASC,KAAV,UACGrI,EAAMZ,QAAQkB,KAAK6H,QAAQG,KAAI,SAACrJ,GAAD,OAC9B,cAAC,IAASsJ,KAAV,CAEE9C,QAAS,WACPxF,EAAWmC,SAAS,CAClBI,MAAO,CACLvD,OAAQA,MAIduJ,KAAMC,IAAWxJ,GAAQuJ,KACzBE,KAAMlM,EAAE,YAAD,OAAayC,IACpBL,MAAOK,EACP0J,SAAU1J,IAAWe,EAAMZ,QAAQmB,0BAA0BtB,QAXxDA,aAkBjB,sBAAKiG,UAAWC,IAAMyD,OAAtB,WACI5I,EAAMZ,QAAQkB,KAAKsC,UACnB,eAAC,IAAD,CAAO2E,KAAMpH,EAAW,QAAU,KAAM0I,MAAM,MAAM7D,OAAK,EAAzD,UACE,cAAC,IAAD,CAAM8D,KAAK,cACVtM,EAAE,+BAGLwD,EAAMZ,QAAQkB,KAAKqB,WACnB,eAAC,IAAD,CAAO4F,KAAMpH,EAAW,QAAU,KAAM0I,MAAM,QAAQ7D,OAAK,EAA3D,UACE,cAAC,IAAD,CAAM8D,KAAK,YACVtM,EAAE,iCAGP,eAAC,IAAD,CAAO+K,KAAMpH,EAAW,QAAU,KAAM0I,MAAM,OAA9C,UACE,cAAC,IAAD,CAAMC,KAAK,SACVtM,EAAE,SAAD,OAAUwD,EAAMZ,QAAQkB,KAAKc,UAEjC,cAACwE,GAAgBmD,OAAjB,CAAwBxB,KAAMpH,EAAW,QAAU,KAAM6I,UAAWhJ,EAAMZ,QAAQ4J,YACjFhJ,EAAMZ,QAAQU,aAAa/B,OAAS,GACnC,qCACE,eAAC,IAAD,CACEwJ,KAAMpH,EAAW,QAAU,KAC3B0I,MAAM,OACNd,GAAG,IACHtC,QApUhB,WACEtE,GAAaD,IAoUCgE,UAAWC,IAAM8D,gBALnB,UAOiCzM,EAA7B0E,EAA+B,aAAlB,cACf,cAAC,IAAD,CAAM4H,KAAM,aAAc3D,MAAO,CAAE+D,UAAWhI,GAAY,wBAE3DA,GACC,mCACGlB,EAAMZ,QAAQU,aAAawI,KAAI,SAAAa,GAAG,OACjC,cAAC,IAAD,UACE,cAAC,IAAD,CACE5B,KAAMpH,EAAW,QAAU,KAC3BkF,QAAS8D,EAAIL,KACbD,MAAOM,EAAIN,MACXd,GAAIqB,IACJ1L,KAAM,CACJ2E,SAAU,KACVG,MAAO,CACL6G,OAAQF,EAAInK,GAAG4C,gBATHuH,EAAInK,mBAqBpCmB,GAAYkH,MAEhB,cAAC,IAAD,CAASnC,UAAWC,IAAMmE,UAC1B,cAAC1D,GAAgB2D,WAAjB,CACEP,UAAWhJ,EAAMZ,QAAQ4J,UACzBhD,eAAgBhG,EAAMZ,QAAQ4G,eAC9BH,aAAcA,GACd2D,cAAe9C,GACfP,kBAAmBA,GACnBsD,kBAxKN,WAEEC,OAAOC,uBAAsB,WAC3BtD,GAAcuD,UAAYzJ,EAAW,EAAI4F,GAAmB9B,WAE9D6B,IAAgB,IAoKZ+D,0BAhKN,SAAiCC,EAAclL,GAC7C6H,IAAY,GACZ,IAAMsD,EAAO,GACbC,IAAWC,IAAIF,EAAMD,EAAO,QAASlL,GACrCwH,IAAqB,SAAAD,GAAiB,OAAI+D,IAAO/D,EAAmB4D,OA6JhEI,SAlYuD,+CAoYzD,sBAAKjF,UAAWC,IAAMiF,cAAejF,MAAO,CAAEkF,QAASxE,GAAe,OAAS,MAA/E,UACE,sBAAKX,UAAWC,IAAMmF,cAAtB,UACGnH,KACE,CAACvC,IAAS2J,cAAevK,EAAMyC,iBAAiBsB,SAC/C/D,EAAMZ,QAAQmB,0BAA0BtB,SAExC,cAAC,IAAD,CACEuL,UAAW,kBAAMpH,IAA6C,IAC9DiC,QACE,sBACEoF,wBAAyB,CACvBC,OAAQlO,EAAE,uCAAwC,CAChDmO,eAAe,MAAD,OAAQnO,EAAE,YAAD,OAAawD,EAAMZ,QAAQmB,0BAA0BtB,SAA9D,eAO3Be,EAAMZ,QAAQmB,0BAA0BqK,gBAAgBtC,KAAI,SAACuC,EAASC,GAAV,OAC3D,eAAC,IAAMC,SAAP,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAQxD,KAAK,QAAb,SAAsBsD,EAAQG,iBAEd,SAAjBH,EAAQzJ,KACP,mCACE,cAAC,UAAD,CAAiBiE,QAASwF,EAAQnC,KAAMuC,QAASrD,OAGnD,mCACE,eAAC,IAAD,CAAMsD,QAAQ,QAAd,UACE,eAAC,IAAKC,IAAN,WACE,eAAC,IAAKC,OAAN,CAAalG,UAAWC,IAAMkG,OAAS,IAAMlG,IAAMmG,YAAnD,UACE,eAAC,IAAD,CAAQ/D,KAAK,QAAQrC,UAAWC,IAAMoG,aAAtC,UACG/O,EAAE,iBACH,cAAC,IAAD,CACE+K,KAAK,QACLQ,GAAG,IACHyD,SAAS,QACTtG,UAAWC,IAAMsG,WACjBhG,QAAS,SAAA9H,GAAC,OACR4D,GACEsJ,EAAQa,SACR,QACA1L,EAAMZ,QAAQuM,QAAQd,EAAQa,UAAUE,YAT9C,SAaGvK,GAAiBrC,KAAO6L,EAAQa,UAAsC,UAA1BrK,GAAiBD,KAC1D5E,EAAE,kBACFA,EAAE,qBAGV,cAAC,IAAD,CAAS0I,UAAWC,IAAM0G,kBAA1B,SACE,cAAC,IAAD,UACE,qBAAK3G,UAAWC,IAAM2G,cAAtB,SACE,+BAAO9L,EAAMZ,QAAQuM,QAAQd,EAAQa,UAAUE,qBAKvD,eAAC,IAAKR,OAAN,CACElG,UACEC,IAAMkG,OACN,IACAlG,IAAM4G,cACkD,KAAvD/L,EAAMZ,QAAQuM,QAAQd,EAAQa,UAAUM,WAAoB,IAAM7G,IAAM8G,MAAQ,IALrF,UAQE,eAAC,IAAD,CAAQ1E,KAAK,QAAQrC,UAAWC,IAAMoG,aAAtC,UACG/O,EAAE,kBACH,cAAC,IAAD,CACE+K,KAAK,QACLQ,GAAG,IACHyD,SAAS,QACTtG,UAAWC,IAAMsG,WACjBhG,QAAS,SAAA9H,GAAC,OACR4D,GACEsJ,EAAQa,SACR,SACA1L,EAAMZ,QAAQuM,QAAQd,EAAQa,UAAUM,aAT9C,SAaG3K,GAAiBrC,KAAO6L,EAAQa,UAAsC,WAA1BrK,GAAiBD,KAC1D5E,EAAE,kBACFA,EAAE,qBAGV,cAAC,IAAD,CAAS0I,UAAWC,IAAM0G,kBAA1B,SACE,cAAC,IAAD,UACE,qBAAK3G,UAAWC,IAAM2G,cAAtB,SACE,+BAAO9L,EAAMZ,QAAQuM,QAAQd,EAAQa,UAAUM,yBAMzD,cAAC,IAAKb,IAAN,CAAUjG,UAAWC,IAAM+G,kBAA3B,SACE,cAAC,IAAKd,OAAN,UACE,cAAC,UAAD,CAAiB/F,QAASwF,EAAQnC,KAAMuC,QAASrD,gBAhFxCkD,SAyFxB3K,GACC,qCACE,cAAC,IAAD,CAAS+E,UAAWC,IAAMmE,QAAU,IAAMnE,IAAMgH,gBAC/C9E,MAGL,qBAAKnC,UAAWC,IAAMiH,eAAtB,SACE,sBAAKlH,UAAWC,IAAMkH,mBAAtB,UACE,eAAC,IAAD,CAAMb,UAAQ,EAACc,WAAS,EAACC,UAAQ,EAACrH,UAAWC,IAAMqH,WAAnD,UACGxM,EAAMZ,QAAQqN,aAAezM,EAAM4F,gBAAgB8G,cAAc1M,EAAMZ,QAAQ4J,YAC9E,cAAC,IAAD,CACE2D,QACE,cAAC,IAAKpE,KAAN,CACErD,UAAWC,IAAMyH,kBACjB9D,KAAMtM,EAAE,kBACRyI,KAAK,cACLQ,QAAS7E,IAASiM,YA/StC,WACE9G,GAAmB9B,QAAUoC,GAAcuD,UAC3CvD,GAAcuD,UAAY,EAC1B9D,IAAgB,IA4SmD,OAGrDJ,WAAY9E,IAASiM,YACrBxH,QAAS,cAAC,IAAD,CAAQyH,SAAO,EAACzH,QAAS7I,EAAE,2BAA4BiJ,QAAS,kBAAM0B,QAC/E4F,GAAG,QACHC,SAAS,aAGb,cAAC,IAAKzE,KAAN,CACEO,KAAMtM,EAAE,sBACRyI,KAAK,OACL8C,GAAIqB,IACJ1L,KAAM,CACJ2E,SAAU,KACVG,MACmB,OAAjBxC,EAAMjB,OACF,CACExC,UAAWyD,EAAMZ,QAAQkB,KAAKtB,GAAG4C,YAEnC,CACEqL,iBAAkBjN,EAAMZ,QAAQkB,KAAKqB,UAAUC,eAI1DgE,GAAgBsH,oBACf,cAAC,IAAK3E,KAAN,CACEO,KAAMtM,EAAE,sBACRyI,KAAK,yBACL8C,GAAIqB,IACJ1L,KAAM4E,YAActC,EAAMZ,QAAQkB,KAAM,CAAE6M,SAAU,yBAGxD,eAAC,IAAK5E,KAAN,CACER,GAAIqB,IACJ1L,KAAM,CACJ2E,SAAU,KACVG,MAAO,CACLjG,UAAWyD,EAAMZ,QAAQkB,KAAKtB,KALpC,UASE,cAAC,IAAD,CAAM8J,KAAK,aACVtM,EAAE,sBACFwD,EAAMZ,QAAQgO,gBACb,cAAC,IAAD,CACElI,UAAWC,IAAMiI,gBACjBC,UAAQ,EACRhI,QAASrF,EAAMZ,QAAQgO,gBACvB7F,KAAK,SAEL,QAEN,cAAC,IAAKgB,KAAN,CACEO,KAAMtM,EAAE,iBACRyI,KAAK,cACL8C,GAAIqB,IACJ1L,KAAM4E,YAActC,EAAMZ,QAAQkB,KAAM,CAAE6M,SAAU,eAGxD,eAAC,IAAD,CAAM3B,UAAQ,EAACc,WAAS,EAACC,UAAQ,EAACrH,UAAS,UAAKC,IAAMqH,WAAX,YAAyBrH,IAAMmI,kBAA1E,UACGtN,EAAMZ,QAAQ0E,wBAAwBC,SAAS,WAC9C,cAAC,IAAKwE,KAAN,CACEO,KAAMtM,EAAE,gBACRyI,KAAK,OACL8C,GAAIqB,IACJ1L,KAAM,CACJ2E,SAAUC,YAActC,EAAMZ,QAAQkB,KAAM,CAAE6M,SAAU,SACxD3K,MAAOxC,EAAMyC,gBACT,CACExD,OAAQe,EAAMyC,iBAEhB,QAITzC,EAAMZ,QAAQ0E,wBAAwBC,SAAS,WAC9C,cAAC,IAAKwE,KAAN,CACEO,KAAMtM,EAAE,0BACRyI,KAAK,MACL8C,GAAIqB,IACJ1L,KAAM4E,YAActC,EAAMZ,QAAQkB,KAAM,CAAE6M,SAAU,qBAMtDnN,EAAMZ,QAAQ0E,wBAAwBC,SAAS,WAC7C,eAAC,IAAKwE,KAAN,CAAW9C,QAzlBkC,4CAylB7C,UACE,cAAC,IAAD,CAAMqD,KAAK,QACVtM,EAAE,6BACH,cAAC,IAAD,CAAQ+K,KAAK,OAAOgG,OAAQhK,QAIjCvD,EAAMZ,QAAQ0E,wBAAwBC,SAAS,qBAC9C,cAAC,IAAD,CACE4I,QAAS,cAAC,IAAKpE,KAAN,CAAWO,KAAMtM,EAAE,0BAA2ByI,KAAK,YAC5DI,QACE,eAAC,IAAD,WACE,cAAC,IAAKmI,MAAN,CACErI,MAAO,CAAEsI,MAAO,KAChBC,YAAalR,EAAE,8BACfoC,MAAOiD,GACP8L,aAAa,WACbC,SAAU,SAACjQ,GAAD,OAA4CmE,GAA0BnE,EAAEkQ,OAAOjP,QACzFkP,WAAYC,aAAa,kBAAMpL,UAEjC,cAAC,IAAD,CAAQ6C,QAAS9C,GAAqB+C,QAAS9C,GAA/C,SACGnG,EAAE,sCAITuQ,GAAG,QACHC,SAAS,aAGZhN,EAAMZ,QAAQ0E,wBAAwBC,SAAS,qBAC9C,cAAC,IAAD,CACE4I,QACE,cAAC,IAAKpE,KAAN,CACEO,KAAM9I,EAAMZ,QAAQkB,KAAKsC,SAAWpG,EAAE,0BAA4BA,EAAE,sBACpEyI,KAAMjF,EAAMZ,QAAQkB,KAAKsC,SAAW,YAAc,QAGtDyC,QACE,cAAC,IAAD,CACEG,QAASzC,GACT8F,MAAO7I,EAAMZ,QAAQkB,KAAKsC,SAAW,KAAO,QAC5CyC,QACErF,EAAMZ,QAAQkB,KAAKsC,SACfpG,EAAE,kCACFA,EAAE,8BAERiJ,QAAS,kBAAMzC,IAAahD,EAAMZ,QAAQkB,KAAKsC,aAGnDmK,GAAG,QACHC,SAAS,aAGZhN,EAAMZ,QAAQ0E,wBAAwBC,SAAS,WAC9C,cAAC,IAAKwE,KAAN,CACErD,UAAWC,IAAM6I,kBACjBlF,KAAMtM,EAAE,kBACRyI,KAAK,SACLQ,QAASX,GAAamJ,sB,SAazBC,G,iFAAf,WAAkC9M,GAAlC,SAAAlC,EAAA,sEAEW,WACL,OAAQkC,GACN,KAAK+M,IAAYC,YACf,OAAO,kIACT,KAAKD,IAAYE,YACf,OAAO,yHACT,KAAKF,IAAYG,aACf,OAAO,kIAPN,GAFX,uCAYIC,SAZJ,4C,sBAFAxO,GAAkByO,YAASzO,IAiBZ,WACb0O,KAAMC,YAAW,uCAAC,WAAMC,GAAN,mBAAAzP,EAAA,6DACVF,EAAK4P,SAASD,EAAQE,OAAR,IACdpM,EAA0BkM,EAAQnM,MAAR,UAA2BsM,KAAWH,EAAQnM,MAAR,OAFtD,SAGM1D,GAAU,KAAME,EAAIyD,GAAmB7B,IAAS2J,eAHtD,cAGVnL,EAHU,uBAMbW,GANa,KASK0C,EATL,KAUHrD,EAVG,UAWW8O,GAAmB9O,EAAQkB,KAAKc,MAX3C,iCAQZrC,OAAO,KACP0D,gBATY,KAUZrD,QAVY,KAWZwG,gBAXY,WAOPmJ,cAPO,wFAAD,uDAejBC,YAAaN,YAAW,uCAAC,WAAMC,GAAN,mBAAAzP,EAAA,6DACjByC,EAAYiN,SAASD,EAAQE,OAAR,WACrBpM,EAA0BkM,EAAQnM,MAAR,UAA2BsM,KAAWH,EAAQnM,MAAR,OAF/C,SAGD1D,GAAU,YAAa6C,EAAWc,GAAmB7B,IAAS2J,eAH7D,cAGjBnL,EAHiB,uBAMpBW,GANoB,KASF0C,EATE,KAUVrD,EAVU,UAWI8O,GAAmB9O,EAAQkB,KAAKc,MAXpC,iCAQnBrC,OAAO,YACP0D,gBATmB,KAUnBrD,QAVmB,KAWnBwG,gBAXmB,WAOdmJ,cAPc,wFAAD","file":"static/js/64.a8b7db5a.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport {\n  Dropdown,\n  Grid,\n  Icon,\n  Label,\n  Header,\n  Statistic,\n  Menu,\n  Divider,\n  Segment,\n  Popup,\n  Button,\n  Form,\n  Message,\n  Loader\n} from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\nimport update from \"immutability-helper\";\nimport objectPath from \"object-path\";\nimport { v4 as uuid } from \"uuid\";\n\nimport style from \"./ProblemViewPage.module.less\";\n\nimport api from \"@/api\";\nimport { Locale } from \"@/interfaces/Locale\";\nimport localeMeta from \"@/locales/meta\";\nimport { appState } from \"@/appState\";\nimport {\n  useLocalizer,\n  useLoginOrRegisterNavigation,\n  useDialog,\n  useAsyncCallbackPending,\n  useRecaptcha,\n  useScreenWidthWithin,\n  useNavigationChecked,\n  Link,\n  useConfirmNavigation\n} from \"@/utils/hooks\";\nimport toast from \"@/utils/toast\";\nimport copyToClipboard from \"@/utils/copyToClipboard\";\nimport { isValidDisplayId } from \"@/utils/validators\";\nimport PermissionManager from \"@/components/LazyPermissionManager\";\nimport { sortTags } from \"../problemTag\";\nimport { defineRoute, RouteError } from \"@/AppRouter\";\nimport { StatusIcon } from \"@/components/StatusText\";\nimport { ProblemType } from \"@/interfaces/ProblemType\";\nimport { ProblemTypeView } from \"./common/interface\";\nimport MarkdownContent, { MarkdownContentPatcher } from \"@/markdown/MarkdownContent\";\nimport { callApiWithFileUpload } from \"@/utils/callApiWithFileUpload\";\nimport { getProblemDisplayName, getProblemUrl } from \"../utils\";\nimport { onEnterPress } from \"@/utils/onEnterPress\";\nimport { downloadProblemFile, downloadProblemFilesAsArchive } from \"../files/ProblemFilesPage\";\nimport { makeToBeLocalizedText } from \"@/locales\";\nimport { EmojiRenderer } from \"@/components/EmojiRenderer\";\n\nexport function useProblemViewMarkdownContentPatcher(problemId: number): MarkdownContentPatcher {\n  const _ = useLocalizer();\n\n  const FILE_DOWNLOAD_LINK_PREFIX = \"file:\";\n  const FILE_DOWNLOAD_LINK_ALL_PREFIX = \"allfiles:\";\n\n  const FILE_DOWNLOAD_LINK_PREFIXES = [FILE_DOWNLOAD_LINK_PREFIX, FILE_DOWNLOAD_LINK_ALL_PREFIX];\n\n  function isStartedWithFileDownloadPrefix(url: string) {\n    return FILE_DOWNLOAD_LINK_PREFIXES.some(s => url.startsWith(s));\n  }\n\n  function tryParseAndDownload(fileUrl: string) {\n    if (fileUrl.startsWith(FILE_DOWNLOAD_LINK_ALL_PREFIX)) {\n      downloadProblemFilesAsArchive(\n        problemId,\n        fileUrl.substr(FILE_DOWNLOAD_LINK_ALL_PREFIX.length),\n        \"AdditionalFile\",\n        [],\n        _\n      );\n      return true;\n    } else if (fileUrl.startsWith(FILE_DOWNLOAD_LINK_PREFIX)) {\n      const filename = fileUrl.substr(FILE_DOWNLOAD_LINK_PREFIX.length).split(\"/\").join(\"\");\n\n      downloadProblemFile(problemId, \"AdditionalFile\", filename, _);\n      return true;\n    }\n\n    return false;\n  }\n\n  return {\n    onPatchRenderer(renderer) {\n      const originValidateLink = renderer.validateLink;\n      renderer.validateLink = url => originValidateLink(url) || isStartedWithFileDownloadPrefix(url.toLowerCase());\n    },\n    onPatchResult(element) {\n      const onLinkClick = (href: string) => (e: MouseEvent) => tryParseAndDownload(href) && e.preventDefault();\n\n      for (const link of element.getElementsByTagName(\"a\")) link.addEventListener(\"click\", onLinkClick(link.href));\n    },\n    onXssFileterAttr(tagName, attrName, value, escapeAttrValue) {\n      if (tagName === \"a\" && attrName === \"href\" && isStartedWithFileDownloadPrefix(value)) return true;\n    }\n  };\n}\n\nasync function fetchData(idType: \"id\" | \"displayId\", id: number, locale: Locale) {\n  const { requestError, response } = await api.problem.getProblem({\n    [idType]: id,\n    localizedContentsOfLocale: locale,\n    tagsOfLocale: locale,\n    samples: true,\n    judgeInfo: true,\n    judgeInfoToBePreprocessed: true,\n    statistics: true,\n    discussionCount: true,\n    permissionOfCurrentUser: true,\n    lastSubmissionAndLastAcceptedSubmission: true\n  });\n\n  if (requestError) throw new RouteError(requestError, { showRefresh: true, showBack: true });\n  else if (response.error) throw new RouteError(makeToBeLocalizedText(`problem.error.${response.error}`));\n\n  sortTags(response.tagsOfLocale);\n  return response;\n}\n\ninterface ProblemViewPageProps {\n  idType: \"id\" | \"displayId\";\n  requestedLocale: Locale;\n  problem: ApiTypes.GetProblemResponseDto;\n  ProblemTypeView: ProblemTypeView<any>;\n}\n\nlet ProblemViewPage: React.FC<ProblemViewPageProps> = props => {\n  const _ = useLocalizer(\"problem\");\n  const navigation = useNavigationChecked();\n\n  const isMobile = useScreenWidthWithin(0, 768);\n\n  const [idString, title, all] = getProblemDisplayName(\n    props.problem.meta,\n    props.problem.localizedContentsOfLocale.title,\n    _,\n    \"tuple\"\n  );\n\n  useEffect(() => {\n    appState.enterNewPage(`${all} - ${_(\".title\")}`, \"problem_set\");\n  }, [appState.locale, props.problem]);\n\n  const recaptcha = useRecaptcha();\n\n  // Begin toggle tags\n  const [showTags, setShowTags] = useState(appState.showTagsInProblemSet);\n  function toggleTags() {\n    setShowTags(!showTags);\n  }\n  // End toggle tags\n\n  // Begin copy sample\n  const [lastCopiedSample, setLastCopiedSample] = useState<{ id: number; type: \"input\" | \"output\" }>({\n    id: null,\n    type: null\n  });\n  async function onCopySampleClick(id: number, type: \"input\" | \"output\", data: string) {\n    if (await copyToClipboard(data)) {\n      setLastCopiedSample({ id, type });\n    } else {\n      toast.error(_(\".sample.failed_to_copy\"));\n    }\n  }\n  // End copy sample\n\n  // Begin set display ID\n  const [setDisplayIdInputValue, setSetDisplayIdInputValue] = useState((props.problem.meta.displayId || \"\").toString());\n  const [setDisplayIdPending, onSetDisplayId] = useAsyncCallbackPending(async () => {\n    if (!isValidDisplayId(setDisplayIdInputValue)) {\n      toast.error(_(\".error.INVALID_DISPLAY_ID\"));\n    } else {\n      const { requestError, response } = await api.problem.setProblemDisplayId({\n        problemId: props.problem.meta.id,\n        displayId: Number(setDisplayIdInputValue)\n      });\n\n      if (requestError) toast.error(requestError(_));\n      else if (response.error) {\n        toast.error(\n          _(`.error.${response.error}`, {\n            displayId: setDisplayIdInputValue\n          })\n        );\n      } else {\n        navigation.unconfirmed.navigate({\n          pathname: !Number(setDisplayIdInputValue)\n            ? getProblemUrl(props.problem.meta.id, { use: \"id\" })\n            : getProblemUrl(Number(setDisplayIdInputValue), { use: \"displayId\" }),\n          query: props.requestedLocale\n            ? {\n                locale: props.requestedLocale\n              }\n            : null\n        });\n      }\n    }\n  });\n  // End set display ID\n\n  // Begin set public\n  const [setPublicPending, onSetPublic] = useAsyncCallbackPending(async (isPublic: boolean) => {\n    const { requestError, response } = await api.problem.setProblemPublic({\n      problemId: props.problem.meta.id,\n      isPublic\n    });\n\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) {\n      toast.error(_(`.error.${response.error}`));\n    } else return navigation.unconfirmed.refresh();\n  });\n  // End set public\n\n  // Begin \"localized content unavailable\" message\n  const [localizedContentUnavailableMessageVisable, setLocalizedContentUnavailableMessageVisable] = useState(\n    !appState.userPreference?.locale?.hideUnavailableMessage\n  );\n  // End \"locaized content unavailable\" message\n\n  // Begin Permission Manager\n  const refOpenPermissionManager = useRef<() => Promise<boolean>>();\n  const [permissionManagerLoading, setPermissionManagerLoading] = useState(false);\n  async function onGetInitialPermissions() {\n    const { requestError, response } = await api.problem.getProblem({\n      id: props.problem.meta.id,\n      owner: true,\n      permissions: true\n    });\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) toast.error(_(`.error.${response.error}`));\n    else {\n      return {\n        owner: response.owner,\n        userPermissions: response.permissions.userPermissions,\n        groupPermissions: response.permissions.groupPermissions,\n        haveSubmitPermission: props.problem.permissionOfCurrentUser.includes(\"ManagePermission\")\n      };\n    }\n    return null;\n  }\n\n  async function onSubmitPermissions(\n    userPermissions: { userId: number; permissionLevel: number }[],\n    groupPermissions: { groupId: number; permissionLevel: number }[]\n  ) {\n    const { requestError, response } = await api.problem.setProblemPermissions({\n      problemId: props.problem.meta.id,\n      userPermissions: userPermissions as any,\n      groupPermissions: groupPermissions as any\n    });\n    if (requestError) toast.error(requestError(_));\n    else if (response.error === \"NO_SUCH_PROBLEM\") toast.error(_(\".error.NO_SUCH_PROBLEM\"));\n    else if (response.error) return response;\n    return true;\n  }\n\n  async function onClickPermissionManage() {\n    if (permissionManagerLoading) return;\n    setPermissionManagerLoading(true);\n    await refOpenPermissionManager.current();\n    setPermissionManagerLoading(false);\n  }\n\n  const permissionManager = (\n    <PermissionManager\n      objectDescription={_(\".action.permission_manager_description\", { idString })}\n      permissionsLevelDetails={{\n        1: {\n          title: _(\".permission_level.read\")\n        },\n        2: {\n          title: _(\".permission_level.write\")\n        }\n      }}\n      refOpen={refOpenPermissionManager}\n      onGetInitialPermissions={onGetInitialPermissions}\n      onSubmitPermissions={onSubmitPermissions}\n    />\n  );\n  // End Permission Manager\n\n  // Begin delete\n  const [deletePending, onDelete] = useAsyncCallbackPending(async () => {\n    const { requestError, response } = await api.problem.deleteProblem({\n      problemId: props.problem.meta.id\n    });\n    if (requestError) toast.error(requestError(_));\n    else if (response.error) toast.error(_(`.error.${response.error}`));\n    else {\n      toast.success(_(\".action.delete_success\"));\n      navigation.unconfirmed.navigate(\"/p\");\n    }\n  });\n  const deleteDialog = useDialog(\n    {\n      basic: true\n    },\n    () => (\n      <>\n        <Header icon=\"delete\" className={style.dialogHeader} content={_(\".action.delete_confirm_title\")} />\n      </>\n    ),\n    () => _(\".action.delete_confirm_content\"),\n    () => (\n      <>\n        <Button\n          basic\n          inverted\n          negative\n          content={_(\".action.delete_confirm\")}\n          loading={deletePending}\n          onClick={onDelete}\n        />\n        <Button\n          basic\n          inverted\n          content={_(\".action.delete_cancel\")}\n          disabled={deletePending}\n          onClick={() => deleteDialog.close()}\n        />\n      </>\n    )\n  );\n  // End delete\n\n  const ProblemTypeView = props.ProblemTypeView;\n\n  // Begin submit\n  const [inSubmitView, setInSubmitView] = useState(false);\n  const refScrollTopBackup = useRef(0);\n  const [submissionContent, setSubmissionContent] = useState(\n    props.problem.lastSubmission.lastSubmissionContent || ProblemTypeView.getDefaultSubmissionContent()\n  );\n  const scrollElement = document.documentElement;\n\n  function openSubmitView() {\n    refScrollTopBackup.current = scrollElement.scrollTop;\n    scrollElement.scrollTop = 0;\n    setInSubmitView(true);\n  }\n\n  function closeSubmitView() {\n    // Restore scroll top if we're not on a mobile view\n    window.requestAnimationFrame(() => {\n      scrollElement.scrollTop = isMobile ? 0 : refScrollTopBackup.current;\n    });\n    setInSubmitView(false);\n  }\n\n  const [modified, setModified] = useConfirmNavigation();\n  function updateSubmissionContent(path: string, value: any) {\n    setModified(true);\n    const spec = {};\n    objectPath.set(spec, path + \".$set\", value);\n    setSubmissionContent(submissionContent => update(submissionContent, spec));\n  }\n\n  const [submitPending, setSubmitPending] = useState(false);\n\n  async function onSubmit(onGetSubmitFile?: () => Promise<Blob>) {\n    if (submitPending) return;\n    setSubmitPending(true);\n\n    const { uploadError, requestError, response } = await callApiWithFileUpload(\n      api.submission.submit,\n      {\n        problemId: props.problem.meta.id,\n        content: submissionContent\n      },\n      () => recaptcha(\"SubmitProblem\"),\n      onGetSubmitFile ? await onGetSubmitFile() : null\n    );\n\n    if (uploadError) toast.error(_(\".upload_error\", { error: String(uploadError) }));\n    else if (requestError) toast.error(requestError(_));\n    else if (response.error) {\n      toast.error(_(`.error.${response.error}`));\n    } else {\n      setModified(false);\n      navigation.navigate(`/s/${response.submissionId}`);\n    }\n\n    setSubmitPending(false);\n  }\n  // End submit\n\n  const navigateToLogin = useLoginOrRegisterNavigation(\"login\");\n\n  const statistic = (\n    <Statistic.Group size=\"small\" className={style.statistic}>\n      <Statistic>\n        <Statistic.Value>{props.problem.meta.acceptedSubmissionCount}</Statistic.Value>\n        <Statistic.Label>{_(\".statistic.accepted\")}</Statistic.Label>\n      </Statistic>\n      <Statistic>\n        <Statistic.Value>{props.problem.meta.submissionCount}</Statistic.Value>\n        <Statistic.Label>{_(\".statistic.submissions\")}</Statistic.Label>\n      </Statistic>\n    </Statistic.Group>\n  );\n\n  const problemViewMarkdownContentPatcher = useProblemViewMarkdownContentPatcher(props.problem.meta.id);\n\n  return (\n    <>\n      {permissionManager}\n      {deleteDialog.element}\n      <div className={style.topContainer}>\n        <div className={style.titleSection}>\n          <Header as=\"h1\" className={style.header}>\n            {props.problem.lastSubmission.lastAcceptedSubmission && (\n              <Link\n                className={style.lastAcceptedSubmission}\n                href={`/s/${props.problem.lastSubmission.lastAcceptedSubmission.id}`}\n              >\n                <StatusIcon status=\"Accepted\" />\n              </Link>\n            )}\n            <EmojiRenderer>\n              <span>\n                {idString}.&nbsp;{title}\n              </span>\n            </EmojiRenderer>\n            {props.problem.meta.locales.length > 1 && (\n              <Dropdown icon=\"globe\" className={style.languageSelectIcon}>\n                <Dropdown.Menu>\n                  {props.problem.meta.locales.map((locale: Locale) => (\n                    <Dropdown.Item\n                      key={locale}\n                      onClick={() => {\n                        navigation.navigate({\n                          query: {\n                            locale: locale\n                          }\n                        });\n                      }}\n                      flag={localeMeta[locale].flag}\n                      text={_(`language.${locale}`)}\n                      value={locale}\n                      selected={locale === props.problem.localizedContentsOfLocale.locale}\n                    />\n                  ))}\n                </Dropdown.Menu>\n              </Dropdown>\n            )}\n          </Header>\n          <div className={style.labels}>\n            {!props.problem.meta.isPublic && (\n              <Label size={isMobile ? \"small\" : null} color=\"red\" basic>\n                <Icon name=\"eye slash\" />\n                {_(`.meta_labels.non_public`)}\n              </Label>\n            )}\n            {!props.problem.meta.displayId && (\n              <Label size={isMobile ? \"small\" : null} color=\"brown\" basic>\n                <Icon name=\"hashtag\" />\n                {_(`.meta_labels.no_display_id`)}\n              </Label>\n            )}\n            <Label size={isMobile ? \"small\" : null} color=\"teal\">\n              <Icon name=\"book\" />\n              {_(`.type.${props.problem.meta.type}`)}\n            </Label>\n            <ProblemTypeView.Labels size={isMobile ? \"small\" : null} judgeInfo={props.problem.judgeInfo} />\n            {props.problem.tagsOfLocale.length > 0 && (\n              <>\n                <Label\n                  size={isMobile ? \"small\" : null}\n                  color=\"grey\"\n                  as=\"a\"\n                  onClick={toggleTags}\n                  className={style.toggleTagsLabel}\n                >\n                  {!showTags ? _(\".show_tags\") : _(\".hide_tags\")}\n                  <Icon name={\"caret down\"} style={{ transform: showTags && \"rotateZ(-90deg)\" }} />\n                </Label>\n                {showTags && (\n                  <>\n                    {props.problem.tagsOfLocale.map(tag => (\n                      <EmojiRenderer key={tag.id}>\n                        <Label\n                          size={isMobile ? \"small\" : null}\n                          content={tag.name}\n                          color={tag.color as any}\n                          as={Link}\n                          href={{\n                            pathname: \"/p\",\n                            query: {\n                              tagIds: tag.id.toString()\n                            }\n                          }}\n                        />\n                      </EmojiRenderer>\n                    ))}\n                  </>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n        {!isMobile && statistic}\n      </div>\n      <Divider className={style.divider} />\n      <ProblemTypeView.SubmitView\n        judgeInfo={props.problem.judgeInfo}\n        lastSubmission={props.problem.lastSubmission}\n        inSubmitView={inSubmitView}\n        pendingSubmit={submitPending}\n        submissionContent={submissionContent}\n        onCloseSubmitView={closeSubmitView}\n        onUpdateSubmissionContent={updateSubmissionContent}\n        onSubmit={onSubmit}\n      />\n      <div className={style.statementView} style={{ display: inSubmitView ? \"none\" : null }}>\n        <div className={style.leftContainer}>\n          {localizedContentUnavailableMessageVisable &&\n            ![appState.contentLocale, props.requestedLocale].includes(\n              props.problem.localizedContentsOfLocale.locale as Locale\n            ) && (\n              <Message\n                onDismiss={() => setLocalizedContentUnavailableMessageVisable(false)}\n                content={\n                  <span\n                    dangerouslySetInnerHTML={{\n                      __html: _(\"common.localized_content_unavailable\", {\n                        display_locale: `<b>${_(`language.${props.problem.localizedContentsOfLocale.locale}`)}</b>`\n                      })\n                    }}\n                  />\n                }\n              />\n            )}\n          {props.problem.localizedContentsOfLocale.contentSections.map((section, i) => (\n            <React.Fragment key={i}>\n              <EmojiRenderer>\n                <Header size=\"large\">{section.sectionTitle}</Header>\n              </EmojiRenderer>\n              {section.type === \"Text\" ? (\n                <>\n                  <MarkdownContent content={section.text} patcher={problemViewMarkdownContentPatcher} />\n                </>\n              ) : (\n                <>\n                  <Grid columns=\"equal\">\n                    <Grid.Row>\n                      <Grid.Column className={style.sample + \" \" + style.sampleInput}>\n                        <Header size=\"small\" className={style.sampleHeader}>\n                          {_(\".sample.input\")}\n                          <Label\n                            size=\"small\"\n                            as=\"a\"\n                            pointing=\"below\"\n                            className={style.copySample}\n                            onClick={e =>\n                              onCopySampleClick(\n                                section.sampleId,\n                                \"input\",\n                                props.problem.samples[section.sampleId].inputData\n                              )\n                            }\n                          >\n                            {lastCopiedSample.id === section.sampleId && lastCopiedSample.type === \"input\"\n                              ? _(\".sample.copied\")\n                              : _(\".sample.copy\")}\n                          </Label>\n                        </Header>\n                        <Segment className={style.sampleDataSegment}>\n                          <EmojiRenderer>\n                            <pre className={style.sampleDataPre}>\n                              <code>{props.problem.samples[section.sampleId].inputData}</code>\n                            </pre>\n                          </EmojiRenderer>\n                        </Segment>\n                      </Grid.Column>\n                      <Grid.Column\n                        className={\n                          style.sample +\n                          \" \" +\n                          style.sampleOutput +\n                          (props.problem.samples[section.sampleId].outputData === \"\" ? \" \" + style.empty : \"\")\n                        }\n                      >\n                        <Header size=\"small\" className={style.sampleHeader}>\n                          {_(\".sample.output\")}\n                          <Label\n                            size=\"small\"\n                            as=\"a\"\n                            pointing=\"below\"\n                            className={style.copySample}\n                            onClick={e =>\n                              onCopySampleClick(\n                                section.sampleId,\n                                \"output\",\n                                props.problem.samples[section.sampleId].outputData\n                              )\n                            }\n                          >\n                            {lastCopiedSample.id === section.sampleId && lastCopiedSample.type === \"output\"\n                              ? _(\".sample.copied\")\n                              : _(\".sample.copy\")}\n                          </Label>\n                        </Header>\n                        <Segment className={style.sampleDataSegment}>\n                          <EmojiRenderer>\n                            <pre className={style.sampleDataPre}>\n                              <code>{props.problem.samples[section.sampleId].outputData}</code>\n                            </pre>\n                          </EmojiRenderer>\n                        </Segment>\n                      </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row className={style.sampleExplanation}>\n                      <Grid.Column>\n                        <MarkdownContent content={section.text} patcher={problemViewMarkdownContentPatcher} />\n                      </Grid.Column>\n                    </Grid.Row>\n                  </Grid>\n                </>\n              )}\n            </React.Fragment>\n          ))}\n        </div>\n        {isMobile && (\n          <>\n            <Divider className={style.divider + \" \" + style.dividerBottom} />\n            {statistic}\n          </>\n        )}\n        <div className={style.rightContainer}>\n          <div className={style.actionMenusWrapper}>\n            <Menu pointing secondary vertical className={style.actionMenu}>\n              {props.problem.submittable && props.ProblemTypeView.isSubmittable(props.problem.judgeInfo) && (\n                <Popup\n                  trigger={\n                    <Menu.Item\n                      className={style.menuItemImportant}\n                      name={_(\".action.submit\")}\n                      icon=\"paper plane\"\n                      onClick={appState.currentUser ? openSubmitView : null}\n                    />\n                  }\n                  disabled={!!appState.currentUser}\n                  content={<Button primary content={_(\".action.login_to_submit\")} onClick={() => navigateToLogin()} />}\n                  on=\"click\"\n                  position=\"top left\"\n                />\n              )}\n              <Menu.Item\n                name={_(\".action.submission\")}\n                icon=\"list\"\n                as={Link}\n                href={{\n                  pathname: \"/s\",\n                  query:\n                    props.idType === \"id\"\n                      ? {\n                          problemId: props.problem.meta.id.toString()\n                        }\n                      : {\n                          problemDisplayId: props.problem.meta.displayId.toString()\n                        }\n                }}\n              />\n              {ProblemTypeView.enableStatistics() && (\n                <Menu.Item\n                  name={_(\".action.statistics\")}\n                  icon=\"sort content ascending\"\n                  as={Link}\n                  href={getProblemUrl(props.problem.meta, { subRoute: \"statistics/fastest\" })}\n                />\n              )}\n              <Menu.Item\n                as={Link}\n                href={{\n                  pathname: \"/d\",\n                  query: {\n                    problemId: props.problem.meta.id\n                  }\n                }}\n              >\n                <Icon name=\"comments\" />\n                {_(\".action.discussion\")}\n                {props.problem.discussionCount ? (\n                  <Label\n                    className={style.discussionCount}\n                    circular\n                    content={props.problem.discussionCount}\n                    size=\"tiny\"\n                  />\n                ) : null}\n              </Menu.Item>\n              <Menu.Item\n                name={_(\".action.files\")}\n                icon=\"folder open\"\n                as={Link}\n                href={getProblemUrl(props.problem.meta, { subRoute: \"files\" })}\n              />\n            </Menu>\n            <Menu pointing secondary vertical className={`${style.actionMenu} ${style.secondActionMenu}`}>\n              {props.problem.permissionOfCurrentUser.includes(\"Modify\") && (\n                <Menu.Item\n                  name={_(\".action.edit\")}\n                  icon=\"edit\"\n                  as={Link}\n                  href={{\n                    pathname: getProblemUrl(props.problem.meta, { subRoute: \"edit\" }),\n                    query: props.requestedLocale\n                      ? {\n                          locale: props.requestedLocale\n                        }\n                      : null\n                  }}\n                />\n              )}\n              {props.problem.permissionOfCurrentUser.includes(\"Modify\") && (\n                <Menu.Item\n                  name={_(\".action.judge_settings\")}\n                  icon=\"cog\"\n                  as={Link}\n                  href={getProblemUrl(props.problem.meta, { subRoute: \"judge-settings\" })}\n                />\n              )}\n              {\n                // Normal users won't interested in permissions\n                // Only show permission manage button when the user have write permission\n                props.problem.permissionOfCurrentUser.includes(\"Modify\") && (\n                  <Menu.Item onClick={onClickPermissionManage}>\n                    <Icon name=\"key\" />\n                    {_(\".action.permission_manage\")}\n                    <Loader size=\"tiny\" active={permissionManagerLoading} />\n                  </Menu.Item>\n                )\n              }\n              {props.problem.permissionOfCurrentUser.includes(\"ManagePublicness\") && (\n                <Popup\n                  trigger={<Menu.Item name={_(\".action.set_display_id\")} icon=\"hashtag\" />}\n                  content={\n                    <Form>\n                      <Form.Input\n                        style={{ width: 230 }}\n                        placeholder={_(\".action.set_display_id_new\")}\n                        value={setDisplayIdInputValue}\n                        autoComplete=\"username\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSetDisplayIdInputValue(e.target.value)}\n                        onKeyPress={onEnterPress(() => onSetDisplayId())}\n                      />\n                      <Button loading={setDisplayIdPending} onClick={onSetDisplayId}>\n                        {_(\".action.set_display_id_submit\")}\n                      </Button>\n                    </Form>\n                  }\n                  on=\"click\"\n                  position=\"top left\"\n                />\n              )}\n              {props.problem.permissionOfCurrentUser.includes(\"ManagePublicness\") && (\n                <Popup\n                  trigger={\n                    <Menu.Item\n                      name={props.problem.meta.isPublic ? _(\".action.set_non_public\") : _(\".action.set_public\")}\n                      icon={props.problem.meta.isPublic ? \"eye slash\" : \"eye\"}\n                    />\n                  }\n                  content={\n                    <Button\n                      loading={setPublicPending}\n                      color={props.problem.meta.isPublic ? null : \"green\"}\n                      content={\n                        props.problem.meta.isPublic\n                          ? _(\".action.set_non_public_confirm\")\n                          : _(\".action.set_public_confirm\")\n                      }\n                      onClick={() => onSetPublic(!props.problem.meta.isPublic)}\n                    />\n                  }\n                  on=\"click\"\n                  position=\"top left\"\n                />\n              )}\n              {props.problem.permissionOfCurrentUser.includes(\"Delete\") && (\n                <Menu.Item\n                  className={style.menuItemDangerous}\n                  name={_(\".action.delete\")}\n                  icon=\"delete\"\n                  onClick={deleteDialog.open}\n                />\n              )}\n            </Menu>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nProblemViewPage = observer(ProblemViewPage);\n\nasync function getProblemTypeView(type: ProblemType): Promise<ProblemTypeView<any>> {\n  return (\n    await (() => {\n      switch (type) {\n        case ProblemType.Traditional:\n          return import(\"./types/TraditionalProblemView\");\n        case ProblemType.Interaction:\n          return import(\"./types/InteractionProblemView\");\n        case ProblemType.SubmitAnswer:\n          return import(\"./types/SubmitAnswerProblemView\");\n      }\n    })()\n  ).default;\n}\n\nexport default {\n  byId: defineRoute(async request => {\n    const id = parseInt(request.params[\"id\"]);\n    const requestedLocale: Locale = request.query[\"locale\"] in Locale && (request.query[\"locale\"] as Locale);\n    const problem = await fetchData(\"id\", id, requestedLocale || appState.contentLocale);\n\n    return (\n      <ProblemViewPage\n        key={uuid()}\n        idType=\"id\"\n        requestedLocale={requestedLocale}\n        problem={problem}\n        ProblemTypeView={await getProblemTypeView(problem.meta.type as ProblemType)}\n      />\n    );\n  }),\n  byDisplayId: defineRoute(async request => {\n    const displayId = parseInt(request.params[\"displayId\"]);\n    const requestedLocale: Locale = request.query[\"locale\"] in Locale && (request.query[\"locale\"] as Locale);\n    const problem = await fetchData(\"displayId\", displayId, requestedLocale || appState.contentLocale);\n\n    return (\n      <ProblemViewPage\n        key={uuid()}\n        idType=\"displayId\"\n        requestedLocale={requestedLocale}\n        problem={problem}\n        ProblemTypeView={await getProblemTypeView(problem.meta.type as ProblemType)}\n      />\n    );\n  })\n};\n"],"sourceRoot":""}