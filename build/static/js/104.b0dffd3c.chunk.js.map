{"version":3,"sources":["pages/problem/judge-settings/common/ExtraSourceFilesEditor.tsx"],"names":["ExtraSourceFilesEditor","props","_","useLocalizer","useState","Object","fromEntries","values","CodeLanguage","map","codeLanguage","judgeInfo","extraSourceFiles","entries","a","uuid","setExtraSourceFiles","updateJudgeInfo","isNotByUser","onUpdateJudgeInfo","length","slice","filter","x","updateExtraSourceFiles","newExtraSourceFiles","updateExtraSourceFile","operation","i","newValue","update","$push","$splice","item","newDst","dst","newSrc","src","$set","Checkbox","checked","label","onChange","pending","className","style","menu","menuHeader","color_6","attached","Item","itemTitle","Menu","position","icon","itemWithIcon","text","onClick","iLanguage","files","lengthLanguage","extraSourceFilesItem","language","height","visibility","type","dropdown","testData","placeholder","value","input","iconPosition","transparent","e","trigger","title","content","negative","on","observer","judgeInfoProcessor","parseJudgeInfo","raw","fileMap","includes","keys","normalizeJudgeInfo","assign"],"mappings":"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","file":"static/js/104.b0dffd3c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Dropdown, Menu, Popup, Button, Form, Input } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\nimport update from \"immutability-helper\";\nimport { v4 as uuid } from \"uuid\";\n\nimport style from \"./ExtraSourceFilesEditor.module.less\";\n\nimport { useLocalizer } from \"@/utils/hooks\";\nimport { CodeLanguage } from \"@/interfaces/CodeLanguage\";\nimport TestDataFileSelector from \"./TestDataFileSelector\";\nimport { JudgeInfoProcessor, EditorComponentProps } from \"./interface\";\n\nexport interface JudgeInfoWithExtraSourceFiles {\n  // language => dst => src\n  extraSourceFiles?: Partial<Record<CodeLanguage, Record<string, string>>>;\n}\n\ntype ExtraSourceFilesEditorProps = EditorComponentProps<JudgeInfoWithExtraSourceFiles>;\n\nlet ExtraSourceFilesEditor: React.FC<ExtraSourceFilesEditorProps> = props => {\n  const _ = useLocalizer(\"problem_judge_settings\");\n\n  // To support inserting empty items, use a local copy for editing\n  // XXX: If the judge info's extraSourceFiles is modified outside this componment, it won't get synced\n  //      This componment should be unmounted and remounted.\n  type ExtraSourceFiles = Partial<Record<CodeLanguage, [string, string, string][]>>; // [uuid, dst, src]\n  const [extraSourceFiles, setExtraSourceFiles] = useState<ExtraSourceFiles>(\n    Object.fromEntries(\n      Object.values(CodeLanguage).map(codeLanguage =>\n        props.judgeInfo.extraSourceFiles\n          ? [\n              codeLanguage,\n              Object.entries(props.judgeInfo.extraSourceFiles[codeLanguage] || {}).map(a => [uuid(), ...a])\n            ]\n          : [codeLanguage, []]\n      )\n    )\n  );\n\n  function updateJudgeInfo(extraSourceFiles: ExtraSourceFiles, isNotByUser?: boolean) {\n    props.onUpdateJudgeInfo({\n      extraSourceFiles: Object.fromEntries(\n        Object.values(CodeLanguage)\n          .map(codeLanguage =>\n            extraSourceFiles[codeLanguage].length > 0\n              ? [codeLanguage, Object.fromEntries(extraSourceFiles[codeLanguage].map(a => a.slice(1)))]\n              : null\n          )\n          .filter(x => x)\n      )\n    });\n  }\n\n  // Update both a local copy and judge info\n  function updateExtraSourceFiles(newExtraSourceFiles: ExtraSourceFiles) {\n    setExtraSourceFiles(newExtraSourceFiles);\n    updateJudgeInfo(newExtraSourceFiles);\n  }\n\n  // Preverse the local copy\n  function onToggleExtraSourceFiles() {\n    if (props.pending) return;\n\n    if (!props.judgeInfo.extraSourceFiles) {\n      updateJudgeInfo(extraSourceFiles);\n    } else {\n      props.onUpdateJudgeInfo({ extraSourceFiles: null });\n    }\n  }\n\n  function updateExtraSourceFile(\n    codeLanguage: CodeLanguage,\n    operation: \"ADD\" | \"DEL\" | \"UPDATE\",\n    i?: number,\n    newValue?: { src?: string; dst?: string }\n  ) {\n    if (operation === \"ADD\") {\n      updateExtraSourceFiles(\n        update(extraSourceFiles, {\n          [codeLanguage]: {\n            $push: [[uuid(), \"\", \"\"]]\n          }\n        })\n      );\n    } else if (operation === \"DEL\") {\n      updateExtraSourceFiles(\n        update(extraSourceFiles, {\n          [codeLanguage]: {\n            $splice: [[i, 1]]\n          }\n        })\n      );\n    } else {\n      const item = extraSourceFiles[codeLanguage][i];\n      const newDst = newValue.dst == null ? item[1] : newValue.dst;\n      const newSrc = newValue.src == null ? item[2] : newValue.src;\n      updateExtraSourceFiles(\n        update(extraSourceFiles, {\n          [codeLanguage]: {\n            [i]: {\n              $set: [item[0], newDst, newSrc]\n            }\n          }\n        })\n      );\n    }\n  }\n\n  return (\n    <div>\n      <Form>\n        <Form.Checkbox\n          checked={!!props.judgeInfo.extraSourceFiles}\n          label={_(\".extra_source_files.option\")}\n          onChange={() => onToggleExtraSourceFiles()}\n        />\n        {props.judgeInfo.extraSourceFiles && (\n          <>\n            <Menu className={style.menu + \" \" + style.menuHeader + \" \" + style.color_6} attached=\"top\">\n              <Menu.Item className={style.itemTitle}>\n                <strong>{_(\".extra_source_files.title\")}</strong>\n              </Menu.Item>\n              <Menu.Menu position=\"right\">\n                <Dropdown item icon=\"plus\" className={`icon ${style.itemWithIcon}`}>\n                  <Dropdown.Menu>\n                    {Object.values(CodeLanguage).map(codeLanguage => (\n                      <Dropdown.Item\n                        key={codeLanguage}\n                        text={_(`code_language.${codeLanguage}.name`)}\n                        onClick={() => updateExtraSourceFile(codeLanguage, \"ADD\")}\n                      />\n                    ))}\n                  </Dropdown.Menu>\n                </Dropdown>\n              </Menu.Menu>\n            </Menu>\n            {extraSourceFiles &&\n              Object.entries(extraSourceFiles).map(([codeLanguage, files], iLanguage, { length: lengthLanguage }) =>\n                files.map(([uuid, dst, src], i) => (\n                  <Menu\n                    className={style.extraSourceFilesItem}\n                    key={uuid}\n                    attached={i == files.length - 1 && iLanguage === lengthLanguage - 1 ? \"bottom\" : (true as any)}\n                  >\n                    <Menu.Item\n                      className={style.itemTitle + \" \" + style.language}\n                      style={\n                        i == 0\n                          ? {\n                              height: 41 * files.length - 1\n                            }\n                          : {\n                              visibility: \"hidden\"\n                            }\n                      }\n                    >\n                      {_(`code_language.${codeLanguage}.name`)}\n                    </Menu.Item>\n                    <TestDataFileSelector\n                      type=\"ItemSearchDropdown\"\n                      className={style.dropdown}\n                      testData={props.testData}\n                      placeholder={_(\".extra_source_files.src\")}\n                      value={src}\n                      onChange={value => updateExtraSourceFile(codeLanguage as any, \"UPDATE\", i, { src: value })}\n                    />\n                    <Menu.Item className={style.input}>\n                      <Input\n                        icon=\"long arrow alternate right\"\n                        iconPosition=\"left\"\n                        transparent\n                        placeholder={_(\".extra_source_files.dst\")}\n                        value={dst}\n                        onChange={(e, { value }) =>\n                          updateExtraSourceFile(codeLanguage as any, \"UPDATE\", i, { dst: value })\n                        }\n                      />\n                    </Menu.Item>\n                    <Menu.Menu position=\"right\">\n                      <Popup\n                        trigger={\n                          <Menu.Item\n                            className={`icon ${style.itemWithIcon}`}\n                            icon=\"delete\"\n                            title={_(\".extra_source_files.delete\")}\n                          />\n                        }\n                        content={\n                          <Button\n                            negative\n                            content={_(\".extra_source_files.confirm_delete\")}\n                            onClick={() => updateExtraSourceFile(codeLanguage as any, \"DEL\", i)}\n                          />\n                        }\n                        on=\"click\"\n                        position=\"top center\"\n                      />\n                    </Menu.Menu>\n                  </Menu>\n                ))\n              )}\n          </>\n        )}\n      </Form>\n    </div>\n  );\n};\n\nExtraSourceFilesEditor = observer(ExtraSourceFilesEditor);\n\nconst judgeInfoProcessor: JudgeInfoProcessor<JudgeInfoWithExtraSourceFiles> = {\n  parseJudgeInfo(raw) {\n    return {\n      extraSourceFiles:\n        raw.extraSourceFiles && typeof raw.extraSourceFiles === \"object\"\n          ? Object.fromEntries(\n              Object.entries(raw.extraSourceFiles)\n                .filter(\n                  ([language, fileMap]) =>\n                    Object.values(CodeLanguage).includes(language as CodeLanguage) &&\n                    fileMap &&\n                    typeof fileMap === \"object\"\n                )\n                .map(([language, fileMap]) => [\n                  language,\n                  Object.fromEntries(Object.entries(fileMap).filter(([dst, src]) => typeof src === \"string\"))\n                ])\n                .filter(([language, fileMap]) => Object.keys(fileMap).length > 0)\n            )\n          : null\n    };\n  },\n  normalizeJudgeInfo(judgeInfo) {\n    if (!judgeInfo.extraSourceFiles) delete judgeInfo.extraSourceFiles;\n  }\n};\n\nexport default Object.assign(ExtraSourceFilesEditor, judgeInfoProcessor);\n"],"sourceRoot":""}